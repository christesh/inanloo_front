/**
 * English name of mobile operators are enum keys and persian name of them are values.
 * All characters of all of the keys are in lowercase
 */
export declare enum operatorsNames {
    irancell = "\u0627\u06CC\u0631\u0627\u0646\u0633\u0644",
    mci = "\u0647\u0645\u0631\u0627\u0647 \u0627\u0648\u0644",
    talia = "\u062A\u0627\u0644\u06CC\u0627",
    rightel = "\u0631\u0627\u06CC\u062A\u0644",
    spadan = "\u0627\u0633\u067E\u0627\u062F\u0627\u0646",
    tkc = "\u0634\u0628\u06A9\u0647 \u0645\u0633\u062A\u0642\u0644 \u062A\u0644\u0641\u0646 \u0647\u0645\u0631\u0627\u0647 \u06A9\u06CC\u0634",
    shatel = "\u0634\u0627\u062A\u0644",
    aptel = "\u0622\u067E\u062A\u0644",
    azartel = "\u0622\u0630\u0631\u062A\u0644",
    samantel = "\u0633\u0627\u0645\u0627\u0646\u062A\u0644",
    lotustel = "\u0644\u0648\u062A\u0648\u0633\u200C\u062A\u0644",
    anarestan = "\u0627\u0646\u0627\u0631\u0633\u062A\u0627\u0646"
}
/**
 * A constant object. Keys are Mobile operator names and values are arrays those keep mobile codes.
 */
export declare const MobileCodes: {
    irancell: string[];
    mci: string[];
    talia: string[];
    rightel: string[];
    spadan: string[];
    tkc: string[];
    shatel: string[];
    aptel: string[];
    azartel: string[];
    samantel: string[];
    lotustel: string[];
    anarestan: string[];
};
/**
 * This service using for validating phone numbers sold by Iranian Mobile operators.
 *
 * You can get operator name and validation result of a phone number by methods of this service.
 */
export declare class MobilePhoneNumberService {
    /**
     * This method only checks if phoneNumber follows valid pattern. means starting by +98 or 0, then a 9 digit and then 9 digits.
     * This method will not check validity of the phoneNumber code and can accept invalid strings those only locking like phone numbers and
     * in reality are not a valid phone number.
     * @link isValidPhoneNumber
     * @param phoneNumber Digits in this string should be english digits.
     */
    isPhoneNumberPatternValid(phoneNumber: string): boolean;
    /**
     * Removes +98 from the phoneNumber and replaces it with a 0 character.
     * @param phoneNumber Digits in this string should be english digits.
     */
    normalizePhoneNumber(phoneNumber: string): string;
    /**
     * Checks all codes of all operators in MobileCodes object. IF finds a matched code, returns persian or english name of that operator from
     * operatorsNames enum.
     * @return operator name in english or persian according to the nameInEnglish parameter
     * @throws InvalidMobileOperatorError if pattern is correct but operator code is not valid.
     * @throws InvalidMobilePhoneNumberError If pattern is not correct
     * @param phoneNumber Digits in this string should be english digits.
     * @param nameInEnglish if true, operator name will return in English. if false operator name will return in persian
     * @link MobileCodes
     * @link operatorsNames
     */
    getPhoneNumberOperator(phoneNumber: string, nameInEnglish?: boolean): string;
    /**
     * @return If phoneNumber follows correct pattern and has valid operator, return true. Otherwise returns false.
     * @param phoneNumber Digits in this string should be english digits.
     * @link getPhoneNumberOperator
     */
    isValidPhoneNumber(phoneNumber: string): boolean;
}
