/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Pipe } from '@angular/core';
import { PersianNumberService } from '../Services/persian-number.service';
/**
 * Replaces all arabic and english numbers with persian numbers.
 * \@example {{englishTextDigit | faNum}}
 */
var FaNumPipe = /** @class */ (function () {
    function FaNumPipe(persianNumberService) {
        this.persianNumberService = persianNumberService;
    }
    /**
     *
     * @param value a number or string (probably empty).
     * @return a string that all english and arabic numbers in the input has been replaced with persian digits.
     */
    /**
     *
     * @param {?} value a number or string (probably empty).
     * @return {?} a string that all english and arabic numbers in the input has been replaced with persian digits.
     */
    FaNumPipe.prototype.transform = /**
     *
     * @param {?} value a number or string (probably empty).
     * @return {?} a string that all english and arabic numbers in the input has been replaced with persian digits.
     */
    function (value) {
        value = String(value);
        return this.persianNumberService.toPersian(value);
    };
    FaNumPipe.decorators = [
        { type: Pipe, args: [{ name: 'faNum' },] }
    ];
    /** @nocollapse */
    FaNumPipe.ctorParameters = function () { return [
        { type: PersianNumberService }
    ]; };
    return FaNumPipe;
}());
export { FaNumPipe };
if (false) {
    /**
     * @type {?}
     * @private
     */
    FaNumPipe.prototype.persianNumberService;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZmFOdW0ucGlwZS5qcyIsInNvdXJjZVJvb3QiOiJuZzovL25neC1wZXJzaWFuLyIsInNvdXJjZXMiOlsibGliL1BpcGVzL2ZhTnVtLnBpcGUudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7OztBQUFBLE9BQU8sRUFBRSxJQUFJLEVBQWdCLE1BQU0sZUFBZSxDQUFDO0FBQ25ELE9BQU8sRUFBQyxvQkFBb0IsRUFBQyxNQUFNLG9DQUFvQyxDQUFDOzs7OztBQU14RTtJQUdFLG1CQUFvQixvQkFBMEM7UUFBMUMseUJBQW9CLEdBQXBCLG9CQUFvQixDQUFzQjtJQUFHLENBQUM7SUFFbEU7Ozs7T0FJRzs7Ozs7O0lBQ0gsNkJBQVM7Ozs7O0lBQVQsVUFBVSxLQUFzQjtRQUM5QixLQUFLLEdBQUcsTUFBTSxDQUFDLEtBQUssQ0FBQyxDQUFDO1FBQ3RCLE9BQU8sSUFBSSxDQUFDLG9CQUFvQixDQUFDLFNBQVMsQ0FBQyxLQUFLLENBQUMsQ0FBQztJQUNwRCxDQUFDOztnQkFiRixJQUFJLFNBQUMsRUFBQyxJQUFJLEVBQUUsT0FBTyxFQUFDOzs7O2dCQU5iLG9CQUFvQjs7SUFvQjVCLGdCQUFDO0NBQUEsQUFkRCxJQWNDO1NBYlksU0FBUzs7Ozs7O0lBRVIseUNBQWtEIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgUGlwZSwgUGlwZVRyYW5zZm9ybX0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQge1BlcnNpYW5OdW1iZXJTZXJ2aWNlfSBmcm9tICcuLi9TZXJ2aWNlcy9wZXJzaWFuLW51bWJlci5zZXJ2aWNlJztcblxuLyoqXG4gKiBSZXBsYWNlcyBhbGwgYXJhYmljIGFuZCBlbmdsaXNoIG51bWJlcnMgd2l0aCBwZXJzaWFuIG51bWJlcnMuXG4gKiBAZXhhbXBsZSB7e2VuZ2xpc2hUZXh0RGlnaXQgfCBmYU51bX19XG4gKi9cbkBQaXBlKHtuYW1lOiAnZmFOdW0nfSlcbmV4cG9ydCBjbGFzcyBGYU51bVBpcGUgaW1wbGVtZW50cyBQaXBlVHJhbnNmb3JtIHtcblxuICBjb25zdHJ1Y3Rvcihwcml2YXRlIHBlcnNpYW5OdW1iZXJTZXJ2aWNlOiBQZXJzaWFuTnVtYmVyU2VydmljZSkge31cblxuICAvKipcbiAgICpcbiAgICogQHBhcmFtIHZhbHVlIGEgbnVtYmVyIG9yIHN0cmluZyAocHJvYmFibHkgZW1wdHkpLlxuICAgKiBAcmV0dXJuIGEgc3RyaW5nIHRoYXQgYWxsIGVuZ2xpc2ggYW5kIGFyYWJpYyBudW1iZXJzIGluIHRoZSBpbnB1dCBoYXMgYmVlbiByZXBsYWNlZCB3aXRoIHBlcnNpYW4gZGlnaXRzLlxuICAgKi9cbiAgdHJhbnNmb3JtKHZhbHVlOiBzdHJpbmcgfCBudW1iZXIpOiBzdHJpbmcge1xuICAgIHZhbHVlID0gU3RyaW5nKHZhbHVlKTtcbiAgICByZXR1cm4gdGhpcy5wZXJzaWFuTnVtYmVyU2VydmljZS50b1BlcnNpYW4odmFsdWUpO1xuICB9XG59XG5cbiJdfQ==