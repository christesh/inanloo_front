/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import * as tslib_1 from "tslib";
/**
 * This error will throw when input value of the service method is not a valid value.
 */
var /**
 * This error will throw when input value of the service method is not a valid value.
 */
InvalidServiceInputError = /** @class */ (function (_super) {
    tslib_1.__extends(InvalidServiceInputError, _super);
    function InvalidServiceInputError() {
        var params = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            params[_i] = arguments[_i];
        }
        var _this = _super.apply(this, tslib_1.__spread(params)) || this;
        // Maintains proper stack trace for where our error was thrown (only available on V8)
        // @ts-ignore
        if (Error.captureStackTrace) {
            // @ts-ignore
            Error.captureStackTrace(_this, InvalidServiceInputError);
        }
        _this.message = 'Invalid value has been passed to the service.';
        return _this;
    }
    return InvalidServiceInputError;
}(Error));
/**
 * This error will throw when input value of the service method is not a valid value.
 */
export { InvalidServiceInputError };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiSW52YWxpZFNlcnZpY2VJbnB1dC5lcnJvci5qcyIsInNvdXJjZVJvb3QiOiJuZzovL25neC1wZXJzaWFuLyIsInNvdXJjZXMiOlsibGliL1NlcnZpY2VzL0ludmFsaWRTZXJ2aWNlSW5wdXQuZXJyb3IudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7QUFHQTs7OztJQUE4QyxvREFBSztJQUNqRDtRQUFZLGdCQUFTO2FBQVQsVUFBUyxFQUFULHFCQUFTLEVBQVQsSUFBUztZQUFULDJCQUFTOztRQUFyQixnREFDVyxNQUFNLFdBVWhCO1FBUkMscUZBQXFGO1FBQ3JGLGFBQWE7UUFDYixJQUFJLEtBQUssQ0FBQyxpQkFBaUIsRUFBRTtZQUMzQixhQUFhO1lBQ2IsS0FBSyxDQUFDLGlCQUFpQixDQUFDLEtBQUksRUFBRSx3QkFBd0IsQ0FBQyxDQUFDO1NBQ3pEO1FBRUQsS0FBSSxDQUFDLE9BQU8sR0FBRywrQ0FBK0MsQ0FBQzs7SUFDakUsQ0FBQztJQUNILCtCQUFDO0FBQUQsQ0FBQyxBQWJELENBQThDLEtBQUssR0FhbEQiLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIFRoaXMgZXJyb3Igd2lsbCB0aHJvdyB3aGVuIGlucHV0IHZhbHVlIG9mIHRoZSBzZXJ2aWNlIG1ldGhvZCBpcyBub3QgYSB2YWxpZCB2YWx1ZS5cbiAqL1xuZXhwb3J0IGNsYXNzIEludmFsaWRTZXJ2aWNlSW5wdXRFcnJvciBleHRlbmRzIEVycm9yIHtcbiAgY29uc3RydWN0b3IoLi4ucGFyYW1zKSB7XG4gICAgc3VwZXIoLi4ucGFyYW1zKTtcblxuICAgIC8vIE1haW50YWlucyBwcm9wZXIgc3RhY2sgdHJhY2UgZm9yIHdoZXJlIG91ciBlcnJvciB3YXMgdGhyb3duIChvbmx5IGF2YWlsYWJsZSBvbiBWOClcbiAgICAvLyBAdHMtaWdub3JlXG4gICAgaWYgKEVycm9yLmNhcHR1cmVTdGFja1RyYWNlKSB7XG4gICAgICAvLyBAdHMtaWdub3JlXG4gICAgICBFcnJvci5jYXB0dXJlU3RhY2tUcmFjZSh0aGlzLCBJbnZhbGlkU2VydmljZUlucHV0RXJyb3IpO1xuICAgIH1cblxuICAgIHRoaXMubWVzc2FnZSA9ICdJbnZhbGlkIHZhbHVlIGhhcyBiZWVuIHBhc3NlZCB0byB0aGUgc2VydmljZS4nO1xuICB9XG59XG4iXX0=