/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Injectable } from '@angular/core';
import { InvalidServiceInputError } from './InvalidServiceInput.error';
import * as i0 from "@angular/core";
var PersianNumberService = /** @class */ (function () {
    function PersianNumberService() {
    }
    /**
     * Checks if input value contains any persian number or not.
     * @param value
     * @return true if input value contains any persian number. false otherwise.
     */
    /**
     * Checks if input value contains any persian number or not.
     * @param {?} value
     * @return {?} true if input value contains any persian number. false otherwise.
     */
    PersianNumberService.prototype.containsPersian = /**
     * Checks if input value contains any persian number or not.
     * @param {?} value
     * @return {?} true if input value contains any persian number. false otherwise.
     */
    function (value) {
        if (!value) {
            return false;
        }
        // language=JSRegexp
        /** @type {?} */
        var persianRegex = new RegExp("[" + PersianNumberService.persianNumberPattern + "]");
        return persianRegex.test(value);
    };
    /**
     * splits input value by persian letters and then returns length of matched array.
     * @param value
     * @return 0 if input value has no persian letter, numbers of persian letters in the input value otherwise.
     */
    /**
     * splits input value by persian letters and then returns length of matched array.
     * @private
     * @param {?} value
     * @return {?} 0 if input value has no persian letter, numbers of persian letters in the input value otherwise.
     */
    PersianNumberService._getMatchedPatternLength = /**
     * splits input value by persian letters and then returns length of matched array.
     * @private
     * @param {?} value
     * @return {?} 0 if input value has no persian letter, numbers of persian letters in the input value otherwise.
     */
    function (value) {
        // language=JSRegexp
        /** @type {?} */
        var matchResult = value.match(new RegExp("[" + PersianNumberService.persianNumberPattern + "]", 'g'));
        return matchResult ? matchResult.length : 0;
    };
    /**
     * Checks if input value contains only persian letters.
     * @param value
     */
    /**
     * Checks if input value contains only persian letters.
     * @param {?} value
     * @return {?}
     */
    PersianNumberService.prototype.isPersian = /**
     * Checks if input value contains only persian letters.
     * @param {?} value
     * @return {?}
     */
    function (value) {
        if (!value) {
            return false;
        }
        return value.length === PersianNumberService._getMatchedPatternLength(value);
    };
    /**
     * Converts arabic numbers to the persian ones.
     * @param value
     */
    /**
     * Converts arabic numbers to the persian ones.
     * @param {?} value
     * @return {?}
     */
    PersianNumberService.prototype.arabicToPersian = /**
     * Converts arabic numbers to the persian ones.
     * @param {?} value
     * @return {?}
     */
    function (value) {
        return value.replace(/٤/g, PersianNumberService.persianNumbersTable[4])
            .replace(/٥/g, PersianNumberService.persianNumbersTable[5])
            .replace(/٦/g, PersianNumberService.persianNumbersTable[6]);
    };
    /**
     * Converts all arabic and english numbers to the persian numbers.
     * @param value
     */
    /**
     * Converts all arabic and english numbers to the persian numbers.
     * @param {?} value
     * @return {?}
     */
    PersianNumberService.prototype.toPersian = /**
     * Converts all arabic and english numbers to the persian numbers.
     * @param {?} value
     * @return {?}
     */
    function (value) {
        if (value === undefined || value === null) {
            throw new InvalidServiceInputError();
        }
        value = value.toString();
        value = this.arabicToPersian(value);
        /** @type {?} */
        var regex;
        for (var i = 0; i < PersianNumberService.persianNumbersTable.length; i++) {
            // language=JSRegexp
            regex = new RegExp("[" + PersianNumberService.englishNumbersTable[i] + "]", 'g');
            value = value.replace(regex, PersianNumberService.persianNumbersTable[i]);
        }
        return value;
    };
    /**
     * Convert persian numbers in input value to the english numbers.
     * @param value
     */
    /**
     * Convert persian numbers in input value to the english numbers.
     * @param {?} value
     * @return {?}
     */
    PersianNumberService.prototype.toEnglish = /**
     * Convert persian numbers in input value to the english numbers.
     * @param {?} value
     * @return {?}
     */
    function (value) {
        if (value === undefined || value === null) {
            throw new InvalidServiceInputError();
        }
        /** @type {?} */
        var regex;
        for (var i = 0; i < PersianNumberService.englishNumbersTable.length; i++) {
            // language=JSRegexp
            regex = new RegExp("[" + PersianNumberService.persianNumbersTable[i] + "]", 'g');
            value = value.replace(regex, PersianNumberService.englishNumbersTable[i]);
        }
        return value;
    };
    PersianNumberService.persianNumberPattern = '\u06F0-\u06F9';
    PersianNumberService.persianNumbersTable = ['\u06F0', '\u06F1', '\u06F2', '\u06F3', '\u06F4', '\u06F5', '\u06F6', '\u06F7', '\u06F8', '\u06F9'];
    PersianNumberService.englishNumbersTable = ['0', '1', '2', '3', '4', '5', '6', '7', '8', '9'];
    PersianNumberService.decorators = [
        { type: Injectable, args: [{
                    providedIn: 'root'
                },] }
    ];
    /** @nocollapse */ PersianNumberService.ngInjectableDef = i0.ɵɵdefineInjectable({ factory: function PersianNumberService_Factory() { return new PersianNumberService(); }, token: PersianNumberService, providedIn: "root" });
    return PersianNumberService;
}());
export { PersianNumberService };
if (false) {
    /** @type {?} */
    PersianNumberService.persianNumberPattern;
    /**
     * @type {?}
     * @private
     */
    PersianNumberService.persianNumbersTable;
    /**
     * @type {?}
     * @private
     */
    PersianNumberService.englishNumbersTable;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicGVyc2lhbi1udW1iZXIuc2VydmljZS5qcyIsInNvdXJjZVJvb3QiOiJuZzovL25neC1wZXJzaWFuLyIsInNvdXJjZXMiOlsibGliL1NlcnZpY2VzL3BlcnNpYW4tbnVtYmVyLnNlcnZpY2UudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7OztBQUFBLE9BQU8sRUFBRSxVQUFVLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFFM0MsT0FBTyxFQUFDLHdCQUF3QixFQUFDLE1BQU0sNkJBQTZCLENBQUM7O0FBRXJFO0lBQUE7S0FpRkM7SUF6RUM7Ozs7T0FJRzs7Ozs7O0lBQ0gsOENBQWU7Ozs7O0lBQWYsVUFBZ0IsS0FBYTtRQUMzQixJQUFJLENBQUMsS0FBSyxFQUFFO1lBQUUsT0FBTyxLQUFLLENBQUM7U0FBRTs7O1lBRXZCLFlBQVksR0FBRyxJQUFJLE1BQU0sQ0FBQyxNQUFJLG9CQUFvQixDQUFDLG9CQUFvQixNQUFHLENBQUM7UUFDakYsT0FBTyxZQUFZLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUFDO0lBQ2xDLENBQUM7SUFFRDs7OztPQUlHOzs7Ozs7O0lBQ1ksNkNBQXdCOzs7Ozs7SUFBdkMsVUFBd0MsS0FBYTs7O1lBRTdDLFdBQVcsR0FBRyxLQUFLLENBQUMsS0FBSyxDQUFDLElBQUksTUFBTSxDQUFDLE1BQUksb0JBQW9CLENBQUMsb0JBQW9CLE1BQUcsRUFBRSxHQUFHLENBQUMsQ0FBQztRQUNsRyxPQUFPLFdBQVcsQ0FBQyxDQUFDLENBQUMsV0FBVyxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO0lBQzlDLENBQUM7SUFFRDs7O09BR0c7Ozs7OztJQUNILHdDQUFTOzs7OztJQUFULFVBQVUsS0FBYTtRQUNyQixJQUFJLENBQUMsS0FBSyxFQUFFO1lBQUMsT0FBTyxLQUFLLENBQUM7U0FBRTtRQUM1QixPQUFPLEtBQUssQ0FBQyxNQUFNLEtBQUssb0JBQW9CLENBQUMsd0JBQXdCLENBQUMsS0FBSyxDQUFDLENBQUM7SUFDL0Us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b3JlJztcbmltcG9ydCB7UGVyc2lhblNlcnZpY2V9IGZyb20gJy4vcGVyc2lhbi1zZXJ2aWNlJztcbmltcG9ydCB7SW52YWxpZFNlcnZpY2VJbnB1dEVycm9yfSBmcm9tICcuL0ludmFsaWRTZXJ2aWNlSW5wdXQuZXJyb3InO1xuXG5ASW5qZWN0YWJsZSh7XG4gIHByb3ZpZGVkSW46ICdyb290J1xufSlcbmV4cG9ydCBjbGFzcyBQZXJzaWFuTnVtYmVyU2VydmljZSBpbXBsZW1lbnRzIFBlcnNpYW5TZXJ2aWNlIHtcbiAgc3RhdGljIHBlcnNpYW5OdW1iZXJQYXR0ZXJuID0gJ1xcdTA2RjAtXFx1MDZGOSc7XG4gIHByaXZhdGUgc3RhdGljIHBlcnNpYW5OdW1iZXJzVGFibGUgPSBbJ1xcdTA2RjAnLCAnXFx1MDZGMScsICdcXHUwNkYyJywgJ1xcdTA2RjMnLCAnXFx1MDZGNCcsICdcXHUwNkY1JywgJ1xcdTA2RjYnLCAnXFx1MDZGNycsICdcXHUwNkY4JywgJ1xcdTA2RjknXTtcbiAgcHJpdmF0ZSBzdGF0aWMgZW5nbGlzaE51bWJlcnNUYWJsZSA9IFsnMCcsICcxJywgJzInLCAnMycsICc0JywgJzUnLCAnNicsICc3JywgJzgnLCAnOSddO1xuXG4gIC8qKlxuICAgKiBDaGVja3MgaWYgaW5wdXQgdmFsdWUgY29udGFpbnMgYW55IHBlcnNpYW4gbnVtYmVyIG9yIG5vdC5cbiAgICogQHBhcmFtIHZhbHVlXG4gICAqIEByZXR1cm4gdHJ1ZSBpZiBpbnB1dCB2YWx1ZSBjb250YWlucyBhbnkgcGVyc2lhbiBudW1iZXIuIGZhbHNlIG90aGVyd2lzZS5cbiAgICovXG4gIGNvbnRhaW5zUGVyc2lhbih2YWx1ZTogc3RyaW5nKTogYm9vbGVhbiB7XG4gICAgaWYgKCF2YWx1ZSkgeyByZXR1cm4gZmFsc2U7IH1cbiAgICAvLyBsYW5ndWFnZT1KU1JlZ2V4cFxuICAgIGNvbnN0IHBlcnNpYW5SZWdleCA9IG5ldyBSZWdFeHAoYFske1BlcnNpYW5OdW1iZXJTZXJ2aWNlLnBlcnNpYW5OdW1iZXJQYXR0ZXJufV1gKTtcbiAgICByZXR1cm4gcGVyc2lhblJlZ2V4LnRlc3QodmFsdWUpO1xuICB9XG5cbiAgLyoqXG4gICAqIHNwbGl0cyBpbnB1dCB2YWx1ZSBieSBwZXJzaWFuIGxldHRlcnMgYW5kIHRoZW4gcmV0dXJucyBsZW5ndGggb2YgbWF0Y2hlZCBhcnJheS5cbiAgICogQHBhcmFtIHZhbHVlXG4gICAqIEByZXR1cm4gMCBpZiBpbnB1dCB2YWx1ZSBoYXMgbm8gcGVyc2lhbiBsZXR0ZXIsIG51bWJlcnMgb2YgcGVyc2lhbiBsZXR0ZXJzIGluIHRoZSBpbnB1dCB2YWx1ZSBvdGhlcndpc2UuXG4gICAqL1xuICBwcml2YXRlIHN0YXRpYyBfZ2V0TWF0Y2hlZFBhdHRlcm5MZW5ndGgodmFsdWU6IHN0cmluZyk6IG51bWJlciB7XG4gICAgLy8gbGFuZ3VhZ2U9SlNSZWdleHBcbiAgICBjb25zdCBtYXRjaFJlc3VsdCA9IHZhbHVlLm1hdGNoKG5ldyBSZWdFeHAoYFske1BlcnNpYW5OdW1iZXJTZXJ2aWNlLnBlcnNpYW5OdW1iZXJQYXR0ZXJufV1gLCAnZycpKTtcbiAgICByZXR1cm4gbWF0Y2hSZXN1bHQgPyBtYXRjaFJlc3VsdC5sZW5ndGggOiAwO1xuICB9XG5cbiAgLyoqXG4gICAqIENoZWNrcyBpZiBpbnB1dCB2YWx1ZSBjb250YWlucyBvbmx5IHBlcnNpYW4gbGV0dGVycy5cbiAgICogQHBhcmFtIHZhbHVlXG4gICAqL1xuICBpc1BlcnNpYW4odmFsdWU6IHN0cmluZyk6IGJvb2xlYW4ge1xuICAgIGlmICghdmFsdWUpIHtyZXR1cm4gZmFsc2U7IH1cbiAgICByZXR1cm4gdmFsdWUubGVuZ3RoID09PSBQZXJzaWFuTnVtYmVyU2VydmljZS5fZ2V0TWF0Y2hlZFBhdHRlcm5MZW5ndGgodmFsdWUpO1xuICB9XG5cbiAgLyoqXG4gICAqIENvbnZlcnRzIGFyYWJpYyBudW1iZXJzIHRvIHRoZSBwZXJzaWFuIG9uZXMuXG4gICAqIEBwYXJhbSB2YWx1ZVxuICAgKi9cbiAgYXJhYmljVG9QZXJzaWFuKHZhbHVlOiBzdHJpbmcpOiBzdHJpbmcge1xuICAgIHJldHVybiB2YWx1ZS5yZXBsYWNlKC/ZpC9nLCBQZXJzaWFuTnVtYmVyU2VydmljZS5wZXJzaWFuTnVtYmVyc1RhYmxlWzRdKVxuICAgICAgICAgICAgICAgIC5yZXBsYWNlKC/ZpS9nLCBQZXJzaWFuTnVtYmVyU2VydmljZS5wZXJzaWFuTnVtYmVyc1RhYmxlWzVdKVxuICAgICAgICAgICAgICAgIC5yZXBsYWNlKC/Zpi9nLCBQZXJzaWFuTnVtYmVyU2VydmljZS5wZXJzaWFuTnVtYmVyc1RhYmxlWzZdKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBDb252ZXJ0cyBhbGwgYXJhYmljIGFuZCBlbmdsaXNoIG51bWJlcnMgdG8gdGhlIHBlcnNpYW4gbnVtYmVycy5cbiAgICogQHBhcmFtIHZhbHVlXG4gICAqL1xuICB0b1BlcnNpYW4odmFsdWU6IHN0cmluZyB8IG51bWJlcik6IHN0cmluZyB7XG4gICAgaWYgKHZhbHVlID09PSB1bmRlZmluZWQgfHwgdmFsdWUgPT09IG51bGwpIHt0aHJvdyBuZXcgSW52YWxpZFNlcnZpY2VJbnB1dEVycm9yKCk7IH1cbiAgICB2YWx1ZSA9IHZhbHVlLnRvU3RyaW5nKCk7XG4gICAgdmFsdWUgPSB0aGlzLmFyYWJpY1RvUGVyc2lhbih2YWx1ZSk7XG4gICAgbGV0IHJlZ2V4OiBSZWdFeHA7XG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBQZXJzaWFuTnVtYmVyU2VydmljZS5wZXJzaWFuTnVtYmVyc1RhYmxlLmxlbmd0aDsgaSsrKSB7XG4gICAgICAvLyBsYW5ndWFnZT1KU1JlZ2V4cFxuICAgICAgcmVnZXggPSBuZXcgUmVnRXhwKGBbJHtQZXJzaWFuTnVtYmVyU2VydmljZS5lbmdsaXNoTnVtYmVyc1RhYmxlW2ldfV1gLCAnZycpO1xuICAgICAgdmFsdWUgPSB2YWx1ZS5yZXBsYWNlKHJlZ2V4LCBQZXJzaWFuTnVtYmVyU2VydmljZS5wZXJzaWFuTnVtYmVyc1RhYmxlW2ldKTtcbiAgICB9XG4gICAgcmV0dXJuIHZhbHVlO1xuICB9XG5cbiAgLyoqXG4gICAqIENvbnZlcnQgcGVyc2lhbiBudW1iZXJzIGluIGlucHV0IHZhbHVlIHRvIHRoZSBlbmdsaXNoIG51bWJlcnMuXG4gICAqIEBwYXJhbSB2YWx1ZVxuICAgKi9cbiAgdG9FbmdsaXNoKHZhbHVlOiBzdHJpbmcpOiBzdHJpbmcge1xuICAgIGlmICh2YWx1ZSA9PT0gdW5kZWZpbmVkIHx8IHZhbHVlID09PSBudWxsKSB7IHRocm93IG5ldyBJbnZhbGlkU2VydmljZUlucHV0RXJyb3IoKTsgfVxuICAgIGxldCByZWdleDogUmVnRXhwO1xuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgUGVyc2lhbk51bWJlclNlcnZpY2UuZW5nbGlzaE51bWJlcnNUYWJsZS5sZW5ndGg7IGkrKykge1xuICAgICAgLy8gbGFuZ3VhZ2U9SlNSZWdleHBcbiAgICAgIHJlZ2V4ID0gbmV3IFJlZ0V4cChgWyR7UGVyc2lhbk51bWJlclNlcnZpY2UucGVyc2lhbk51bWJlcnNUYWJsZVtpXX1dYCwgJ2cnKTtcbiAgICAgIHZhbHVlID0gdmFsdWUucmVwbGFjZShyZWdleCwgUGVyc2lhbk51bWJlclNlcnZpY2UuZW5nbGlzaE51bWJlcnNUYWJsZVtpXSk7XG4gICAgfVxuICAgIHJldHVybiB2YWx1ZTtcbiAgfVxufVxuIl19