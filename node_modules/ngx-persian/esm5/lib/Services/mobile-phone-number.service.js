/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import * as tslib_1 from "tslib";
import { Injectable } from '@angular/core';
import { InvalidMobilePhoneNumberError } from './InvalidMobilePhoneNumber.error';
import { InvalidMobileOperatorError } from './InvalidMobileOperator.error';
import * as i0 from "@angular/core";
/** @enum {string} */
var operatorsNames = {
    irancell: 'ایرانسل',
    mci: 'همراه اول',
    talia: 'تالیا',
    rightel: 'رایتل',
    spadan: 'اسپادان',
    tkc: 'شبکه مستقل تلفن همراه کیش',
    shatel: 'شاتل',
    aptel: 'آپتل',
    azartel: 'آذرتل',
    samantel: 'سامانتل',
    lotustel: 'لوتوس‌تل',
    anarestan: 'انارستان',
};
export { operatorsNames };
/**
 * A constant object. Keys are Mobile operator names and values are arrays those keep mobile codes.
 * @type {?}
 */
export var MobileCodes = {
    irancell: ['0901', '0902', '0903', '0904', '0905', '0930', '0933', '0935', '0936', '0937', '0938', '0939', '0941'],
    mci: ['0910', '0911', '0912', '0913', '0914', '0915', '0916', '0917', '0918', '0919', '0990', '0991', '0992'],
    talia: ['0932'],
    rightel: ['0920', '0921', '0922'],
    spadan: ['0931'],
    tkc: ['0934'],
    shatel: ['099810', '099811', '099812'],
    aptel: ['099910', '099911', '099913'],
    azartel: ['099914'],
    samantel: ['099996', '099997', '099998', '099999'],
    lotustel: ['09990'],
    anarestan: ['09944']
};
/**
 * This service using for validating phone numbers sold by Iranian Mobile operators.
 *
 * You can get operator name and validation result of a phone number by methods of this service.
 */
var MobilePhoneNumberService = /** @class */ (function () {
    function MobilePhoneNumberService() {
    }
    /**
     * This method only checks if phoneNumber follows valid pattern. means starting by +98 or 0, then a 9 digit and then 9 digits.
     * This method will not check validity of the phoneNumber code and can accept invalid strings those only locking like phone numbers and
     * in reality are not a valid phone number.
     * @link isValidPhoneNumber
     * @param phoneNumber Digits in this string should be english digits.
     */
    /**
     * This method only checks if phoneNumber follows valid pattern. means starting by +98 or 0, then a 9 digit and then 9 digits.
     * This method will not check validity of the phoneNumber code and can accept invalid strings those only locking like phone numbers and
     * in reality are not a valid phone number.
     * @link isValidPhoneNumber
     * @param {?} phoneNumber Digits in this string should be english digits.
     * @return {?}
     */
    MobilePhoneNumberService.prototype.isPhoneNumberPatternValid = /**
     * This method only checks if phoneNumber follows valid pattern. means starting by +98 or 0, then a 9 digit and then 9 digits.
     * This method will not check validity of the phoneNumber code and can accept invalid strings those only locking like phone numbers and
     * in reality are not a valid phone number.
     * @link isValidPhoneNumber
     * @param {?} phoneNumber Digits in this string should be english digits.
     * @return {?}
     */
    function (phoneNumber) {
        /** @type {?} */
        var generalRegex = new RegExp(/^((\+98|0)9\d{9})$/);
        return generalRegex.test(phoneNumber);
    };
    /**
     * Removes +98 from the phoneNumber and replaces it with a 0 character.
     * @param phoneNumber Digits in this string should be english digits.
     */
    /**
     * Removes +98 from the phoneNumber and replaces it with a 0 character.
     * @param {?} phoneNumber Digits in this string should be english digits.
     * @return {?}
     */
    MobilePhoneNumberService.prototype.normalizePhoneNumber = /**
     * Removes +98 from the phoneNumber and replaces it with a 0 character.
     * @param {?} phoneNumber Digits in this string should be english digits.
     * @return {?}
     */
    function (phoneNumber) {
        return phoneNumber.replace('+98', '0');
    };
    /**
     * Checks all codes of all operators in MobileCodes object. IF finds a matched code, returns persian or english name of that operator from
     * operatorsNames enum.
     * @return operator name in english or persian according to the nameInEnglish parameter
     * @throws InvalidMobileOperatorError if pattern is correct but operator code is not valid.
     * @throws InvalidMobilePhoneNumberError If pattern is not correct
     * @param phoneNumber Digits in this string should be english digits.
     * @param nameInEnglish if true, operator name will return in English. if false operator name will return in persian
     * @link MobileCodes
     * @link operatorsNames
     */
    /**
     * Checks all codes of all operators in MobileCodes object. IF finds a matched code, returns persian or english name of that operator from
     * operatorsNames enum.
     * @throws InvalidMobileOperatorError if pattern is correct but operator code is not valid. / InvalidMobilePhoneNumberError If pattern is not correct
     * @link MobileCodes / operatorsNames
     * @param {?} phoneNumber Digits in this string should be english digits.
     * @param {?=} nameInEnglish if true, operator name will return in English. if false operator name will return in persian
     * @return {?} operator name in english or persian according to the nameInEnglish parameter
     */
    MobilePhoneNumberService.prototype.getPhoneNumberOperator = /**
     * Checks all codes of all operators in MobileCodes object. IF finds a matched code, returns persian or english name of that operator from
     * operatorsNames enum.
     * @throws InvalidMobileOperatorError if pattern is correct but operator code is not valid. / InvalidMobilePhoneNumberError If pattern is not correct
     * @link MobileCodes / operatorsNames
     * @param {?} phoneNumber Digits in this string should be english digits.
     * @param {?=} nameInEnglish if true, operator name will return in English. if false operator name will return in persian
     * @return {?} operator name in english or persian according to the nameInEnglish parameter
     */
    function (phoneNumber, nameInEnglish) {
        var e_1, _a, e_2, _b;
        if (nameInEnglish === void 0) { nameInEnglish = false; }
        if (!this.isPhoneNumberPatternValid(phoneNumber)) {
            throw new InvalidMobilePhoneNumberError();
        }
        phoneNumber = this.normalizePhoneNumber(phoneNumber);
        try {
            for (var _c = tslib_1.__values(Object.keys(MobileCodes)), _d = _c.next(); !_d.done; _d = _c.next()) {
                var operator = _d.value;
                try {
                    for (var _e = tslib_1.__values(MobileCodes[operator]), _f = _e.next(); !_f.done; _f = _e.next()) {
                        var code = _f.value;
                        if (phoneNumber.indexOf(code) === 0) {
                            return nameInEnglish ? operator : operatorsNames[operator];
                        }
                    }
                }
                catch (e_2_1) { e_2 = { error: e_2_1 }; }
                finally {
                    try {
                        if (_f && !_f.done && (_b = _e.return)) _b.call(_e);
                    }
                    finally { if (e_2) throw e_2.error; }
                }
            }
        }
        catch (e_1_1) { e_1 = { error: e_1_1 }; }
        finally {
            try {
                if (_d && !_d.done && (_a = _c.return)) _a.call(_c);
            }
            finally { if (e_1) throw e_1.error; }
        }
        throw new InvalidMobileOperatorError();
    };
    /**
     * @return If phoneNumber follows correct pattern and has valid operator, return true. Otherwise returns false.
     * @param phoneNumber Digits in this string should be english digits.
     * @link getPhoneNumberOperator
     */
    /**
     * @link getPhoneNumberOperator
     * @param {?} phoneNumber Digits in this string should be english digits.
     * @return {?} If phoneNumber follows correct pattern and has valid operator, return true. Otherwise returns false.
     */
    MobilePhoneNumberService.prototype.isValidPhoneNumber = /**
     * @link getPhoneNumberOperator
     * @param {?} phoneNumber Digits in this string should be english digits.
     * @return {?} If phoneNumber follows correct pattern and has valid operator, return true. Otherwise returns false.
     */
    function (phoneNumber) {
        try {
            this.getPhoneNumberOperator(phoneNumber);
            return true;
        }
        catch (e) {
            return false;
        }
    };
    MobilePhoneNumberService.decorators = [
        { type: Injectable, args: [{
                    providedIn: 'root'
                },] }
    ];
    /** @nocollapse */ MobilePhoneNumberService.ngInjectableDef = i0.ɵɵdefineInjectable({ factory: function MobilePhoneNumberService_Factory() { return new MobilePhoneNumberService(); }, token: MobilePhoneNumberService, providedIn: "root" });
    return MobilePhoneNumberService;
}());
export { MobilePhoneNumberService };
//# sourceMappingURL=data:application/json;base64,