/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Directive, Input } from '@angular/core';
import { NG_VALIDATORS } from '@angular/forms';
import { persianLettersValidator, persianNumbersValidator } from './persian-validators';
/**
 * You can add PersianNumbersDirective property to your input tag for using persianNumbersValidator function on its value.
 *
 * [For more information also see persianNumbersValidator]{\@link persianNumbersValidator}
 */
var PersianNumbersDirective = /** @class */ (function () {
    function PersianNumbersDirective() {
    }
    /**
     * Only a wrapper for persianNumbersValidator validator function.
     * @param control
     * @return null for success or ValidationError for invalid inputs
     */
    /**
     * Only a wrapper for persianNumbersValidator validator function.
     * @param {?} control
     * @return {?} null for success or ValidationError for invalid inputs
     */
    PersianNumbersDirective.prototype.validate = /**
     * Only a wrapper for persianNumbersValidator validator function.
     * @param {?} control
     * @return {?} null for success or ValidationError for invalid inputs
     */
    function (control) {
        return persianNumbersValidator()(control);
    };
    PersianNumbersDirective.decorators = [
        { type: Directive, args: [{
                    selector: 'PersianNumbersDirective',
                    providers: [{ provide: NG_VALIDATORS, useExisting: PersianNumbersDirective }]
                },] }
    ];
    return PersianNumbersDirective;
}());
export { PersianNumbersDirective };
/**
 * You can add PersianLetterDirective property to your input tag for using persianNumbersValidator function on its value
 * For setting options value, you can simply set PersianLetterDirective property equal to the PLOptions object.
 * [For more information also see persianLettersValidator]{\@link persianLettersValidator}
 */
var PersianLetterDirective = /** @class */ (function () {
    function PersianLetterDirective() {
    }
    /**
     * Only a wrapper for persianLettersValidator validator function.
     * @param control
     * @return null for success or ValidationError for invalid inputs
     */
    /**
     * Only a wrapper for persianLettersValidator validator function.
     * @param {?} control
     * @return {?} null for success or ValidationError for invalid inputs
     */
    PersianLetterDirective.prototype.validate = /**
     * Only a wrapper for persianLettersValidator validator function.
     * @param {?} control
     * @return {?} null for success or ValidationError for invalid inputs
     */
    function (control) {
        return persianLettersValidator(this.options)(control);
    };
    PersianLetterDirective.decorators = [
        { type: Directive, args: [{
                    selector: 'persianLettersValidator',
                    providers: [{ provide: NG_VALIDATORS, useExisting: PersianLetterDirective }]
                },] }
    ];
    PersianLetterDirective.propDecorators = {
        options: [{ type: Input, args: ['PersianLetterDirective',] }]
    };
    return PersianLetterDirective;
}());
export { PersianLetterDirective };
if (false) {
    /** @type {?} */
    PersianLetterDirective.prototype.options;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicGVyc2lhbi1kaXJlY3RpdmVzLmpzIiwic291cmNlUm9vdCI6Im5nOi8vbmd4LXBlcnNpYW4vIiwic291cmNlcyI6WyJsaWIvVmFsaWRhdG9ycy9wZXJzaWFuLWRpcmVjdGl2ZXMudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7OztBQUFBLE9BQU8sRUFBQyxTQUFTLEVBQUUsS0FBSyxFQUFDLE1BQU0sZUFBZSxDQUFDO0FBQy9DLE9BQU8sRUFBa0IsYUFBYSxFQUFZLE1BQU0sZ0JBQWdCLENBQUM7QUFDekUsT0FBTyxFQUFDLHVCQUF1QixFQUFFLHVCQUF1QixFQUFDLE1BQU0sc0JBQXNCLENBQUM7Ozs7OztBQVN0RjtJQUFBO0lBY0EsQ0FBQztJQVJDOzs7O09BSUc7Ozs7OztJQUNILDBDQUFROzs7OztJQUFSLFVBQVMsT0FBd0I7UUFDL0IsT0FBTyx1QkFBdUIsRUFBRSxDQUFDLE9BQU8sQ0FBQyxDQUFDO0lBQzVDLENBQUM7O2dCQWJGLFNBQVMsU0FBQztvQkFDVCxRQUFRLEVBQUUseUJBQXlCO29CQUNuQyxTQUFTLEVBQUUsQ0FBQyxFQUFDLE9BQU8sRUFBRSxhQUFhLEVBQUUsV0FBVyxFQUFFLHVCQUF1QixFQUFDLENBQUM7aUJBQzVFOztJQVdELDhCQUFDO0NBQUEsQUFkRCxJQWNDO1NBVlksdUJBQXVCOzs7Ozs7QUFpQnBDO0lBQUE7SUFnQkEsQ0FBQztJQVJDOzs7O09BSUc7Ozs7OztJQUNILHlDQUFROzs7OztJQUFSLFVBQVMsT0FBd0I7UUFDL0IsT0FBTyx1QkFBdUIsQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLENBQUMsT0FBTyxDQUFDLENBQUM7SUFDeEQsQ0FBQzs7Z0JBZkYsU0FBUyxTQUFDO29CQUNULFFBQVEsRUFBRSx5QkFBeUI7b0JBQ25DLFNBQVMsRUFBRSxDQUFDLEVBQUMsT0FBTyxFQUFFLGFBQWEsRUFBRSxXQUFXLEVBQUUsc0JBQXNCLEVBQUMsQ0FBQztpQkFDM0U7OzswQkFHRSxLQUFLLFNBQUMsd0JBQXdCOztJQVVqQyw2QkFBQztDQUFBLEFBaEJELElBZ0JDO1NBWlksc0JBQXNCOzs7SUFFakMseUNBQW9EIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtEaXJlY3RpdmUsIElucHV0fSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7QWJzdHJhY3RDb250cm9sLCBOR19WQUxJREFUT1JTLCBWYWxpZGF0b3J9IGZyb20gJ0Bhbmd1bGFyL2Zvcm1zJztcbmltcG9ydCB7cGVyc2lhbkxldHRlcnNWYWxpZGF0b3IsIHBlcnNpYW5OdW1iZXJzVmFsaWRhdG9yfSBmcm9tICcuL3BlcnNpYW4tdmFsaWRhdG9ycyc7XG5pbXBvcnQge1BMT3B0aW9uc30gZnJvbSAnLi4vU2VydmljZXMvcGVyc2lhbi1sZXR0ZXIuc2VydmljZSc7XG5cblxuLyoqXG4gKiBZb3UgY2FuIGFkZCBQZXJzaWFuTnVtYmVyc0RpcmVjdGl2ZSBwcm9wZXJ0eSB0byB5b3VyIGlucHV0IHRhZyBmb3IgdXNpbmcgcGVyc2lhbk51bWJlcnNWYWxpZGF0b3IgZnVuY3Rpb24gb24gaXRzIHZhbHVlLlxuICpcbiAqIFtGb3IgbW9yZSBpbmZvcm1hdGlvbiBhbHNvIHNlZSBwZXJzaWFuTnVtYmVyc1ZhbGlkYXRvcl17QGxpbmsgcGVyc2lhbk51bWJlcnNWYWxpZGF0b3J9XG4gKi9cbkBEaXJlY3RpdmUoe1xuICBzZWxlY3RvcjogJ1BlcnNpYW5OdW1iZXJzRGlyZWN0aXZlJyxcbiAgcHJvdmlkZXJzOiBbe3Byb3ZpZGU6IE5HX1ZBTElEQVRPUlMsIHVzZUV4aXN0aW5nOiBQZXJzaWFuTnVtYmVyc0RpcmVjdGl2ZX1dXG59KVxuZXhwb3J0IGNsYXNzIFBlcnNpYW5OdW1iZXJzRGlyZWN0aXZlIGltcGxlbWVudHMgVmFsaWRhdG9yIHtcblxuICAvKipcbiAgICogT25seSBhIHdyYXBwZXIgZm9yIHBlcnNpYW5OdW1iZXJzVmFsaWRhdG9yIHZhbGlkYXRvciBmdW5jdGlvbi5cbiAgICogQHBhcmFtIGNvbnRyb2xcbiAgICogQHJldHVybiBudWxsIGZvciBzdWNjZXNzIG9yIFZhbGlkYXRpb25FcnJvciBmb3IgaW52YWxpZCBpbnB1dHNcbiAgICovXG4gIHZhbGlkYXRlKGNvbnRyb2w6IEFic3RyYWN0Q29udHJvbCk6IHtba2V5OiBzdHJpbmddOiBhbnl9IHwgbnVsbCB7XG4gICAgcmV0dXJuIHBlcnNpYW5OdW1iZXJzVmFsaWRhdG9yKCkoY29udHJvbCk7XG4gIH1cbn1cblxuLyoqXG4gKiBZb3UgY2FuIGFkZCBQZXJzaWFuTGV0dGVyRGlyZWN0aXZlIHByb3BlcnR5IHRvIHlvdXIgaW5wdXQgdGFnIGZvciB1c2luZyBwZXJzaWFuTnVtYmVyc1ZhbGlkYXRvciBmdW5jdGlvbiBvbiBpdHMgdmFsdWVcbiAqIEZvciBzZXR0aW5nIG9wdGlvbnMgdmFsdWUsIHlvdSBjYW4gc2ltcGx5IHNldCBQZXJzaWFuTGV0dGVyRGlyZWN0aXZlIHByb3BlcnR5IGVxdWFsIHRvIHRoZSBQTE9wdGlvbnMgb2JqZWN0LlxuICogW0ZvciBtb3JlIGluZm9ybWF0aW9uIGFsc28gc2VlIHBlcnNpYW5MZXR0ZXJzVmFsaWRhdG9yXXtAbGluayBwZXJzaWFuTGV0dGVyc1ZhbGlkYXRvcn1cbiAqL1xuQERpcmVjdGl2ZSh7XG4gIHNlbGVjdG9yOiAncGVyc2lhbkxldHRlcnNWYWxpZGF0b3InLFxuICBwcm92aWRlcnM6IFt7cHJvdmlkZTogTkdfVkFMSURBVE9SUywgdXNlRXhpc3Rpbmc6IFBlcnNpYW5MZXR0ZXJEaXJlY3RpdmV9XVxufSlcbmV4cG9ydCBjbGFzcyBQZXJzaWFuTGV0dGVyRGlyZWN0aXZlIGltcGxlbWVudHMgVmFsaWRhdG9yIHtcblxuICBASW5wdXQoJ1BlcnNpYW5MZXR0ZXJEaXJlY3RpdmUnKSBvcHRpb25zOiBQTE9wdGlvbnM7XG5cbiAgLyoqXG4gICAqIE9ubHkgYSB3cmFwcGVyIGZvciBwZXJzaWFuTGV0dGVyc1ZhbGlkYXRvciB2YWxpZGF0b3IgZnVuY3Rpb24uXG4gICAqIEBwYXJhbSBjb250cm9sXG4gICAqIEByZXR1cm4gbnVsbCBmb3Igc3VjY2VzcyBvciBWYWxpZGF0aW9uRXJyb3IgZm9yIGludmFsaWQgaW5wdXRzXG4gICAqL1xuICB2YWxpZGF0ZShjb250cm9sOiBBYnN0cmFjdENvbnRyb2wpOiB7W2tleTogc3RyaW5nXTogYW55fSB8IG51bGwge1xuICAgIHJldHVybiBwZXJzaWFuTGV0dGVyc1ZhbGlkYXRvcih0aGlzLm9wdGlvbnMpKGNvbnRyb2wpO1xuICB9XG59XG4iXX0=