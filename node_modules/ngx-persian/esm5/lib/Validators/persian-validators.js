/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { PersianNumberService } from '../Services/persian-number.service';
import { PersianLetterService } from '../Services/persian-letter.service';
/**
 * Reactive form validator that checks form control value contains only persian numbers.
 * @param {?=} persianNumberService
 * @return {?}
 */
export function persianNumbersValidator(persianNumberService) {
    if (persianNumberService === void 0) { persianNumberService = new PersianNumberService(); }
    return (/**
     * @param {?} control
     * @return {?}
     */
    function (control) {
        return persianNumberService.isPersian(control.value) ? null : { 'persianNumberValidation': control.value };
    });
}
/**
 * Reactive form validator that checks form control value contains only persian letters and allowed characters in the options parameter.
 * @param {?=} options see documents of isPersian method of the PersianLetterService for more info about options.
 * @param {?=} persianLetterService
 * @return {?}
 */
export function persianLettersValidator(options, persianLetterService) {
    if (options === void 0) { options = {
        persianDigits: false,
        whitespaces: false,
        symbols: false,
        enDigits: false
    }; }
    if (persianLetterService === void 0) { persianLetterService = new PersianLetterService(); }
    return (/**
     * @param {?} control
     * @return {?}
     */
    function (control) {
        return persianLetterService.isPersian(control.value, options) ? null : { 'persianLetterValidation': control.value };
    });
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicGVyc2lhbi12YWxpZGF0b3JzLmpzIiwic291cmNlUm9vdCI6Im5nOi8vbmd4LXBlcnNpYW4vIiwic291cmNlcyI6WyJsaWIvVmFsaWRhdG9ycy9wZXJzaWFuLXZhbGlkYXRvcnMudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7OztBQUNBLE9BQU8sRUFBQyxvQkFBb0IsRUFBQyxNQUFNLG9DQUFvQyxDQUFDO0FBQ3hFLE9BQU8sRUFBWSxvQkFBb0IsRUFBQyxNQUFNLG9DQUFvQyxDQUFDOzs7Ozs7QUFNbkYsTUFBTSxVQUFVLHVCQUF1QixDQUFDLG9CQUF1RTtJQUF2RSxxQ0FBQSxFQUFBLDJCQUFpRCxvQkFBb0IsRUFBRTtJQUM3Rzs7OztJQUFPLFVBQUMsT0FBd0I7UUFDOUIsT0FBTyxvQkFBb0IsQ0FBQyxTQUFTLENBQUMsT0FBTyxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLEVBQUMseUJBQXlCLEVBQUUsT0FBTyxDQUFDLEtBQUssRUFBQyxDQUFDO0lBQzNHLENBQUMsRUFBQztBQUNKLENBQUM7Ozs7Ozs7QUFPRCxNQUFNLFVBQVUsdUJBQXVCLENBQUMsT0FJb0MsRUFDcEMsb0JBQXVFO0lBTHZFLHdCQUFBLEVBQUE7UUFDb0IsYUFBYSxFQUFFLEtBQUs7UUFDcEIsV0FBVyxFQUFFLEtBQUs7UUFDbEIsT0FBTyxFQUFFLEtBQUs7UUFDZCxRQUFRLEVBQUUsS0FBSztLQUFDO0lBQ3BDLHFDQUFBLEVBQUEsMkJBQWlELG9CQUFvQixFQUFFO0lBQzdHOzs7O0lBQU8sVUFBQyxPQUF3QjtRQUM5QixPQUFPLG9CQUFvQixDQUFDLFNBQVMsQ0FBQyxPQUFPLENBQUMsS0FBSyxFQUFFLE9BQU8sQ0FBQyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLEVBQUMseUJBQXlCLEVBQUUsT0FBTyxDQUFDLEtBQUssRUFBQyxDQUFDO0lBQ3BILENBQUMsRUFBQztBQUNKLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge0Fic3RyYWN0Q29udHJvbCwgVmFsaWRhdGlvbkVycm9ycywgVmFsaWRhdG9yRm59IGZyb20gJ0Bhbmd1bGFyL2Zvcm1zJztcbmltcG9ydCB7UGVyc2lhbk51bWJlclNlcnZpY2V9IGZyb20gJy4uL1NlcnZpY2VzL3BlcnNpYW4tbnVtYmVyLnNlcnZpY2UnO1xuaW1wb3J0IHtQTE9wdGlvbnMsIFBlcnNpYW5MZXR0ZXJTZXJ2aWNlfSBmcm9tICcuLi9TZXJ2aWNlcy9wZXJzaWFuLWxldHRlci5zZXJ2aWNlJztcblxuLyoqXG4gKiBSZWFjdGl2ZSBmb3JtIHZhbGlkYXRvciB0aGF0IGNoZWNrcyBmb3JtIGNvbnRyb2wgdmFsdWUgY29udGFpbnMgb25seSBwZXJzaWFuIG51bWJlcnMuXG4gKiBAcGFyYW0gcGVyc2lhbk51bWJlclNlcnZpY2VcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHBlcnNpYW5OdW1iZXJzVmFsaWRhdG9yKHBlcnNpYW5OdW1iZXJTZXJ2aWNlOiBQZXJzaWFuTnVtYmVyU2VydmljZSA9IG5ldyBQZXJzaWFuTnVtYmVyU2VydmljZSgpKTogVmFsaWRhdG9yRm4ge1xuICByZXR1cm4gKGNvbnRyb2w6IEFic3RyYWN0Q29udHJvbCk6IFZhbGlkYXRpb25FcnJvcnMgfCBudWxsID0+IHtcbiAgICByZXR1cm4gcGVyc2lhbk51bWJlclNlcnZpY2UuaXNQZXJzaWFuKGNvbnRyb2wudmFsdWUpID8gbnVsbCA6IHsncGVyc2lhbk51bWJlclZhbGlkYXRpb24nOiBjb250cm9sLnZhbHVlfTtcbiAgfTtcbn1cblxuLyoqXG4gKiBSZWFjdGl2ZSBmb3JtIHZhbGlkYXRvciB0aGF0IGNoZWNrcyBmb3JtIGNvbnRyb2wgdmFsdWUgY29udGFpbnMgb25seSBwZXJzaWFuIGxldHRlcnMgYW5kIGFsbG93ZWQgY2hhcmFjdGVycyBpbiB0aGUgb3B0aW9ucyBwYXJhbWV0ZXIuXG4gKiBAcGFyYW0gb3B0aW9ucyBzZWUgZG9jdW1lbnRzIG9mIGlzUGVyc2lhbiBtZXRob2Qgb2YgdGhlIFBlcnNpYW5MZXR0ZXJTZXJ2aWNlIGZvciBtb3JlIGluZm8gYWJvdXQgb3B0aW9ucy5cbiAqIEBwYXJhbSBwZXJzaWFuTGV0dGVyU2VydmljZVxuICovXG5leHBvcnQgZnVuY3Rpb24gcGVyc2lhbkxldHRlcnNWYWxpZGF0b3Iob3B0aW9uczogUExPcHRpb25zID0ge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcGVyc2lhbkRpZ2l0czogZmFsc2UsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB3aGl0ZXNwYWNlczogZmFsc2UsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzeW1ib2xzOiBmYWxzZSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVuRGlnaXRzOiBmYWxzZX0sXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcGVyc2lhbkxldHRlclNlcnZpY2U6IFBlcnNpYW5MZXR0ZXJTZXJ2aWNlID0gbmV3IFBlcnNpYW5MZXR0ZXJTZXJ2aWNlKCkpOiBWYWxpZGF0b3JGbiB7XG4gIHJldHVybiAoY29udHJvbDogQWJzdHJhY3RDb250cm9sKTogVmFsaWRhdGlvbkVycm9ycyB8IG51bGwgPT4ge1xuICAgIHJldHVybiBwZXJzaWFuTGV0dGVyU2VydmljZS5pc1BlcnNpYW4oY29udHJvbC52YWx1ZSwgb3B0aW9ucykgPyBudWxsIDogeydwZXJzaWFuTGV0dGVyVmFsaWRhdGlvbic6IGNvbnRyb2wudmFsdWV9O1xuICB9O1xufVxuIl19