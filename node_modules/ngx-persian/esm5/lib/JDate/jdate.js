/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { JalaliDateCalculatorService } from './jalali-date-calculator.service';
import { InvalidJalaliDateError } from './InvalidJalaliDate.error';
import { JalaliDateValidatorService } from './jalali-date-validator.service';
/**
 * This class represents a complete Date object for Jalali dates. It accepts jalali Dates, converts Georgian dates to jalali and implements
 * all the behaviours of default Date object of JavaScript for Jalali Date, plus some additional methods for developers convenience.
 *
 * ATTENTION:
 *
 * UTC methods are not implemented for Jalali date. They working directly on gDate object (Corresponding date in Georgian) and changing
 * properties of this. Then new JDate object will create from the modified Georgian Date. So they may Cause unpredictable behaviour.
 * Please don't use UTC methods with "todo" tag on them unless you are sure about the behaviour.
 * Recreating objects are safer than working with UTC methods.
 */
var JDate = /** @class */ (function () {
    /**
     * For creating a JDate object, you have 5 different options.
     *
     * 1- If you want to have current date and time, you can simply call new JDate() without any parameter.
     *
     * 2- If you want to create JDate object from a jalali date string as described in the `pars` method document, you can pass that string as
     *    first parameter and leave others empty.
     *
     * 3 - If you want to create JDate object from number of passed milliseconds from UNIX epoch (for example creating a Jalali date object
     *     from result of getTime method of another Date object), you can pass the number as first parameter and leave others alone.
     *
     * 4 - If you want to create JDate object from a Georgian Date object, you can simply pass that Date object as first parameter and leave
     *     others empty.
     *
     * 5- If you want to create JDate object from date and time values, you can simply fill corresponding parameters of each date and time
     * value to the constructor. You don't have to fill all of the parameters. only those you need. other parameters will fill with zero.
     * Examples of all of those scenarios:
     *
     * @example new JDate()
     * @example new JDate('11 دی 1348 00:00:00')
     * @example new JDate(-12600000)
     * @example new JDate(new Date(2018, 0, 1))
     * @example new JDate(1397, 0, 25)
     * @example new JDate(1397, 11, 25, 12, 32, 45, 123)
     * @param jYear
     * @param jMonth Month number starting from 0 and should be LESSER than 12.
     * @param jDay
     * @param hours
     * @param minutes
     * @param seconds
     * @param milliseconds
     * @throws InvalidJalaliDateError
     */
    function JDate(jYear, jMonth, jDay, hours, minutes, seconds, milliseconds) {
        if (hours === void 0) { hours = 0; }
        if (minutes === void 0) { minutes = 0; }
        if (seconds === void 0) { seconds = 0; }
        if (milliseconds === void 0) { milliseconds = 0; }
        this._calculator = new JalaliDateCalculatorService(new JalaliDateValidatorService());
        if (!jYear) {
            this._createFromDate(new Date());
        }
        else if (typeof jYear === 'string' && jMonth === undefined) {
            this._createFromDate(new Date(JDate.parse(jYear)));
        }
        else if (typeof jYear === 'number' && jMonth === undefined) {
            this._createFromDate(new Date(jYear));
        }
        else if (jYear instanceof Date && jMonth === undefined) {
            this._createFromDate(jYear);
        }
        else {
            // @ts-ignore
            this._gDate = this._calculator.convertToGeorgian(jYear, jMonth, jDay);
            // @ts-ignore
            this._jYear = jYear;
            this._jMonth = jMonth;
            this._jDay = jDay;
            this._gDate.setHours(hours, minutes, seconds, milliseconds);
        }
        this._check_date_validity();
    }
    /**
     * If input value length is shorter than desiredLength, adds zeros at the beginning of it until meets desired length.
     * @param value a number or string that we want have a specific length
     * @param desiredLength length of output string. If be shorter than input length, input will return.
     */
    /**
     * If input value length is shorter than desiredLength, adds zeros at the beginning of it until meets desired length.
     * @param {?} value a number or string that we want have a specific length
     * @param {?} desiredLength length of output string. If be shorter than input length, input will return.
     * @return {?}
     */
    JDate.zeroPadding = /**
     * If input value length is shorter than desiredLength, adds zeros at the beginning of it until meets desired length.
     * @param {?} value a number or string that we want have a specific length
     * @param {?} desiredLength length of output string. If be shorter than input length, input will return.
     * @return {?}
     */
    function (value, desiredLength) {
        value = value.toString();
        while (value.length < desiredLength) {
            value = '0' + value;
        }
        return value;
    };
    /**
     * Extracts Georgian Date object from a Jalali date string.
     * @param dateString a Jalali date string following this pattern:
     *
     *        "yyyy mmm dd HH:MM:SS"
     *        or this pattern:
     *
     *        "yyyy mmmm dd HH:MM:SS".
     * @example 11 دی 1348 00:00:00
     * @example 11 Dey 1348 00:00:00
     * @return a Georgian Date object.
     */
    /**
     * Extracts Georgian Date object from a Jalali date string.
     * \@example 11 دی 1348 00:00:00 / 11 Dey 1348 00:00:00
     * @param {?} dateString a Jalali date string following this pattern:
     *
     *        "yyyy mmm dd HH:MM:SS"
     *        or this pattern:
     *
     *        "yyyy mmmm dd HH:MM:SS".
     * @return {?} a Georgian Date object.
     */
    JDate.parse = /**
     * Extracts Georgian Date object from a Jalali date string.
     * \@example 11 دی 1348 00:00:00 / 11 Dey 1348 00:00:00
     * @param {?} dateString a Jalali date string following this pattern:
     *
     *        "yyyy mmm dd HH:MM:SS"
     *        or this pattern:
     *
     *        "yyyy mmmm dd HH:MM:SS".
     * @return {?} a Georgian Date object.
     */
    function (dateString) {
        /** @type {?} */
        var calculator = new JalaliDateCalculatorService(new JalaliDateValidatorService());
        /** @type {?} */
        var dateArray = dateString.split(' ');
        if (dateArray.length < 3) {
            throw new InvalidJalaliDateError();
        }
        /** @type {?} */
        var day = parseInt(dateArray[0]);
        /** @type {?} */
        var month = JDate.FA_MONTHS.indexOf(dateArray[1]);
        if (month === -1) {
            month = JDate.EN_MONTHS.indexOf(dateArray[1]);
        }
        if (month === -1) {
            throw new InvalidJalaliDateError();
        }
        /** @type {?} */
        var year = parseInt(dateArray[2]);
        /** @type {?} */
        var timeArray = dateArray.length > 3 ? dateArray[3].split(':') : ['0', '0', '0'];
        /** @type {?} */
        var hour = parseInt(timeArray[0]);
        /** @type {?} */
        var min = parseInt(timeArray[1]);
        /** @type {?} */
        var sec = parseInt(timeArray[2]);
        /** @type {?} */
        var gDate = calculator.convertToGeorgian(year, month, day);
        gDate.setHours(hour, min, sec);
        return gDate.getTime();
    };
    /**
     * This method recalculates the gDate value with private attributes those storing Jalali date parts.
     */
    /**
     * This method recalculates the gDate value with private attributes those storing Jalali date parts.
     * @private
     * @return {?}
     */
    JDate.prototype._renewGDate = /**
     * This method recalculates the gDate value with private attributes those storing Jalali date parts.
     * @private
     * @return {?}
     */
    function () {
        this._gDate = this._calculator.convertToGeorgian(this._jYear, this._jMonth, this._jDay);
    };
    Object.defineProperty(JDate.prototype, "jYear", {
        /**
         * Sets Jalali year value to the input parameter and recalculates gDate attribute.
         * @param value full Jalali year like 1397
         */
        set: /**
         * Sets Jalali year value to the input parameter and recalculates gDate attribute.
         * @private
         * @param {?} value full Jalali year like 1397
         * @return {?}
         */
        function (value) {
            this._jYear = value;
            this._check_date_validity();
            this._renewGDate();
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(JDate.prototype, "jMonth", {
        /**
         * Sets Jalali month value to the input parameter and recalculates gDate attribute.
         * @param value month number starting from zero
         */
        set: /**
         * Sets Jalali month value to the input parameter and recalculates gDate attribute.
         * @private
         * @param {?} value month number starting from zero
         * @return {?}
         */
        function (value) {
            this._jMonth = value;
            this._check_date_validity();
            this._renewGDate();
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(JDate.prototype, "jDay", {
        /**
         * Sets Jalali day value to the input parameter and recalculates gDate attribute.
         * @param value day number starting from 1.
         */
        set: /**
         * Sets Jalali day value to the input parameter and recalculates gDate attribute.
         * @private
         * @param {?} value day number starting from 1.
         * @return {?}
         */
        function (value) {
            this._jDay = value;
            this._check_date_validity();
            this._renewGDate();
        },
        enumerable: true,
        configurable: true
    });
    /**
     * throws InvalidJalaliDateError when date values of this object won't represent a valid Jalali date.
     * Otherwise nothing happens.
     * @throws InvalidJalaliDateError
     */
    /**
     * throws InvalidJalaliDateError when date values of this object won't represent a valid Jalali date.
     * Otherwise nothing happens.
     * @throws InvalidJalaliDateError
     * @private
     * @return {?}
     */
    JDate.prototype._check_date_validity = /**
     * throws InvalidJalaliDateError when date values of this object won't represent a valid Jalali date.
     * Otherwise nothing happens.
     * @throws InvalidJalaliDateError
     * @private
     * @return {?}
     */
    function () {
        if (!this._calculator.validator.isValidJDate(this._jYear, this._jMonth, this._jDay)) {
            throw new InvalidJalaliDateError();
        }
    };
    /**
     * Calculates Jalali year from Georgian Date object and sets the attributes of the object to proper values.
     * @param gDate
     */
    /**
     * Calculates Jalali year from Georgian Date object and sets the attributes of the object to proper values.
     * @private
     * @param {?} gDate
     * @return {?}
     */
    JDate.prototype._createFromDate = /**
     * Calculates Jalali year from Georgian Date object and sets the attributes of the object to proper values.
     * @private
     * @param {?} gDate
     * @return {?}
     */
    function (gDate) {
        /** @type {?} */
        var conversionResult = this._calculator.convertToJalali(gDate);
        this._jYear = conversionResult.year;
        this._jMonth = conversionResult.month;
        this._jDay = conversionResult.day;
        this._gDate = gDate;
    };
    /**
     * @param {?} hint
     * @return {?}
     */
    JDate.prototype[Symbol.toPrimitive] = /**
     * @param {?} hint
     * @return {?}
     */
    function (hint) {
        return undefined;
    };
    /**
     * @return a regular javascript Date object representing Georgian date corresponding to the Jalili date of the JDate object.
     */
    /**
     * @return {?} a regular javascript Date object representing Georgian date corresponding to the Jalili date of the JDate object.
     */
    JDate.prototype.getGeorgianDate = /**
     * @return {?} a regular javascript Date object representing Georgian date corresponding to the Jalili date of the JDate object.
     */
    function () {
        return this._gDate;
    };
    /**
     * @return the day of the month for the specified date according to local time.
     */
    /**
     * @return {?} the day of the month for the specified date according to local time.
     */
    JDate.prototype.getDate = /**
     * @return {?} the day of the month for the specified date according to local time.
     */
    function () {
        return this._jDay;
    };
    /**
     *  @return the day of the week for the specified date according to local time, where 0 represents Friday and 6 is Thursday.
     */
    /**
     * @return {?} the day of the week for the specified date according to local time, where 0 represents Friday and 6 is Thursday.
     */
    JDate.prototype.getDay = /**
     * @return {?} the day of the week for the specified date according to local time, where 0 represents Friday and 6 is Thursday.
     */
    function () {
        return (this._gDate.getDay() + 2) % 7;
    };
    /**
     * @return the year (4 digits for years greater than 999) of the specified date according to local time
     * @example 1397
     * @example 100
     * */
    /**
     * \@example 1397 / 100
     *
     * @return {?} the year (4 digits for years greater than 999) of the specified date according to local time
     */
    JDate.prototype.getFullYear = /**
     * \@example 1397 / 100
     *
     * @return {?} the year (4 digits for years greater than 999) of the specified date according to local time
     */
    function () {
        return this._jYear;
    };
    /**
     * @return the hour for the specified date, according to local time.
     * @example 10
     */
    /**
     * \@example 10
     * @return {?} the hour for the specified date, according to local time.
     */
    JDate.prototype.getHours = /**
     * \@example 10
     * @return {?} the hour for the specified date, according to local time.
     */
    function () {
        return this._gDate.getHours();
    };
    /**
     * Converts default 24-hour clock hour value to the 12-hour clock version.
     * @return a number between 1 to 12
     */
    /**
     * Converts default 24-hour clock hour value to the 12-hour clock version.
     * @return {?} a number between 1 to 12
     */
    JDate.prototype.getHours12hourClock = /**
     * Converts default 24-hour clock hour value to the 12-hour clock version.
     * @return {?} a number between 1 to 12
     */
    function () {
        /** @type {?} */
        var result = this.getHours() % 12;
        return result ? result : 12;
    };
    /**
     * @return the milliseconds in the specified date according to local time.
     */
    /**
     * @return {?} the milliseconds in the specified date according to local time.
     */
    JDate.prototype.getMilliseconds = /**
     * @return {?} the milliseconds in the specified date according to local time.
     */
    function () {
        return this._gDate.getMilliseconds();
    };
    /**
     * @Return the minutes in the specified date according to local time.
     */
    /**
     * \@Return the minutes in the specified date according to local time.
     * @return {?}
     */
    JDate.prototype.getMinutes = /**
     * \@Return the minutes in the specified date according to local time.
     * @return {?}
     */
    function () {
        return this._gDate.getMinutes();
    };
    /**
     * @return the month in the specified date according to local time, as a zero-based value
     * where zero indicates the first month of the year.
     */
    /**
     * @return {?} the month in the specified date according to local time, as a zero-based value
     * where zero indicates the first month of the year.
     */
    JDate.prototype.getMonth = /**
     * @return {?} the month in the specified date according to local time, as a zero-based value
     * where zero indicates the first month of the year.
     */
    function () {
        return this._jMonth;
    };
    /**
     * @return the seconds in the specified date according to local time.
     */
    /**
     * @return {?} the seconds in the specified date according to local time.
     */
    JDate.prototype.getSeconds = /**
     * @return {?} the seconds in the specified date according to local time.
     */
    function () {
        return this._gDate.getSeconds();
    };
    /**
     * JavaScript uses milliseconds as the unit of measurement, whereas Unix Time is in seconds.
     *
     * getTime() always uses UTC for time representation. For example, a client browser in one timezone, getTime() will be the same as a
     * client browser in any other timezone.
     *
     *You can use this method to help assign a date and time to another Date object. This method is functionally equivalent to the valueOf() method.
     * @return the number of milliseconds since the Unix Epoch.
     */
    /**
     * JavaScript uses milliseconds as the unit of measurement, whereas Unix Time is in seconds.
     *
     * getTime() always uses UTC for time representation. For example, a client browser in one timezone, getTime() will be the same as a
     * client browser in any other timezone.
     *
     * You can use this method to help assign a date and time to another Date object. This method is functionally equivalent to the valueOf() method.
     * @return {?} the number of milliseconds since the Unix Epoch.
     */
    JDate.prototype.getTime = /**
     * JavaScript uses milliseconds as the unit of measurement, whereas Unix Time is in seconds.
     *
     * getTime() always uses UTC for time representation. For example, a client browser in one timezone, getTime() will be the same as a
     * client browser in any other timezone.
     *
     * You can use this method to help assign a date and time to another Date object. This method is functionally equivalent to the valueOf() method.
     * @return {?} the number of milliseconds since the Unix Epoch.
     */
    function () {
        return this._gDate.getTime();
    };
    /**
     * Attention: Not implemented
     * @return the time zone difference, in minutes, from current locale (host system settings) to UTC
     * @todo add implementation
     */
    /**
     * Attention: Not implemented
     * \@todo add implementation
     * @return {?} the time zone difference, in minutes, from current locale (host system settings) to UTC
     */
    JDate.prototype.getTimezoneOffset = /**
     * Attention: Not implemented
     * \@todo add implementation
     * @return {?} the time zone difference, in minutes, from current locale (host system settings) to UTC
     */
    function () {
        return this._gDate.getTimezoneOffset();
    };
    /**
     * Output is not jalali day.
     * @return getUTCDate of the corresponding Georgian date.
     * @todo add implementation
     */
    /**
     * Output is not jalali day.
     * \@todo add implementation
     * @return {?} getUTCDate of the corresponding Georgian date.
     */
    JDate.prototype.getUTCDate = /**
     * Output is not jalali day.
     * \@todo add implementation
     * @return {?} getUTCDate of the corresponding Georgian date.
     */
    function () {
        return this._gDate.getUTCDate();
    };
    /**
     * Output is not jalali day.
     * @return getUTCDay of the corresponding Georgian date.
     * @todo add implementation
     */
    /**
     * Output is not jalali day.
     * \@todo add implementation
     * @return {?} getUTCDay of the corresponding Georgian date.
     */
    JDate.prototype.getUTCDay = /**
     * Output is not jalali day.
     * \@todo add implementation
     * @return {?} getUTCDay of the corresponding Georgian date.
     */
    function () {
        return this._gDate.getUTCDay();
    };
    /**
     * Output is not a Jalali Year.
     * @return getUTCFullYear of the corresponding Georgian date.
     * @todo add implementation
     */
    /**
     * Output is not a Jalali Year.
     * \@todo add implementation
     * @return {?} getUTCFullYear of the corresponding Georgian date.
     */
    JDate.prototype.getUTCFullYear = /**
     * Output is not a Jalali Year.
     * \@todo add implementation
     * @return {?} getUTCFullYear of the corresponding Georgian date.
     */
    function () {
        return this._gDate.getUTCFullYear();
    };
    /**
     * @return getUTCHours of the corresponding Georgian date.
     * @todo add implementation
     */
    /**
     * \@todo add implementation
     * @return {?} getUTCHours of the corresponding Georgian date.
     */
    JDate.prototype.getUTCHours = /**
     * \@todo add implementation
     * @return {?} getUTCHours of the corresponding Georgian date.
     */
    function () {
        return this._gDate.getUTCHours();
    };
    /**
     * @return getUTCMilliseconds of the corresponding Georgian date.
     * @todo add implementation
     */
    /**
     * \@todo add implementation
     * @return {?} getUTCMilliseconds of the corresponding Georgian date.
     */
    JDate.prototype.getUTCMilliseconds = /**
     * \@todo add implementation
     * @return {?} getUTCMilliseconds of the corresponding Georgian date.
     */
    function () {
        return this._gDate.getUTCMilliseconds();
    };
    /**
     * @return getUTCMinutes of the corresponding Georgian date.
     * @todo add implementation
     */
    /**
     * \@todo add implementation
     * @return {?} getUTCMinutes of the corresponding Georgian date.
     */
    JDate.prototype.getUTCMinutes = /**
     * \@todo add implementation
     * @return {?} getUTCMinutes of the corresponding Georgian date.
     */
    function () {
        return this._gDate.getUTCMinutes();
    };
    /**
     * Output is not a Jalali Year.
     * @return getUTCMonth of the corresponding Georgian date.
     * @todo add implementation
     */
    /**
     * Output is not a Jalali Year.
     * \@todo add implementation
     * @return {?} getUTCMonth of the corresponding Georgian date.
     */
    JDate.prototype.getUTCMonth = /**
     * Output is not a Jalali Year.
     * \@todo add implementation
     * @return {?} getUTCMonth of the corresponding Georgian date.
     */
    function () {
        return this._gDate.getUTCMonth();
    };
    /**
     * @return getUTCSeconds of the corresponding Georgian date.
     * @todo add implementation
     */
    /**
     * \@todo add implementation
     * @return {?} getUTCSeconds of the corresponding Georgian date.
     */
    JDate.prototype.getUTCSeconds = /**
     * \@todo add implementation
     * @return {?} getUTCSeconds of the corresponding Georgian date.
     */
    function () {
        return this._gDate.getUTCSeconds();
    };
    /**
     * sets the day of the JDate object relative to the beginning of the currently set month.
     * @param date day number starts from 1.
     * @return The number of milliseconds between 1 January 1970 00:00:00 UTC and the given date (the Date object is also changed in place).
     */
    /**
     * sets the day of the JDate object relative to the beginning of the currently set month.
     * @param {?} date day number starts from 1.
     * @return {?} The number of milliseconds between 1 January 1970 00:00:00 UTC and the given date (the Date object is also changed in place).
     */
    JDate.prototype.setDate = /**
     * sets the day of the JDate object relative to the beginning of the currently set month.
     * @param {?} date day number starts from 1.
     * @return {?} The number of milliseconds between 1 January 1970 00:00:00 UTC and the given date (the Date object is also changed in place).
     */
    function (date) {
        this.jDay = date;
        return this.getTime();
    };
    /**
     * sets the full year for a specified date according to local time. Returns new timestamp.
     * @param year full Jalali year like 1397
     * @param month number of month starting from 0
     * @param date number of day starting from 1
     */
    /**
     * sets the full year for a specified date according to local time. Returns new timestamp.
     * @param {?} year full Jalali year like 1397
     * @param {?=} month number of month starting from 0
     * @param {?=} date number of day starting from 1
     * @return {?}
     */
    JDate.prototype.setFullYear = /**
     * sets the full year for a specified date according to local time. Returns new timestamp.
     * @param {?} year full Jalali year like 1397
     * @param {?=} month number of month starting from 0
     * @param {?=} date number of day starting from 1
     * @return {?}
     */
    function (year, month, date) {
        this.jYear = year;
        if (month) {
            this.jMonth = month;
        }
        if (date) {
            this.jDay = date;
        }
        return this.getTime();
    };
    /**
     * Sets the hours for a specified date according to local time, and returns the number of milliseconds since
     * January 1, 1970 00:00:00 UTC until the time represented by the updated JDate instance.
     * @param hours An integer between 0 and 23, representing the hour
     * @param min An integer between 0 and 59, representing the minutes.
     * @param sec An integer between 0 and 59, representing the seconds.
     * @param ms A number between 0 and 999, representing the milliseconds.
     * @return The number of milliseconds between January 1, 1970 00:00:00 UTC and the updated date.
     */
    /**
     * Sets the hours for a specified date according to local time, and returns the number of milliseconds since
     * January 1, 1970 00:00:00 UTC until the time represented by the updated JDate instance.
     * @param {?} hours An integer between 0 and 23, representing the hour
     * @param {?=} min An integer between 0 and 59, representing the minutes.
     * @param {?=} sec An integer between 0 and 59, representing the seconds.
     * @param {?=} ms A number between 0 and 999, representing the milliseconds.
     * @return {?} The number of milliseconds between January 1, 1970 00:00:00 UTC and the updated date.
     */
    JDate.prototype.setHours = /**
     * Sets the hours for a specified date according to local time, and returns the number of milliseconds since
     * January 1, 1970 00:00:00 UTC until the time represented by the updated JDate instance.
     * @param {?} hours An integer between 0 and 23, representing the hour
     * @param {?=} min An integer between 0 and 59, representing the minutes.
     * @param {?=} sec An integer between 0 and 59, representing the seconds.
     * @param {?=} ms A number between 0 and 999, representing the milliseconds.
     * @return {?} The number of milliseconds between January 1, 1970 00:00:00 UTC and the updated date.
     */
    function (hours, min, sec, ms) {
        this._gDate.setHours(hours);
        if (min !== undefined) {
            this.setMinutes(min);
        }
        if (sec !== undefined) {
            this.setSeconds(sec);
        }
        if (ms !== undefined) {
            this.setMilliseconds(ms);
        }
        return this.getTime();
    };
    /**
     * Sets the milliseconds for a specified date according to local time.
     * @param ms A number between 0 and 999, representing the milliseconds.
     * @return The number of milliseconds between 1 January 1970 00:00:00 UTC and the updated date.
     */
    /**
     * Sets the milliseconds for a specified date according to local time.
     * @param {?} ms A number between 0 and 999, representing the milliseconds.
     * @return {?} The number of milliseconds between 1 January 1970 00:00:00 UTC and the updated date.
     */
    JDate.prototype.setMilliseconds = /**
     * Sets the milliseconds for a specified date according to local time.
     * @param {?} ms A number between 0 and 999, representing the milliseconds.
     * @return {?} The number of milliseconds between 1 January 1970 00:00:00 UTC and the updated date.
     */
    function (ms) {
        this._gDate.setMilliseconds(ms);
        return this.getTime();
    };
    /**
     * Sets the minutes for a specified date according to local time.
     * @param min An integer between 0 and 59, representing the minutes.
     * @param sec An integer between 0 and 59, representing the seconds.
     * @param ms A number between 0 and 999, representing the milliseconds.
     * @return The number of milliseconds between 1 January 1970 00:00:00 UTC and the updated date.
     */
    /**
     * Sets the minutes for a specified date according to local time.
     * @param {?} min An integer between 0 and 59, representing the minutes.
     * @param {?=} sec An integer between 0 and 59, representing the seconds.
     * @param {?=} ms A number between 0 and 999, representing the milliseconds.
     * @return {?} The number of milliseconds between 1 January 1970 00:00:00 UTC and the updated date.
     */
    JDate.prototype.setMinutes = /**
     * Sets the minutes for a specified date according to local time.
     * @param {?} min An integer between 0 and 59, representing the minutes.
     * @param {?=} sec An integer between 0 and 59, representing the seconds.
     * @param {?=} ms A number between 0 and 999, representing the milliseconds.
     * @return {?} The number of milliseconds between 1 January 1970 00:00:00 UTC and the updated date.
     */
    function (min, sec, ms) {
        this._gDate.setMinutes(min);
        if (sec !== undefined) {
            this.setSeconds(sec);
        }
        if (ms !== undefined) {
            this.setMilliseconds(ms);
        }
        return this.getTime();
    };
    /**
     * Sets the month for a specified date according to the currently set year.
     * @param month An integer between 0 and 11, representing the months Farvardin through Esfand.
     * @param date An integer from 1 to 31, representing the day of the month.
     * @return The number of milliseconds between 1 January 1970 00:00:00 UTC and the updated date.
     */
    /**
     * Sets the month for a specified date according to the currently set year.
     * @param {?} month An integer between 0 and 11, representing the months Farvardin through Esfand.
     * @param {?=} date An integer from 1 to 31, representing the day of the month.
     * @return {?} The number of milliseconds between 1 January 1970 00:00:00 UTC and the updated date.
     */
    JDate.prototype.setMonth = /**
     * Sets the month for a specified date according to the currently set year.
     * @param {?} month An integer between 0 and 11, representing the months Farvardin through Esfand.
     * @param {?=} date An integer from 1 to 31, representing the day of the month.
     * @return {?} The number of milliseconds between 1 January 1970 00:00:00 UTC and the updated date.
     */
    function (month, date) {
        this.jMonth = month;
        if (date !== undefined) {
            this.jDay = date;
        }
        return this.getTime();
    };
    /**
     * Sets the seconds for a specified date according to local time.
     * @param sec An integer between 0 and 59, representing the seconds.
     * @param ms A number between 0 and 999, representing the milliseconds.
     * @return The number of milliseconds between 1 January 1970 00:00:00 UTC and the updated date.
     */
    /**
     * Sets the seconds for a specified date according to local time.
     * @param {?} sec An integer between 0 and 59, representing the seconds.
     * @param {?=} ms A number between 0 and 999, representing the milliseconds.
     * @return {?} The number of milliseconds between 1 January 1970 00:00:00 UTC and the updated date.
     */
    JDate.prototype.setSeconds = /**
     * Sets the seconds for a specified date according to local time.
     * @param {?} sec An integer between 0 and 59, representing the seconds.
     * @param {?=} ms A number between 0 and 999, representing the milliseconds.
     * @return {?} The number of milliseconds between 1 January 1970 00:00:00 UTC and the updated date.
     */
    function (sec, ms) {
        this._gDate.setSeconds(sec);
        if (ms !== undefined) {
            this.setMilliseconds(ms);
        }
        return this.getTime();
    };
    /**
     * Sets the JDate object to the time represented by a number of milliseconds since January 1, 1970, 00:00:00 UTC.
     * @param time sets the Date object to the time represented by a number of milliseconds since January 1, 1970, 00:00:00 UTC.
     * @return The number of milliseconds between 1 January 1970 00:00:00 UTC and the updated date.
     */
    /**
     * Sets the JDate object to the time represented by a number of milliseconds since January 1, 1970, 00:00:00 UTC.
     * @param {?} time sets the Date object to the time represented by a number of milliseconds since January 1, 1970, 00:00:00 UTC.
     * @return {?} The number of milliseconds between 1 January 1970 00:00:00 UTC and the updated date.
     */
    JDate.prototype.setTime = /**
     * Sets the JDate object to the time represented by a number of milliseconds since January 1, 1970, 00:00:00 UTC.
     * @param {?} time sets the Date object to the time represented by a number of milliseconds since January 1, 1970, 00:00:00 UTC.
     * @return {?} The number of milliseconds between 1 January 1970 00:00:00 UTC and the updated date.
     */
    function (time) {
        this._createFromDate(new Date(time));
        return time;
    };
    /**
     * sets the day of the month for a specified date according to universal time.
     * Then recreate the JDate object from new Georgian object.
     * @param  date An integer from 1 to 31, representing the day of the month.
     * @return The number of milliseconds between 1 January 1970 00:00:00 UTC and the updated date.
     * @todo add implementation
     */
    /**
     * sets the day of the month for a specified date according to universal time.
     * Then recreate the JDate object from new Georgian object.
     * \@todo add implementation
     * @param {?} date An integer from 1 to 31, representing the day of the month.
     * @return {?} The number of milliseconds between 1 January 1970 00:00:00 UTC and the updated date.
     */
    JDate.prototype.setUTCDate = /**
     * sets the day of the month for a specified date according to universal time.
     * Then recreate the JDate object from new Georgian object.
     * \@todo add implementation
     * @param {?} date An integer from 1 to 31, representing the day of the month.
     * @return {?} The number of milliseconds between 1 January 1970 00:00:00 UTC and the updated date.
     */
    function (date) {
        this._gDate.setUTCDate(date);
        this._createFromDate(this._gDate);
        return this.getTime();
    };
    /**
     * Sets the full year for a specified date according to universal time.
     * Then recreate the JDate object from new Georgian object.
     * @param year  An integer specifying the numeric value of the year, for example, 1995.
     * @param month  Optional. An integer between 0 and 11 representing the months January through December.
     * @param date An integer between 1 and 31 representing the day of the month. If you specify the dayValue parameter, you must also
     * specify the monthValue.
     * @todo add implementation
     */
    /**
     * Sets the full year for a specified date according to universal time.
     * Then recreate the JDate object from new Georgian object.
     * \@todo add implementation
     * @param {?} year  An integer specifying the numeric value of the year, for example, 1995.
     * @param {?=} month  Optional. An integer between 0 and 11 representing the months January through December.
     * @param {?=} date An integer between 1 and 31 representing the day of the month. If you specify the dayValue parameter, you must also
     * specify the monthValue.
     * @return {?}
     */
    JDate.prototype.setUTCFullYear = /**
     * Sets the full year for a specified date according to universal time.
     * Then recreate the JDate object from new Georgian object.
     * \@todo add implementation
     * @param {?} year  An integer specifying the numeric value of the year, for example, 1995.
     * @param {?=} month  Optional. An integer between 0 and 11 representing the months January through December.
     * @param {?=} date An integer between 1 and 31 representing the day of the month. If you specify the dayValue parameter, you must also
     * specify the monthValue.
     * @return {?}
     */
    function (year, month, date) {
        this._gDate.setUTCFullYear(year, month, date);
        this._createFromDate(this._gDate);
        return this.getTime();
    };
    /**
     * Sets the hour for a specified date according to universal time, and returns the number of milliseconds since
     * January 1, 1970 00:00:00 UTC until the time represented by the updated Date instance.
     * Then recreate the JDate object from new Georgian object.
     * @param hours  An integer between 0 and 23, representing the hour.
     * @param min Optional. An integer between 0 and 59, representing the minutes.
     * @param sec Optional. An integer between 0 and 59, representing the seconds. If you specify the secondsValue parameter,
     *        you must also specify the minutesValue.
     * @param ms Optional. A number between 0 and 999, representing the milliseconds. If you specify the msValue parameter,
     *        you must also specify the minutesValue and secondsValue.
     * @return The number of milliseconds between January 1, 1970 00:00:00 UTC and the updated date.
     * @todo add implementation
     */
    /**
     * Sets the hour for a specified date according to universal time, and returns the number of milliseconds since
     * January 1, 1970 00:00:00 UTC until the time represented by the updated Date instance.
     * Then recreate the JDate object from new Georgian object.
     * \@todo add implementation
     * @param {?} hours  An integer between 0 and 23, representing the hour.
     * @param {?=} min Optional. An integer between 0 and 59, representing the minutes.
     * @param {?=} sec Optional. An integer between 0 and 59, representing the seconds. If you specify the secondsValue parameter,
     *        you must also specify the minutesValue.
     * @param {?=} ms Optional. A number between 0 and 999, representing the milliseconds. If you specify the msValue parameter,
     *        you must also specify the minutesValue and secondsValue.
     * @return {?} The number of milliseconds between January 1, 1970 00:00:00 UTC and the updated date.
     */
    JDate.prototype.setUTCHours = /**
     * Sets the hour for a specified date according to universal time, and returns the number of milliseconds since
     * January 1, 1970 00:00:00 UTC until the time represented by the updated Date instance.
     * Then recreate the JDate object from new Georgian object.
     * \@todo add implementation
     * @param {?} hours  An integer between 0 and 23, representing the hour.
     * @param {?=} min Optional. An integer between 0 and 59, representing the minutes.
     * @param {?=} sec Optional. An integer between 0 and 59, representing the seconds. If you specify the secondsValue parameter,
     *        you must also specify the minutesValue.
     * @param {?=} ms Optional. A number between 0 and 999, representing the milliseconds. If you specify the msValue parameter,
     *        you must also specify the minutesValue and secondsValue.
     * @return {?} The number of milliseconds between January 1, 1970 00:00:00 UTC and the updated date.
     */
    function (hours, min, sec, ms) {
        this._gDate.setUTCHours(hours, min, sec, ms);
        this._createFromDate(this._gDate);
        return this.getTime();
    };
    /**
     * Sets the milliseconds for a specified date according to universal time.
     *
     * Then recreate the JDate object from new Georgian object.
     * @param ms A number between 0 and 999, representing the milliseconds.
     * @return The number of milliseconds between 1 January 1970 00:00:00 UTC and the updated date.
     * @todo add implementation
     */
    /**
     * Sets the milliseconds for a specified date according to universal time.
     *
     * Then recreate the JDate object from new Georgian object.
     * \@todo add implementation
     * @param {?} ms A number between 0 and 999, representing the milliseconds.
     * @return {?} The number of milliseconds between 1 January 1970 00:00:00 UTC and the updated date.
     */
    JDate.prototype.setUTCMilliseconds = /**
     * Sets the milliseconds for a specified date according to universal time.
     *
     * Then recreate the JDate object from new Georgian object.
     * \@todo add implementation
     * @param {?} ms A number between 0 and 999, representing the milliseconds.
     * @return {?} The number of milliseconds between 1 January 1970 00:00:00 UTC and the updated date.
     */
    function (ms) {
        this._gDate.setUTCMilliseconds(ms);
        this._createFromDate(this._gDate);
        return this.getTime();
    };
    /**
     * Sets the minutes for a specified date according to universal time.
     *
     * Then recreate the JDate object from new Georgian object.
     * @param min An integer between 0 and 59, representing the minutes.
     * @param sec Optional. An integer between 0 and 59, representing the seconds. If you specify the secondsValue parameter,
     *        you must also specify the minutesValue.
     * @param ms Optional. A number between 0 and 999, representing the milliseconds. If you specify the msValue parameter,
     *        you must also specify the minutesValue and secondsValue.
     * @return The number of milliseconds between 1 January 1970 00:00:00 UTC and the updated date.
     * @todo add implementation
     */
    /**
     * Sets the minutes for a specified date according to universal time.
     *
     * Then recreate the JDate object from new Georgian object.
     * \@todo add implementation
     * @param {?} min An integer between 0 and 59, representing the minutes.
     * @param {?=} sec Optional. An integer between 0 and 59, representing the seconds. If you specify the secondsValue parameter,
     *        you must also specify the minutesValue.
     * @param {?=} ms Optional. A number between 0 and 999, representing the milliseconds. If you specify the msValue parameter,
     *        you must also specify the minutesValue and secondsValue.
     * @return {?} The number of milliseconds between 1 January 1970 00:00:00 UTC and the updated date.
     */
    JDate.prototype.setUTCMinutes = /**
     * Sets the minutes for a specified date according to universal time.
     *
     * Then recreate the JDate object from new Georgian object.
     * \@todo add implementation
     * @param {?} min An integer between 0 and 59, representing the minutes.
     * @param {?=} sec Optional. An integer between 0 and 59, representing the seconds. If you specify the secondsValue parameter,
     *        you must also specify the minutesValue.
     * @param {?=} ms Optional. A number between 0 and 999, representing the milliseconds. If you specify the msValue parameter,
     *        you must also specify the minutesValue and secondsValue.
     * @return {?} The number of milliseconds between 1 January 1970 00:00:00 UTC and the updated date.
     */
    function (min, sec, ms) {
        this._gDate.setUTCMinutes(min, sec, ms);
        this._createFromDate(this._gDate);
        return this.getTime();
    };
    /**
     * Sets the month for a specified date according to universal time.
     *
     * Then recreate the JDate object from new Georgian object.
     * @param month An integer between 0 and 11, representing the months January through December.
     * @param date Optional. An integer from 1 to 31, representing the day of the month.
     * @return The number of milliseconds between 1 January 1970 00:00:00 UTC and the updated date.
     * @todo add implementation
     */
    /**
     * Sets the month for a specified date according to universal time.
     *
     * Then recreate the JDate object from new Georgian object.
     * \@todo add implementation
     * @param {?} month An integer between 0 and 11, representing the months January through December.
     * @param {?=} date Optional. An integer from 1 to 31, representing the day of the month.
     * @return {?} The number of milliseconds between 1 January 1970 00:00:00 UTC and the updated date.
     */
    JDate.prototype.setUTCMonth = /**
     * Sets the month for a specified date according to universal time.
     *
     * Then recreate the JDate object from new Georgian object.
     * \@todo add implementation
     * @param {?} month An integer between 0 and 11, representing the months January through December.
     * @param {?=} date Optional. An integer from 1 to 31, representing the day of the month.
     * @return {?} The number of milliseconds between 1 January 1970 00:00:00 UTC and the updated date.
     */
    function (month, date) {
        this._gDate.setUTCMonth(month, date);
        this._createFromDate(this._gDate);
        return this.getTime();
    };
    /**
     * Sets the seconds for a specified date according to universal time.
     *
     * Then recreate the JDate object from new Georgian object.
     * @param sec An integer between 0 and 59, representing the seconds.
     * @param ms Optional. A number between 0 and 999, representing the milliseconds.
     * @todo add implementation
     */
    /**
     * Sets the seconds for a specified date according to universal time.
     *
     * Then recreate the JDate object from new Georgian object.
     * \@todo add implementation
     * @param {?} sec An integer between 0 and 59, representing the seconds.
     * @param {?=} ms Optional. A number between 0 and 999, representing the milliseconds.
     * @return {?}
     */
    JDate.prototype.setUTCSeconds = /**
     * Sets the seconds for a specified date according to universal time.
     *
     * Then recreate the JDate object from new Georgian object.
     * \@todo add implementation
     * @param {?} sec An integer between 0 and 59, representing the seconds.
     * @param {?=} ms Optional. A number between 0 and 999, representing the milliseconds.
     * @return {?}
     */
    function (sec, ms) {
        this._gDate.setUTCSeconds(sec, ms);
        this._createFromDate(this._gDate);
        return this.getTime();
    };
    /**
     * @return name of the day of the week in persian.
     * @example دوشنبه
     */
    /**
     * \@example دوشنبه
     * @return {?} name of the day of the week in persian.
     */
    JDate.prototype.getNameOfTheDay = /**
     * \@example دوشنبه
     * @return {?} name of the day of the week in persian.
     */
    function () {
        return JDate.DAYS_OF_WEEK[this.getDay()];
    };
    /**
     * @return name of the month in persian.
     * @example مهر
     */
    /**
     * \@example مهر
     * @return {?} name of the month in persian.
     */
    JDate.prototype.getNameOfTheMonth = /**
     * \@example مهر
     * @return {?} name of the month in persian.
     */
    function () {
        return JDate.FA_MONTHS[this.getMonth()];
    };
    /**
     * returns the date portion of a Date object in human readable form in Persian.
     * @return a string following this pattern: "nameOfTheDay nameOfTheMonth dayNumber fullYear".
     * @example پنج‌شنبه اسفند 30 1375
     */
    /**
     * returns the date portion of a Date object in human readable form in Persian.
     * \@example پنج‌شنبه اسفند 30 1375
     * @return {?} a string following this pattern: "nameOfTheDay nameOfTheMonth dayNumber fullYear".
     */
    JDate.prototype.toDateString = /**
     * returns the date portion of a Date object in human readable form in Persian.
     * \@example پنج‌شنبه اسفند 30 1375
     * @return {?} a string following this pattern: "nameOfTheDay nameOfTheMonth dayNumber fullYear".
     */
    function () {
        return this.getNameOfTheDay() + " " + this.getNameOfTheMonth() + " " + this.getDate() + " " + this.getFullYear();
    };
    /**
     * Returns time marker of object time. all hour numbers lesser than 12 are before noon and all greater than 12 are after noon.
     * @param shortVersion controls output. if be true, output will be in short format like: ب.ظ if be false, output will be in complete format like: بعد از ظهر
     * @return time marker for showing if time is before noon or after it
     */
    /**
     * Returns time marker of object time. all hour numbers lesser than 12 are before noon and all greater than 12 are after noon.
     * @param {?=} shortVersion controls output. if be true, output will be in short format like: ب.ظ if be false, output will be in complete format like: بعد از ظهر
     * @return {?} time marker for showing if time is before noon or after it
     */
    JDate.prototype.getTimeMarker = /**
     * Returns time marker of object time. all hour numbers lesser than 12 are before noon and all greater than 12 are after noon.
     * @param {?=} shortVersion controls output. if be true, output will be in short format like: ب.ظ if be false, output will be in complete format like: بعد از ظهر
     * @return {?} time marker for showing if time is before noon or after it
     */
    function (shortVersion) {
        if (shortVersion === void 0) { shortVersion = false; }
        if (this.getHours() < 12) {
            return shortVersion ? JDate.SHORT_BEFORE_NOON : JDate.COMPLETE_BEFORE_NOON;
        }
        return shortVersion ? JDate.SHORT_AFTER_NOON : JDate.COMPLETE_AFTER_NOON;
    };
    /**
     * Replace patterns of date formatting with corresponding strings from JDate object values.
     * In bi-character pattern parts, missed digits will fill with zero.
     * @param pattern a pattern string with replaceable parts:
     *
     *        yyyy -> Year number in 4-digit representation. ex: 1397
     *
     *        yy -> Year number in 2-digit representation. ex: 97
     *
     *        mmmm -> Name of the month in English representation. ex: Esfand
     *
     *        mmm -> Name of the month in Persian representation. ex: اسفند
     *
     *        mm -> 2-digit number of the month starting from 1
     *
     *        m -> non zero-padding number of the month starting from 1
     *
     *        dddd -> Name of the day in the week in English representation. ex: Shanbe
     *
     *        ddd -> Name of the day in the week id Persian representation. ex: شنبه
     *
     *        dd -> 2-digit number of the day in the month starting from 1
     *
     *        d -> non zero-padding number of the day in the month starting from 1
     *
     * @return A formatted string that all Date pattern parts has been replaced. Other characters of the pattern will left unchanged.
     */
    /**
     * Replace patterns of date formatting with corresponding strings from JDate object values.
     * In bi-character pattern parts, missed digits will fill with zero.
     * @private
     * @param {?} pattern a pattern string with replaceable parts:
     *
     *        yyyy -> Year number in 4-digit representation. ex: 1397
     *
     *        yy -> Year number in 2-digit representation. ex: 97
     *
     *        mmmm -> Name of the month in English representation. ex: Esfand
     *
     *        mmm -> Name of the month in Persian representation. ex: اسفند
     *
     *        mm -> 2-digit number of the month starting from 1
     *
     *        m -> non zero-padding number of the month starting from 1
     *
     *        dddd -> Name of the day in the week in English representation. ex: Shanbe
     *
     *        ddd -> Name of the day in the week id Persian representation. ex: شنبه
     *
     *        dd -> 2-digit number of the day in the month starting from 1
     *
     *        d -> non zero-padding number of the day in the month starting from 1
     *
     * @return {?} A formatted string that all Date pattern parts has been replaced. Other characters of the pattern will left unchanged.
     */
    JDate.prototype._format_date = /**
     * Replace patterns of date formatting with corresponding strings from JDate object values.
     * In bi-character pattern parts, missed digits will fill with zero.
     * @private
     * @param {?} pattern a pattern string with replaceable parts:
     *
     *        yyyy -> Year number in 4-digit representation. ex: 1397
     *
     *        yy -> Year number in 2-digit representation. ex: 97
     *
     *        mmmm -> Name of the month in English representation. ex: Esfand
     *
     *        mmm -> Name of the month in Persian representation. ex: اسفند
     *
     *        mm -> 2-digit number of the month starting from 1
     *
     *        m -> non zero-padding number of the month starting from 1
     *
     *        dddd -> Name of the day in the week in English representation. ex: Shanbe
     *
     *        ddd -> Name of the day in the week id Persian representation. ex: شنبه
     *
     *        dd -> 2-digit number of the day in the month starting from 1
     *
     *        d -> non zero-padding number of the day in the month starting from 1
     *
     * @return {?} A formatted string that all Date pattern parts has been replaced. Other characters of the pattern will left unchanged.
     */
    function (pattern) {
        return pattern.replace(/yyyy/g, JDate.zeroPadding(this.getFullYear(), 4))
            .replace(/\byy\b/g, (this.getFullYear() % 100).toString())
            .replace(/\bmmmm\b/g, JDate.EN_MONTHS[this.getMonth()])
            .replace(/\bmmm\b/g, JDate.FA_MONTHS[this.getMonth()])
            .replace(/\bmm\b/g, JDate.zeroPadding(this.getMonth() + 1, 2))
            .replace(/\bm\b/g, (this.getMonth() + 1).toString())
            .replace(/\bdddd\b/g, JDate.EN_DAYS_OF_WEEK[this.getDay()])
            .replace(/\bddd\b/g, JDate.DAYS_OF_WEEK[this.getDay()])
            .replace(/\bdd\b/g, JDate.zeroPadding(this.getDate(), 2))
            .replace(/\bd\b/g, this.getDate().toString());
    };
    /**
     * Replace patterns of time formatting with corresponding strings from JDate object values.
     *
     * In bi-character pattern parts, missed digits will fill with zero.
     * @param pattern a pattern string with replaceable parts:
     *
     *        HH -> 2-digit form of hour number in 24-hour clock format.
     *
     *        H -> non zero-padding form of hour number in 24-hour clock format.
     *
     *        hh -> 2-digit form of hour number in 12-hour clock format.
     *
     *        h -> non zero-padding form of hour number in 12-hour clock format.
     *
     *        H -> non zero-padding form of hour number in 12-hour clock format.
     *
     *        MM -> 2-digit form of minutes number.
     *
     *        M -> non zero-padding form of minutes number
     *
     *        SS -> 2-digit form of seconds number.
     *
     *        S -> non zero-padding form of seconds number.
     *
     *        l -> number of milliseconds
     *
     *        T -> Time marker in full format like: قبل از ظهر
     *
     *        t -> Time marker in short format like: ق.ظ
     */
    /**
     * Replace patterns of time formatting with corresponding strings from JDate object values.
     *
     * In bi-character pattern parts, missed digits will fill with zero.
     * @private
     * @param {?} pattern a pattern string with replaceable parts:
     *
     *        HH -> 2-digit form of hour number in 24-hour clock format.
     *
     *        H -> non zero-padding form of hour number in 24-hour clock format.
     *
     *        hh -> 2-digit form of hour number in 12-hour clock format.
     *
     *        h -> non zero-padding form of hour number in 12-hour clock format.
     *
     *        H -> non zero-padding form of hour number in 12-hour clock format.
     *
     *        MM -> 2-digit form of minutes number.
     *
     *        M -> non zero-padding form of minutes number
     *
     *        SS -> 2-digit form of seconds number.
     *
     *        S -> non zero-padding form of seconds number.
     *
     *        l -> number of milliseconds
     *
     *        T -> Time marker in full format like: قبل از ظهر
     *
     *        t -> Time marker in short format like: ق.ظ
     * @return {?}
     */
    JDate.prototype._format_time = /**
     * Replace patterns of time formatting with corresponding strings from JDate object values.
     *
     * In bi-character pattern parts, missed digits will fill with zero.
     * @private
     * @param {?} pattern a pattern string with replaceable parts:
     *
     *        HH -> 2-digit form of hour number in 24-hour clock format.
     *
     *        H -> non zero-padding form of hour number in 24-hour clock format.
     *
     *        hh -> 2-digit form of hour number in 12-hour clock format.
     *
     *        h -> non zero-padding form of hour number in 12-hour clock format.
     *
     *        H -> non zero-padding form of hour number in 12-hour clock format.
     *
     *        MM -> 2-digit form of minutes number.
     *
     *        M -> non zero-padding form of minutes number
     *
     *        SS -> 2-digit form of seconds number.
     *
     *        S -> non zero-padding form of seconds number.
     *
     *        l -> number of milliseconds
     *
     *        T -> Time marker in full format like: قبل از ظهر
     *
     *        t -> Time marker in short format like: ق.ظ
     * @return {?}
     */
    function (pattern) {
        return pattern.replace(/\bHH\b/g, JDate.zeroPadding(this.getHours(), 2))
            .replace(/\bH\b/g, this.getHours().toString())
            .replace(/\bhh\b/g, JDate.zeroPadding(this.getHours12hourClock(), 2))
            .replace(/\bh\b/g, this.getHours12hourClock().toString())
            .replace(/\bMM\b/g, JDate.zeroPadding(this.getMinutes(), 2))
            .replace(/\bM\b/g, this.getMinutes().toString())
            .replace(/\bSS\b/g, JDate.zeroPadding(this.getSeconds(), 2))
            .replace(/\bS\b/g, this.getSeconds().toString())
            .replace(/\bl\b/g, this.getMilliseconds().toString())
            .replace(/\bT\b/g, this.getTimeMarker(false))
            .replace(/\bt\b/g, this.getTimeMarker(true));
    };
    /**
     * This method format date and time stored in the JDate object according to the entered pattern.
     *
     * Only masks will replace and all other characters will be unchanged after formatting.
     *
     * You can use masks several times in a pattern but be careful because if some of masks written immediately, they create new masks with
     * different meaning. It's better to always have some splitter characters between different masks.
     * @param pattern a string containing zero or more formatting mask.
     *
     * Masks:
     *
     *        yyyy -> Year number in 4-digit representation. Leading zero for years lesser than 1000 ex: 1397
     *
     *        yy -> Year number in 2-digit representation without Leading zeros. ex: 97
     *
     *        mmmm -> Name of the month in English representation. ex: Esfand
     *
     *        mmm -> Name of the month in Persian representation. ex: اسفند
     *
     *        mm -> 2-digit number of the month starting from 1. Leading zero for single-digit months.
     *
     *        m -> number of the month starting from 1 without Leading zeros.
     *
     *        dddd -> Name of the day in the week in English representation. ex: Shanbe
     *
     *        ddd -> Name of the day in the week id Persian representation. ex: شنبه
     *
     *        dd -> 2-digit number of the day in the month starting from 1. Leading zero for single-digit days.
     *
     *        d -> number of the day in the month starting from 1 without Leading zeros.
     *
     *        HH -> 2-digit form of hour number in 24-hour clock format. Leading zero for single-digit hours.
     *
     *        H -> non zero-padding form of hour number in 24-hour clock format without Leading zeros.
     *
     *        hh -> 2-digit form of hour number in 12-hour clock format. Leading zero for single-digit hours.
     *
     *        H -> non zero-padding form of hour number in 12-hour clock format without Leading zeros.
     *
     *        MM -> 2-digit form of minutes number. Leading zero for single-digit minutes.
     *
     *        M -> non zero-padding form of minutes number without Leading zeros.
     *
     *        SS -> 2-digit form of seconds number. Leading zero for single-digit seconds.
     *
     *        S -> non zero-padding form of seconds number without Leading zeros.
     *
     *        l -> number of milliseconds without Leading zeros.
     *
     *        T -> Time marker in full format like: قبل از ظهر
     *
     *        t -> Time marker in short format like: ق.ظ
     *@return formatted dateTime string.
     */
    /**
     * This method format date and time stored in the JDate object according to the entered pattern.
     *
     * Only masks will replace and all other characters will be unchanged after formatting.
     *
     * You can use masks several times in a pattern but be careful because if some of masks written immediately, they create new masks with
     * different meaning. It's better to always have some splitter characters between different masks.
     * @param {?} pattern a string containing zero or more formatting mask.
     *
     * Masks:
     *
     *        yyyy -> Year number in 4-digit representation. Leading zero for years lesser than 1000 ex: 1397
     *
     *        yy -> Year number in 2-digit representation without Leading zeros. ex: 97
     *
     *        mmmm -> Name of the month in English representation. ex: Esfand
     *
     *        mmm -> Name of the month in Persian representation. ex: اسفند
     *
     *        mm -> 2-digit number of the month starting from 1. Leading zero for single-digit months.
     *
     *        m -> number of the month starting from 1 without Leading zeros.
     *
     *        dddd -> Name of the day in the week in English representation. ex: Shanbe
     *
     *        ddd -> Name of the day in the week id Persian representation. ex: شنبه
     *
     *        dd -> 2-digit number of the day in the month starting from 1. Leading zero for single-digit days.
     *
     *        d -> number of the day in the month starting from 1 without Leading zeros.
     *
     *        HH -> 2-digit form of hour number in 24-hour clock format. Leading zero for single-digit hours.
     *
     *        H -> non zero-padding form of hour number in 24-hour clock format without Leading zeros.
     *
     *        hh -> 2-digit form of hour number in 12-hour clock format. Leading zero for single-digit hours.
     *
     *        H -> non zero-padding form of hour number in 12-hour clock format without Leading zeros.
     *
     *        MM -> 2-digit form of minutes number. Leading zero for single-digit minutes.
     *
     *        M -> non zero-padding form of minutes number without Leading zeros.
     *
     *        SS -> 2-digit form of seconds number. Leading zero for single-digit seconds.
     *
     *        S -> non zero-padding form of seconds number without Leading zeros.
     *
     *        l -> number of milliseconds without Leading zeros.
     *
     *        T -> Time marker in full format like: قبل از ظهر
     *
     *        t -> Time marker in short format like: ق.ظ
     * @return {?} formatted dateTime string.
     */
    JDate.prototype.format = /**
     * This method format date and time stored in the JDate object according to the entered pattern.
     *
     * Only masks will replace and all other characters will be unchanged after formatting.
     *
     * You can use masks several times in a pattern but be careful because if some of masks written immediately, they create new masks with
     * different meaning. It's better to always have some splitter characters between different masks.
     * @param {?} pattern a string containing zero or more formatting mask.
     *
     * Masks:
     *
     *        yyyy -> Year number in 4-digit representation. Leading zero for years lesser than 1000 ex: 1397
     *
     *        yy -> Year number in 2-digit representation without Leading zeros. ex: 97
     *
     *        mmmm -> Name of the month in English representation. ex: Esfand
     *
     *        mmm -> Name of the month in Persian representation. ex: اسفند
     *
     *        mm -> 2-digit number of the month starting from 1. Leading zero for single-digit months.
     *
     *        m -> number of the month starting from 1 without Leading zeros.
     *
     *        dddd -> Name of the day in the week in English representation. ex: Shanbe
     *
     *        ddd -> Name of the day in the week id Persian representation. ex: شنبه
     *
     *        dd -> 2-digit number of the day in the month starting from 1. Leading zero for single-digit days.
     *
     *        d -> number of the day in the month starting from 1 without Leading zeros.
     *
     *        HH -> 2-digit form of hour number in 24-hour clock format. Leading zero for single-digit hours.
     *
     *        H -> non zero-padding form of hour number in 24-hour clock format without Leading zeros.
     *
     *        hh -> 2-digit form of hour number in 12-hour clock format. Leading zero for single-digit hours.
     *
     *        H -> non zero-padding form of hour number in 12-hour clock format without Leading zeros.
     *
     *        MM -> 2-digit form of minutes number. Leading zero for single-digit minutes.
     *
     *        M -> non zero-padding form of minutes number without Leading zeros.
     *
     *        SS -> 2-digit form of seconds number. Leading zero for single-digit seconds.
     *
     *        S -> non zero-padding form of seconds number without Leading zeros.
     *
     *        l -> number of milliseconds without Leading zeros.
     *
     *        T -> Time marker in full format like: قبل از ظهر
     *
     *        t -> Time marker in short format like: ق.ظ
     * @return {?} formatted dateTime string.
     */
    function (pattern) {
        return this._format_time(this._format_date(pattern));
    };
    /**
     * @return a string in simplified extended ISO format (ISO 8601), which is always 24 or 27 characters long (yyyy-mm-ddTHH:MM:SS.lZ).
     *        Be careful because that T in the middle of the pattern is not a format Mask and is a simple character.
     */
    /**
     * @return {?} a string in simplified extended ISO format (ISO 8601), which is always 24 or 27 characters long (yyyy-mm-ddTHH:MM:SS.lZ).
     *        Be careful because that T in the middle of the pattern is not a format Mask and is a simple character.
     */
    JDate.prototype.toISOString = /**
     * @return {?} a string in simplified extended ISO format (ISO 8601), which is always 24 or 27 characters long (yyyy-mm-ddTHH:MM:SS.lZ).
     *        Be careful because that T in the middle of the pattern is not a format Mask and is a simple character.
     */
    function () {
        return this.format('yyyy-mm-dd') + 'T' + this.format('HH:MM:SS.l') + 'Z';
    };
    /**
     * @return a string representation of the Date object.
     * [see toString method]{@link toString}
     * @param key
     */
    /**
     * @param {?=} key
     * @return {?} a string representation of the Date object.
     * [see toString method]{\@link toString}
     */
    JDate.prototype.toJSON = /**
     * @param {?=} key
     * @return {?} a string representation of the Date object.
     * [see toString method]{\@link toString}
     */
    function (key) {
        return this.toString();
    };
    /**
     * returns formatted date with following pattern: 'ddd mmm d yyyy HH:MM:SS'
     */
    /**
     * returns formatted date with following pattern: 'ddd mmm d yyyy HH:MM:SS'
     * @return {?}
     */
    JDate.prototype.toString = /**
     * returns formatted date with following pattern: 'ddd mmm d yyyy HH:MM:SS'
     * @return {?}
     */
    function () {
        return this.format('ddd mmm d yyyy HH:MM:SS');
    };
    /**
     * @param {?=} locales
     * @param {?=} options
     * @return {?}
     */
    JDate.prototype.toLocaleDateString = /**
     * @param {?=} locales
     * @param {?=} options
     * @return {?}
     */
    function (locales, options) {
        return this._gDate.toLocaleDateString(locales, options);
    };
    /**
     * @param {?=} locales
     * @param {?=} options
     * @return {?}
     */
    JDate.prototype.toLocaleTimeString = /**
     * @param {?=} locales
     * @param {?=} options
     * @return {?}
     */
    function (locales, options) {
        return this._gDate.toLocaleTimeString(locales, options);
    };
    /**
     * @return toTimeString of Georgian date
     *
     * [For more information see javascript Date object documentation about this method]{@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/toTimeString}
     */
    /**
     * @return {?} toTimeString of Georgian date
     *
     * [For more information see javascript Date object documentation about this method]{\@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/toTimeString}
     */
    JDate.prototype.toTimeString = /**
     * @return {?} toTimeString of Georgian date
     *
     * [For more information see javascript Date object documentation about this method]{\@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/toTimeString}
     */
    function () {
        return this._gDate.toTimeString();
    };
    /**
     * @return toUTCString of Georgian date.
     *
     * [For more information see javascript Date object documentation about this method]{@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/toUTCString}
     * @todo add implementation
     */
    /**
     * \@todo add implementation
     * @return {?} toUTCString of Georgian date.
     *
     * [For more information see javascript Date object documentation about this method]{\@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/toUTCString}
     */
    JDate.prototype.toUTCString = /**
     * \@todo add implementation
     * @return {?} toUTCString of Georgian date.
     *
     * [For more information see javascript Date object documentation about this method]{\@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/toUTCString}
     */
    function () {
        return this._gDate.toUTCString();
    };
    /**
     * Similar to the getTime method.
     *
     * [For more information also see getTime method]{@link getTime}
     */
    /**
     * Similar to the getTime method.
     *
     * [For more information also see getTime method]{\@link getTime}
     * @return {?}
     */
    JDate.prototype.valueOf = /**
     * Similar to the getTime method.
     *
     * [For more information also see getTime method]{\@link getTime}
     * @return {?}
     */
    function () {
        return this.getTime();
    };
    /**
     * @param {?} incValue
     * @return {?}
     */
    JDate.prototype.addMonth = /**
     * @param {?} incValue
     * @return {?}
     */
    function (incValue) {
        // let newMonth: number = (this.getMonth() + incValue) % 11;
        // let passedYears: number = this.getFullYear() + newMonth / 11;
        // let newYear: number = newMonth === 0 ? ;
        // this.setFullYear(newYear);
        // this.setMonth(newMonth % 11);
    };
    JDate.EN_MONTHS = ['Farvardin', 'Ordibehesht', 'Khordad', 'Tir', 'Mordad', 'Shahrivar', 'Mehr', 'Aban', 'Azar', 'Dey', 'Behman', 'Esfand'];
    JDate.FA_MONTHS = ['فروردین', 'اردیبهشت', 'خرداد', 'تیر', 'مرداد', 'شهریور', 'مهر', 'آبان', 'آذر', 'دی', 'بهمن', 'اسفند'];
    JDate.DAYS_OF_WEEK = ['جمعه', 'شنبه', 'یکشنبه', 'دوشنبه', 'سه‌شنبه', 'چهارشنبه', 'پنج‌شنبه'];
    JDate.EN_DAYS_OF_WEEK = ['Jom\'e', 'Shanbe', 'Yekshanbe', 'Doshanbe', 'Seshanbe', 'Cheharshanbe', 'Panjshanbe'];
    JDate.COMPLETE_BEFORE_NOON = 'قبل از ظهر';
    JDate.COMPLETE_AFTER_NOON = 'بعد از ظهر';
    JDate.SHORT_BEFORE_NOON = 'ق.ظ';
    JDate.SHORT_AFTER_NOON = 'ب.ظ';
    return JDate;
}());
export { JDate };
if (false) {
    /**
     * @type {?}
     * @private
     */
    JDate.EN_MONTHS;
    /**
     * @type {?}
     * @private
     */
    JDate.FA_MONTHS;
    /**
     * @type {?}
     * @private
     */
    JDate.DAYS_OF_WEEK;
    /**
     * @type {?}
     * @private
     */
    JDate.EN_DAYS_OF_WEEK;
    /**
     * @type {?}
     * @private
     */
    JDate.COMPLETE_BEFORE_NOON;
    /**
     * @type {?}
     * @private
     */
    JDate.COMPLETE_AFTER_NOON;
    /**
     * @type {?}
     * @private
     */
    JDate.SHORT_BEFORE_NOON;
    /**
     * @type {?}
     * @private
     */
    JDate.SHORT_AFTER_NOON;
    /**
     * @type {?}
     * @private
     */
    JDate.prototype._gDate;
    /**
     * @type {?}
     * @private
     */
    JDate.prototype._jYear;
    /**
     * @type {?}
     * @private
     */
    JDate.prototype._jMonth;
    /**
     * @type {?}
     * @private
     */
    JDate.prototype._jDay;
    /**
     * @type {?}
     * @private
     */
    JDate.prototype._calculator;
}
//# sourceMappingURL=data:application/json;base64,