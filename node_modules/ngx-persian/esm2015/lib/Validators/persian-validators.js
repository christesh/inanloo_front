/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { PersianNumberService } from '../Services/persian-number.service';
import { PersianLetterService } from '../Services/persian-letter.service';
/**
 * Reactive form validator that checks form control value contains only persian numbers.
 * @param {?=} persianNumberService
 * @return {?}
 */
export function persianNumbersValidator(persianNumberService = new PersianNumberService()) {
    return (/**
     * @param {?} control
     * @return {?}
     */
    (control) => {
        return persianNumberService.isPersian(control.value) ? null : { 'persianNumberValidation': control.value };
    });
}
/**
 * Reactive form validator that checks form control value contains only persian letters and allowed characters in the options parameter.
 * @param {?=} options see documents of isPersian method of the PersianLetterService for more info about options.
 * @param {?=} persianLetterService
 * @return {?}
 */
export function persianLettersValidator(options = {
    persianDigits: false,
    whitespaces: false,
    symbols: false,
    enDigits: false
}, persianLetterService = new PersianLetterService()) {
    return (/**
     * @param {?} control
     * @return {?}
     */
    (control) => {
        return persianLetterService.isPersian(control.value, options) ? null : { 'persianLetterValidation': control.value };
    });
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicGVyc2lhbi12YWxpZGF0b3JzLmpzIiwic291cmNlUm9vdCI6Im5nOi8vbmd4LXBlcnNpYW4vIiwic291cmNlcyI6WyJsaWIvVmFsaWRhdG9ycy9wZXJzaWFuLXZhbGlkYXRvcnMudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7OztBQUNBLE9BQU8sRUFBQyxvQkFBb0IsRUFBQyxNQUFNLG9DQUFvQyxDQUFDO0FBQ3hFLE9BQU8sRUFBWSxvQkFBb0IsRUFBQyxNQUFNLG9DQUFvQyxDQUFDOzs7Ozs7QUFNbkYsTUFBTSxVQUFVLHVCQUF1QixDQUFDLHVCQUE2QyxJQUFJLG9CQUFvQixFQUFFO0lBQzdHOzs7O0lBQU8sQ0FBQyxPQUF3QixFQUEyQixFQUFFO1FBQzNELE9BQU8sb0JBQW9CLENBQUMsU0FBUyxDQUFDLE9BQU8sQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxFQUFDLHlCQUF5QixFQUFFLE9BQU8sQ0FBQyxLQUFLLEVBQUMsQ0FBQztJQUMzRyxDQUFDLEVBQUM7QUFDSixDQUFDOzs7Ozs7O0FBT0QsTUFBTSxVQUFVLHVCQUF1QixDQUFDLFVBQXFCO0lBQ0QsYUFBYSxFQUFFLEtBQUs7SUFDcEIsV0FBVyxFQUFFLEtBQUs7SUFDbEIsT0FBTyxFQUFFLEtBQUs7SUFDZCxRQUFRLEVBQUUsS0FBSztDQUFDLEVBQ3BDLHVCQUE2QyxJQUFJLG9CQUFvQixFQUFFO0lBQzdHOzs7O0lBQU8sQ0FBQyxPQUF3QixFQUEyQixFQUFFO1FBQzNELE9BQU8sb0JBQW9CLENBQUMsU0FBUyxDQUFDLE9BQU8sQ0FBQyxLQUFLLEVBQUUsT0FBTyxDQUFDLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsRUFBQyx5QkFBeUIsRUFBRSxPQUFPLENBQUMsS0FBSyxFQUFDLENBQUM7SUFDcEgsQ0FBQyxFQUFDO0FBQ0osQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7QWJzdHJhY3RDb250cm9sLCBWYWxpZGF0aW9uRXJyb3JzLCBWYWxpZGF0b3JGbn0gZnJvbSAnQGFuZ3VsYXIvZm9ybXMnO1xuaW1wb3J0IHtQZXJzaWFuTnVtYmVyU2VydmljZX0gZnJvbSAnLi4vU2VydmljZXMvcGVyc2lhbi1udW1iZXIuc2VydmljZSc7XG5pbXBvcnQge1BMT3B0aW9ucywgUGVyc2lhbkxldHRlclNlcnZpY2V9IGZyb20gJy4uL1NlcnZpY2VzL3BlcnNpYW4tbGV0dGVyLnNlcnZpY2UnO1xuXG4vKipcbiAqIFJlYWN0aXZlIGZvcm0gdmFsaWRhdG9yIHRoYXQgY2hlY2tzIGZvcm0gY29udHJvbCB2YWx1ZSBjb250YWlucyBvbmx5IHBlcnNpYW4gbnVtYmVycy5cbiAqIEBwYXJhbSBwZXJzaWFuTnVtYmVyU2VydmljZVxuICovXG5leHBvcnQgZnVuY3Rpb24gcGVyc2lhbk51bWJlcnNWYWxpZGF0b3IocGVyc2lhbk51bWJlclNlcnZpY2U6IFBlcnNpYW5OdW1iZXJTZXJ2aWNlID0gbmV3IFBlcnNpYW5OdW1iZXJTZXJ2aWNlKCkpOiBWYWxpZGF0b3JGbiB7XG4gIHJldHVybiAoY29udHJvbDogQWJzdHJhY3RDb250cm9sKTogVmFsaWRhdGlvbkVycm9ycyB8IG51bGwgPT4ge1xuICAgIHJldHVybiBwZXJzaWFuTnVtYmVyU2VydmljZS5pc1BlcnNpYW4oY29udHJvbC52YWx1ZSkgPyBudWxsIDogeydwZXJzaWFuTnVtYmVyVmFsaWRhdGlvbic6IGNvbnRyb2wudmFsdWV9O1xuICB9O1xufVxuXG4vKipcbiAqIFJlYWN0aXZlIGZvcm0gdmFsaWRhdG9yIHRoYXQgY2hlY2tzIGZvcm0gY29udHJvbCB2YWx1ZSBjb250YWlucyBvbmx5IHBlcnNpYW4gbGV0dGVycyBhbmQgYWxsb3dlZCBjaGFyYWN0ZXJzIGluIHRoZSBvcHRpb25zIHBhcmFtZXRlci5cbiAqIEBwYXJhbSBvcHRpb25zIHNlZSBkb2N1bWVudHMgb2YgaXNQZXJzaWFuIG1ldGhvZCBvZiB0aGUgUGVyc2lhbkxldHRlclNlcnZpY2UgZm9yIG1vcmUgaW5mbyBhYm91dCBvcHRpb25zLlxuICogQHBhcmFtIHBlcnNpYW5MZXR0ZXJTZXJ2aWNlXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBwZXJzaWFuTGV0dGVyc1ZhbGlkYXRvcihvcHRpb25zOiBQTE9wdGlvbnMgPSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBwZXJzaWFuRGlnaXRzOiBmYWxzZSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHdoaXRlc3BhY2VzOiBmYWxzZSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHN5bWJvbHM6IGZhbHNlLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZW5EaWdpdHM6IGZhbHNlfSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBwZXJzaWFuTGV0dGVyU2VydmljZTogUGVyc2lhbkxldHRlclNlcnZpY2UgPSBuZXcgUGVyc2lhbkxldHRlclNlcnZpY2UoKSk6IFZhbGlkYXRvckZuIHtcbiAgcmV0dXJuIChjb250cm9sOiBBYnN0cmFjdENvbnRyb2wpOiBWYWxpZGF0aW9uRXJyb3JzIHwgbnVsbCA9PiB7XG4gICAgcmV0dXJuIHBlcnNpYW5MZXR0ZXJTZXJ2aWNlLmlzUGVyc2lhbihjb250cm9sLnZhbHVlLCBvcHRpb25zKSA/IG51bGwgOiB7J3BlcnNpYW5MZXR0ZXJWYWxpZGF0aW9uJzogY29udHJvbC52YWx1ZX07XG4gIH07XG59XG4iXX0=