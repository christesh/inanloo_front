/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Injectable } from '@angular/core';
import { InvalidServiceInputError } from './InvalidServiceInput.error';
import * as i0 from "@angular/core";
export class PersianNumberService {
    /**
     * Checks if input value contains any persian number or not.
     * @param {?} value
     * @return {?} true if input value contains any persian number. false otherwise.
     */
    containsPersian(value) {
        if (!value) {
            return false;
        }
        // language=JSRegexp
        /** @type {?} */
        const persianRegex = new RegExp(`[${PersianNumberService.persianNumberPattern}]`);
        return persianRegex.test(value);
    }
    /**
     * splits input value by persian letters and then returns length of matched array.
     * @private
     * @param {?} value
     * @return {?} 0 if input value has no persian letter, numbers of persian letters in the input value otherwise.
     */
    static _getMatchedPatternLength(value) {
        // language=JSRegexp
        /** @type {?} */
        const matchResult = value.match(new RegExp(`[${PersianNumberService.persianNumberPattern}]`, 'g'));
        return matchResult ? matchResult.length : 0;
    }
    /**
     * Checks if input value contains only persian letters.
     * @param {?} value
     * @return {?}
     */
    isPersian(value) {
        if (!value) {
            return false;
        }
        return value.length === PersianNumberService._getMatchedPatternLength(value);
    }
    /**
     * Converts arabic numbers to the persian ones.
     * @param {?} value
     * @return {?}
     */
    arabicToPersian(value) {
        return value.replace(/٤/g, PersianNumberService.persianNumbersTable[4])
            .replace(/٥/g, PersianNumberService.persianNumbersTable[5])
            .replace(/٦/g, PersianNumberService.persianNumbersTable[6]);
    }
    /**
     * Converts all arabic and english numbers to the persian numbers.
     * @param {?} value
     * @return {?}
     */
    toPersian(value) {
        if (value === undefined || value === null) {
            throw new InvalidServiceInputError();
        }
        value = value.toString();
        value = this.arabicToPersian(value);
        /** @type {?} */
        let regex;
        for (let i = 0; i < PersianNumberService.persianNumbersTable.length; i++) {
            // language=JSRegexp
            regex = new RegExp(`[${PersianNumberService.englishNumbersTable[i]}]`, 'g');
            value = value.replace(regex, PersianNumberService.persianNumbersTable[i]);
        }
        return value;
    }
    /**
     * Convert persian numbers in input value to the english numbers.
     * @param {?} value
     * @return {?}
     */
    toEnglish(value) {
        if (value === undefined || value === null) {
            throw new InvalidServiceInputError();
        }
        /** @type {?} */
        let regex;
        for (let i = 0; i < PersianNumberService.englishNumbersTable.length; i++) {
            // language=JSRegexp
            regex = new RegExp(`[${PersianNumberService.persianNumbersTable[i]}]`, 'g');
            value = value.replace(regex, PersianNumberService.englishNumbersTable[i]);
        }
        return value;
    }
}
PersianNumberService.persianNumberPattern = '\u06F0-\u06F9';
PersianNumberService.persianNumbersTable = ['\u06F0', '\u06F1', '\u06F2', '\u06F3', '\u06F4', '\u06F5', '\u06F6', '\u06F7', '\u06F8', '\u06F9'];
PersianNumberService.englishNumbersTable = ['0', '1', '2', '3', '4', '5', '6', '7', '8', '9'];
PersianNumberService.decorators = [
    { type: Injectable, args: [{
                providedIn: 'root'
            },] }
];
/** @nocollapse */ PersianNumberService.ngInjectableDef = i0.ɵɵdefineInjectable({ factory: function PersianNumberService_Factory() { return new PersianNumberService(); }, token: PersianNumberService, providedIn: "root" });
if (false) {
    /** @type {?} */
    PersianNumberService.persianNumberPattern;
    /**
     * @type {?}
     * @private
     */
    PersianNumberService.persianNumbersTable;
    /**
     * @type {?}
     * @private
     */
    PersianNumberService.englishNumbersTable;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicGVyc2lhbi1udW1iZXIuc2VydmljZS5qcyIsInNvdXJjZVJvb3QiOiJuZzovL25neC1wZXJzaWFuLyIsInNvdXJjZXMiOlsibGliL1NlcnZpY2VzL3BlcnNpYW4tbnVtYmVyLnNlcnZpY2UudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7OztBQUFBLE9BQU8sRUFBRSxVQUFVLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFFM0MsT0FBTyxFQUFDLHdCQUF3QixFQUFDLE1BQU0sNkJBQTZCLENBQUM7O0FBS3JFLE1BQU0sT0FBTyxvQkFBb0I7Ozs7OztJQVUvQixlQUFlLENBQUMsS0FBYTtRQUMzQixJQUFJLENBQUMsS0FBSyxFQUFFO1lBQUUsT0FBTyxLQUFLLENBQUM7U0FBRTs7O2NBRXZCLFlBQVksR0FBRyxJQUFJLE1BQU0sQ0FBQyxJQUFJLG9CQUFvQixDQUFDLG9CQUFvQixHQUFHLENBQUM7UUFDakYsT0FBTyxZQUFZLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUFDO0lBQ2xDLENBQUM7Ozs7Ozs7SUFPTyxNQUFNLENBQUMsd0JBQXdCLENBQUMsS0FBYTs7O2NBRTdDLFdBQVcsR0FBRyxLQUFLLENBQUMsS0FBSyxDQUFDLElBQUksTUFBTSxDQUFDLElBQUksb0JBQW9CLENBQUMsb0JBQW9CLEdBQUcsRUFBRSxHQUFHLENBQUMsQ0FBQztRQUNsRyxPQUFPLFdBQVcsQ0FBQyxDQUFDLENBQUMsV0FBVyxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO0lBQzlDLENBQUM7Ozs7OztJQU1ELFNBQVMsQ0FBQyxLQUFhO1FBQ3JCLElBQUksQ0FBQyxLQUFLLEVBQUU7WUFBQyxPQUFPLEtBQUssQ0FBQztTQUFFO1FBQzVCLE9BQU8sS0FBSyxDQUFDLE1BQU0sS0FBSyxvQkFBb0IsQ0FBQyx3QkFBd0IsQ0FBQyxLQUFLLENBQUMsQ0FBQztJQUMvRSxDQUFDOzs7Ozs7SUFNRCxlQUFlLENBQUMsS0FBYTtRQUMzQixPQUFPLEtBQUssQ0FBQyxPQUFPLENBQUMsSUFBSSxFQUFFLG9CQUFvQixDQUFDLG1CQUFtQixDQUFDLENBQUMsQ0FBQyxDQUFDO2FBQzFELE9BQU8sQ0FBQyxJQUFJLEVBQUUsb0JBQW9CLENBQUMsbUJBQW1CLENBQUMsQ0FBQyxDQUFDLENBQUM7YUFDMUQsT0FBTyxDQUFDLElBQUksRUFBRSxvQkFBb0IsQ0FBQyxtQkFBbUIsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO0lBQzFFLENBQUM7Ozs7OztJQU1ELFNBQVMsQ0FBQyxLQUFzQjtRQUM5QixJQUFJLEtBQUssS0FBSyxTQUFTLElBQUksS0FBSyxLQUFLLElBQUksRUFBRTtZQUFDLE1BQU0sSUFBSSx3QkFBd0IsRUFBRSxDQUFDO1NBQUU7UUFDbkYsS0FBSyxHQUFHLEtBQUssQ0FBQyxRQUFRLEVBQUUsQ0FBQztRQUN6QixLQUFLLEdBQUcsSUFBSSxDQUFDLGVBQWUsQ0FBQyxLQUFLLENBQUMsQ0FBQzs7WUFDaEMsS0FBYTtRQUNqQixLQUFLLElBQUksQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFDLEdBQUcsb0JBQW9CLENBQUMsbUJBQW1CLENBQUMsTUFBTSxFQUFFLENBQUMsRUFBRSxFQUFFO1lBQ3hFLG9CQUFvQjtZQUNwQixLQUFLLEdBQUcsSUFBSSxNQUFNLENBQUMsSUFBSSxvQkFBb0IsQ0FBQyxtQkFBbUIsQ0FBQyxDQUFDLENBQUMsR0FBRyxFQUFFLEdBQUcsQ0FBQyxDQUFDO1lBQzVFLEtBQUssR0FBRyxLQUFLLENBQUMsT0FBTyxDQUFDLEtBQUssRUFBRSxvQkFBb0IsQ0FBQyxtQkFBbUIsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO1NBQzNFO1FBQ0QsT0FBTyxLQUFLLENBQUM7SUFDZixDQUFDOzs7Ozs7SUFNRCxTQUFTLENBQUMsS0FBYTtRQUNyQixJQUFJLEtBQUssS0FBSyxTQUFTLElBQUksS0FBSyxLQUFLLElBQUksRUFBRTtZQUFFLE1BQU0sSUFBSSx3QkFBd0IsRUFBRSxDQUFDO1NBQUU7O1lBQ2hGLEtBQWE7UUFDakIsS0FBSyxJQUFJLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQyxHQUFHLG9CQUFvQixDQUFDLG1CQUFtQixDQUFDLE1BQU0sRUFBRSxDQUFDLEVBQUUsRUFBRTtZQUN4RSxvQkFBb0I7WUFDcEIsS0FBSyxHQUFHLElBQUksTUFBTSxDQUFDLElBQUksb0JBQW9CLENBQUMsbUJBQW1CLENBQUMsQ0FBQyxDQUFDLEdBQUcsRUFBRSxHQUFHLENBQUMsQ0FBQztZQUM1RSxLQUFLLEdBQUcsS0FBSyxDQUFDLE9BQU8sQ0FBQyxLQUFLLEVBQUUsb0JBQW9CLENBQUMsbUJBQW1CLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztTQUMzRTtRQUNELE9BQU8sS0FBSyxDQUFDO0lBQ2YsQ0FBQzs7QUE1RU0seUNBQW9CLEdBQUcsZUFBZSxDQUFDO0FBQy9CLHdDQUFtQixHQUFHLENBQUMsUUFBUSxFQUFFLFFBQVEsRUFBRSxRQUFRLEVBQUUsUUFBUSxFQUFFLFFBQVEsRUFBRSxRQUFRLEVBQUUsUUFBUSxFQUFFLFFBQVEsRUFBRSxRQUFRLEVBQUUsUUFBUSxDQUFDLENBQUM7QUFDM0gsd0NBQW1CLEdBQUcsQ0FBQyxHQUFHLEVBQUUsR0FBRyxFQUFFLEdBQUcsRUFBRSxHQUFHLEVBQUUsR0FBRyxFQUFFLEdBQUcsRUFBRSxHQUFHLEVBQUUsR0FBRyxFQUFFLEdBQUcsRUFBRSxHQUFHLENBQUMsQ0FBQzs7WUFOekYsVUFBVSxTQUFDO2dCQUNWLFVBQVUsRUFBRSxNQUFNO2FBQ25COzs7OztJQUVDLDBDQUE4Qzs7Ozs7SUFDOUMseUNBQTBJOzs7OztJQUMxSSx5Q0FBd0YiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBJbmplY3RhYmxlIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQge1BlcnNpYW5TZXJ2aWNlfSBmcm9tICcuL3BlcnNpYW4tc2VydmljZSc7XG5pbXBvcnQge0ludmFsaWRTZXJ2aWNlSW5wdXRFcnJvcn0gZnJvbSAnLi9JbnZhbGlkU2VydmljZUlucHV0LmVycm9yJztcblxuQEluamVjdGFibGUoe1xuICBwcm92aWRlZEluOiAncm9vdCdcbn0pXG5leHBvcnQgY2xhc3MgUGVyc2lhbk51bWJlclNlcnZpY2UgaW1wbGVtZW50cyBQZXJzaWFuU2VydmljZSB7XG4gIHN0YXRpYyBwZXJzaWFuTnVtYmVyUGF0dGVybiA9ICdcXHUwNkYwLVxcdTA2RjknO1xuICBwcml2YXRlIHN0YXRpYyBwZXJzaWFuTnVtYmVyc1RhYmxlID0gWydcXHUwNkYwJywgJ1xcdTA2RjEnLCAnXFx1MDZGMicsICdcXHUwNkYzJywgJ1xcdTA2RjQnLCAnXFx1MDZGNScsICdcXHUwNkY2JywgJ1xcdTA2RjcnLCAnXFx1MDZGOCcsICdcXHUwNkY5J107XG4gIHByaXZhdGUgc3RhdGljIGVuZ2xpc2hOdW1iZXJzVGFibGUgPSBbJzAnLCAnMScsICcyJywgJzMnLCAnNCcsICc1JywgJzYnLCAnNycsICc4JywgJzknXTtcblxuICAvKipcbiAgICogQ2hlY2tzIGlmIGlucHV0IHZhbHVlIGNvbnRhaW5zIGFueSBwZXJzaWFuIG51bWJlciBvciBub3QuXG4gICAqIEBwYXJhbSB2YWx1ZVxuICAgKiBAcmV0dXJuIHRydWUgaWYgaW5wdXQgdmFsdWUgY29udGFpbnMgYW55IHBlcnNpYW4gbnVtYmVyLiBmYWxzZSBvdGhlcndpc2UuXG4gICAqL1xuICBjb250YWluc1BlcnNpYW4odmFsdWU6IHN0cmluZyk6IGJvb2xlYW4ge1xuICAgIGlmICghdmFsdWUpIHsgcmV0dXJuIGZhbHNlOyB9XG4gICAgLy8gbGFuZ3VhZ2U9SlNSZWdleHBcbiAgICBjb25zdCBwZXJzaWFuUmVnZXggPSBuZXcgUmVnRXhwKGBbJHtQZXJzaWFuTnVtYmVyU2VydmljZS5wZXJzaWFuTnVtYmVyUGF0dGVybn1dYCk7XG4gICAgcmV0dXJuIHBlcnNpYW5SZWdleC50ZXN0KHZhbHVlKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBzcGxpdHMgaW5wdXQgdmFsdWUgYnkgcGVyc2lhbiBsZXR0ZXJzIGFuZCB0aGVuIHJldHVybnMgbGVuZ3RoIG9mIG1hdGNoZWQgYXJyYXkuXG4gICAqIEBwYXJhbSB2YWx1ZVxuICAgKiBAcmV0dXJuIDAgaWYgaW5wdXQgdmFsdWUgaGFzIG5vIHBlcnNpYW4gbGV0dGVyLCBudW1iZXJzIG9mIHBlcnNpYW4gbGV0dGVycyBpbiB0aGUgaW5wdXQgdmFsdWUgb3RoZXJ3aXNlLlxuICAgKi9cbiAgcHJpdmF0ZSBzdGF0aWMgX2dldE1hdGNoZWRQYXR0ZXJuTGVuZ3RoKHZhbHVlOiBzdHJpbmcpOiBudW1iZXIge1xuICAgIC8vIGxhbmd1YWdlPUpTUmVnZXhwXG4gICAgY29uc3QgbWF0Y2hSZXN1bHQgPSB2YWx1ZS5tYXRjaChuZXcgUmVnRXhwKGBbJHtQZXJzaWFuTnVtYmVyU2VydmljZS5wZXJzaWFuTnVtYmVyUGF0dGVybn1dYCwgJ2cnKSk7XG4gICAgcmV0dXJuIG1hdGNoUmVzdWx0ID8gbWF0Y2hSZXN1bHQubGVuZ3RoIDogMDtcbiAgfVxuXG4gIC8qKlxuICAgKiBDaGVja3MgaWYgaW5wdXQgdmFsdWUgY29udGFpbnMgb25seSBwZXJzaWFuIGxldHRlcnMuXG4gICAqIEBwYXJhbSB2YWx1ZVxuICAgKi9cbiAgaXNQZXJzaWFuKHZhbHVlOiBzdHJpbmcpOiBib29sZWFuIHtcbiAgICBpZiAoIXZhbHVlKSB7cmV0dXJuIGZhbHNlOyB9XG4gICAgcmV0dXJuIHZhbHVlLmxlbmd0aCA9PT0gUGVyc2lhbk51bWJlclNlcnZpY2UuX2dldE1hdGNoZWRQYXR0ZXJuTGVuZ3RoKHZhbHVlKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBDb252ZXJ0cyBhcmFiaWMgbnVtYmVycyB0byB0aGUgcGVyc2lhbiBvbmVzLlxuICAgKiBAcGFyYW0gdmFsdWVcbiAgICovXG4gIGFyYWJpY1RvUGVyc2lhbih2YWx1ZTogc3RyaW5nKTogc3RyaW5nIHtcbiAgICByZXR1cm4gdmFsdWUucmVwbGFjZSgv2aQvZywgUGVyc2lhbk51bWJlclNlcnZpY2UucGVyc2lhbk51bWJlcnNUYWJsZVs0XSlcbiAgICAgICAgICAgICAgICAucmVwbGFjZSgv2aUvZywgUGVyc2lhbk51bWJlclNlcnZpY2UucGVyc2lhbk51bWJlcnNUYWJsZVs1XSlcbiAgICAgICAgICAgICAgICAucmVwbGFjZSgv2aYvZywgUGVyc2lhbk51bWJlclNlcnZpY2UucGVyc2lhbk51bWJlcnNUYWJsZVs2XSk7XG4gIH1cblxuICAvKipcbiAgICogQ29udmVydHMgYWxsIGFyYWJpYyBhbmQgZW5nbGlzaCBudW1iZXJzIHRvIHRoZSBwZXJzaWFuIG51bWJlcnMuXG4gICAqIEBwYXJhbSB2YWx1ZVxuICAgKi9cbiAgdG9QZXJzaWFuKHZhbHVlOiBzdHJpbmcgfCBudW1iZXIpOiBzdHJpbmcge1xuICAgIGlmICh2YWx1ZSA9PT0gdW5kZWZpbmVkIHx8IHZhbHVlID09PSBudWxsKSB7dGhyb3cgbmV3IEludmFsaWRTZXJ2aWNlSW5wdXRFcnJvcigpOyB9XG4gICAgdmFsdWUgPSB2YWx1ZS50b1N0cmluZygpO1xuICAgIHZhbHVlID0gdGhpcy5hcmFiaWNUb1BlcnNpYW4odmFsdWUpO1xuICAgIGxldCByZWdleDogUmVnRXhwO1xuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgUGVyc2lhbk51bWJlclNlcnZpY2UucGVyc2lhbk51bWJlcnNUYWJsZS5sZW5ndGg7IGkrKykge1xuICAgICAgLy8gbGFuZ3VhZ2U9SlNSZWdleHBcbiAgICAgIHJlZ2V4ID0gbmV3IFJlZ0V4cChgWyR7UGVyc2lhbk51bWJlclNlcnZpY2UuZW5nbGlzaE51bWJlcnNUYWJsZVtpXX1dYCwgJ2cnKTtcbiAgICAgIHZhbHVlID0gdmFsdWUucmVwbGFjZShyZWdleCwgUGVyc2lhbk51bWJlclNlcnZpY2UucGVyc2lhbk51bWJlcnNUYWJsZVtpXSk7XG4gICAgfVxuICAgIHJldHVybiB2YWx1ZTtcbiAgfVxuXG4gIC8qKlxuICAgKiBDb252ZXJ0IHBlcnNpYW4gbnVtYmVycyBpbiBpbnB1dCB2YWx1ZSB0byB0aGUgZW5nbGlzaCBudW1iZXJzLlxuICAgKiBAcGFyYW0gdmFsdWVcbiAgICovXG4gIHRvRW5nbGlzaCh2YWx1ZTogc3RyaW5nKTogc3RyaW5nIHtcbiAgICBpZiAodmFsdWUgPT09IHVuZGVmaW5lZCB8fCB2YWx1ZSA9PT0gbnVsbCkgeyB0aHJvdyBuZXcgSW52YWxpZFNlcnZpY2VJbnB1dEVycm9yKCk7IH1cbiAgICBsZXQgcmVnZXg6IFJlZ0V4cDtcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IFBlcnNpYW5OdW1iZXJTZXJ2aWNlLmVuZ2xpc2hOdW1iZXJzVGFibGUubGVuZ3RoOyBpKyspIHtcbiAgICAgIC8vIGxhbmd1YWdlPUpTUmVnZXhwXG4gICAgICByZWdleCA9IG5ldyBSZWdFeHAoYFske1BlcnNpYW5OdW1iZXJTZXJ2aWNlLnBlcnNpYW5OdW1iZXJzVGFibGVbaV19XWAsICdnJyk7XG4gICAgICB2YWx1ZSA9IHZhbHVlLnJlcGxhY2UocmVnZXgsIFBlcnNpYW5OdW1iZXJTZXJ2aWNlLmVuZ2xpc2hOdW1iZXJzVGFibGVbaV0pO1xuICAgIH1cbiAgICByZXR1cm4gdmFsdWU7XG4gIH1cbn1cbiJdfQ==