/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Pipe } from '@angular/core';
import { DecimalPipe } from '@angular/common';
/** @enum {string} */
const IRCurrencies = {
    rial: 'ریال',
    r: 'ریال',
    toman: 'تومان',
    t: 'تومان',
};
export { IRCurrencies };
/**
 * Formats input as a currency value.
 * default type is rial. You can choose on of the following currency types:
 *
 *      r or rial for ریال
 *
 *      to or toman for تومان
 *
 *  This pipe extends DecimalPipe, so as second parameter, you can enter your desired formatting string. Default formatter is: 1.0-0
 */
export class IRCurrencyPipe extends DecimalPipe {
    /**
     * \@example 1925100 -> 1,925,100 ریال
     * @param {?} value a number of a string only contains digits
     * @param {?=} type currency type
     * @param {?=} digitInfo decimal pipe formatter
     * @return {?}
     */
    transform(value, type = 'rial', digitInfo = '1.0-0') {
        value = Number(value);
        type = type.toLowerCase();
        if (isNaN(value)) {
            throw new Error(`${value} is not a acceptable number`);
        }
        return super.transform(value, digitInfo) + ' ' + IRCurrencies[type];
    }
}
IRCurrencyPipe.decorators = [
    { type: Pipe, args: [{ name: 'irc' },] }
];
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiSVJDdXJyZW5jeS5waXBlLmpzIiwic291cmNlUm9vdCI6Im5nOi8vbmd4LXBlcnNpYW4vIiwic291cmNlcyI6WyJsaWIvUGlwZXMvSVJDdXJyZW5jeS5waXBlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7QUFBQSxPQUFPLEVBQUUsSUFBSSxFQUFnQixNQUFNLGVBQWUsQ0FBQztBQUNuRCxPQUFPLEVBQUMsV0FBVyxFQUFDLE1BQU0saUJBQWlCLENBQUM7OztJQUcxQyxNQUFPLE1BQU07SUFDYixHQUFJLE1BQU07SUFDVixPQUFRLE9BQU87SUFDZixHQUFJLE9BQU87Ozs7Ozs7Ozs7Ozs7QUFjYixNQUFNLE9BQU8sY0FBZSxTQUFRLFdBQVc7Ozs7Ozs7O0lBUTdDLFNBQVMsQ0FBQyxLQUFzQixFQUFFLE9BQWUsTUFBTSxFQUFFLFlBQW9CLE9BQU87UUFDbEYsS0FBSyxHQUFHLE1BQU0sQ0FBQyxLQUFLLENBQUMsQ0FBQztRQUN0QixJQUFJLEdBQUcsSUFBSSxDQUFDLFdBQVcsRUFBRSxDQUFDO1FBQzFCLElBQUksS0FBSyxDQUFDLEtBQUssQ0FBQyxFQUFFO1lBQUUsTUFBTSxJQUFJLEtBQUssQ0FBQyxHQUFHLEtBQUssNkJBQTZCLENBQUMsQ0FBQztTQUFFO1FBQzdFLE9BQU8sS0FBSyxDQUFDLFNBQVMsQ0FBQyxLQUFLLEVBQUUsU0FBUyxDQUFDLEdBQUcsR0FBRyxHQUFHLFlBQVksQ0FBQyxJQUFJLENBQUMsQ0FBQztJQUN0RSxDQUFDOzs7WUFkRixJQUFJLFNBQUMsRUFBQyxJQUFJLEVBQUUsS0FBSyxFQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgUGlwZSwgUGlwZVRyYW5zZm9ybX0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQge0RlY2ltYWxQaXBlfSBmcm9tICdAYW5ndWxhci9jb21tb24nO1xuXG5leHBvcnQgZW51bSBJUkN1cnJlbmNpZXMge1xuICByaWFsID0gJ9ix24zYp9mEJyxcbiAgciA9ICfYsduM2KfZhCcsXG4gIHRvbWFuID0gJ9iq2YjZhdin2YYnLFxuICB0ID0gJ9iq2YjZhdin2YYnXG59XG5cbi8qKlxuICogRm9ybWF0cyBpbnB1dCBhcyBhIGN1cnJlbmN5IHZhbHVlLlxuICogZGVmYXVsdCB0eXBlIGlzIHJpYWwuIFlvdSBjYW4gY2hvb3NlIG9uIG9mIHRoZSBmb2xsb3dpbmcgY3VycmVuY3kgdHlwZXM6XG4gKlxuICogICAgICByIG9yIHJpYWwgZm9yINix24zYp9mEXG4gKlxuICogICAgICB0byBvciB0b21hbiBmb3Ig2KrZiNmF2KfZhlxuICpcbiAqICBUaGlzIHBpcGUgZXh0ZW5kcyBEZWNpbWFsUGlwZSwgc28gYXMgc2Vjb25kIHBhcmFtZXRlciwgeW91IGNhbiBlbnRlciB5b3VyIGRlc2lyZWQgZm9ybWF0dGluZyBzdHJpbmcuIERlZmF1bHQgZm9ybWF0dGVyIGlzOiAxLjAtMFxuICovXG5AUGlwZSh7bmFtZTogJ2lyYyd9KVxuZXhwb3J0IGNsYXNzIElSQ3VycmVuY3lQaXBlIGV4dGVuZHMgRGVjaW1hbFBpcGUgaW1wbGVtZW50cyBQaXBlVHJhbnNmb3JtIHtcblxuICAvKipcbiAgICogQHBhcmFtIHZhbHVlIGEgbnVtYmVyIG9mIGEgc3RyaW5nIG9ubHkgY29udGFpbnMgZGlnaXRzXG4gICAqIEBwYXJhbSB0eXBlIGN1cnJlbmN5IHR5cGVcbiAgICogQHBhcmFtIGRpZ2l0SW5mbyBkZWNpbWFsIHBpcGUgZm9ybWF0dGVyXG4gICAqIEBleGFtcGxlIDE5MjUxMDAgLT4gMSw5MjUsMTAwINix24zYp9mEXG4gICAqL1xuICB0cmFuc2Zvcm0odmFsdWU6IHN0cmluZyB8IG51bWJlciwgdHlwZTogc3RyaW5nID0gJ3JpYWwnLCBkaWdpdEluZm86IHN0cmluZyA9ICcxLjAtMCcpIHtcbiAgICB2YWx1ZSA9IE51bWJlcih2YWx1ZSk7XG4gICAgdHlwZSA9IHR5cGUudG9Mb3dlckNhc2UoKTtcbiAgICBpZiAoaXNOYU4odmFsdWUpKSB7IHRocm93IG5ldyBFcnJvcihgJHt2YWx1ZX0gaXMgbm90IGEgYWNjZXB0YWJsZSBudW1iZXJgKTsgfVxuICAgIHJldHVybiBzdXBlci50cmFuc2Zvcm0odmFsdWUsIGRpZ2l0SW5mbykgKyAnICcgKyBJUkN1cnJlbmNpZXNbdHlwZV07XG4gIH1cbn1cbiJdfQ==