/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Pipe } from '@angular/core';
import { JDate } from '../JDate/jdate';
/** @enum {string} */
const FromatNames = {
    'short': 'yy/m/d h:M t',
    'shortDate': 'yy/m/d h:M t',
    'medium': 'd mmm yyyy، h:M t',
    'mediumDate': 'd mmm yyyy، h:M t',
    'long': 'd mmm yyyy، h:M:S T',
    'longDate': 'd mmm yyyy، h:M:S T',
    'shortTime': 'h:M t',
    'mediumTime': 'h:M:S t',
    'longTime': 'h:M:S.l T',
};
/**
 * Formats JDate objects or convert Date objects (or any instance of classes those implement that interface) to a `JDate` object and format
 * that according to the given format.
 *
 * The result of this pipe is not reevaluated when the input is mutated. To avoid the need to reformat the date on every change-detection
 * cycle, treat the date as an immutable object and change the reference when the pipe needs to run again.
 *
 * You can pass a format pattern string like [JDate format method]{\@link https://alihoseiny.github.io/ngx-persian/classes/JDate.html#format}
 *
 * Also you can use pre-defined format names described below:
 *
 *        'short': equivalent to yy/m/d h:M t {\@example '97/2/23 12:12 ب.ظ'}
 *
 *        'shortDate': same as short
 *
 *        'medium': equivalent to 'd mmm yyyy، h:M t' {\@example '23 اردیبهشت 1397، 12:12 ب.ظ'}
 *
 *        'mediumDate': same as medium
 *
 *        'long': equivalent to 'd mmm yyyy، h:M:S T' {\@example '23 اردیبهشت 1397، 12:12:30 بعد از ظهر'}
 *
 *        'longDate': same as long
 *
 *        'shortTime': equivalent to 'h:M t' {\@example '12:12 ب.ظ'}
 *
 *        'mediumTime': equivalent to 'h:M:S t' {\@example '12:12:30 ب.ظ'}
 *
 *        'longTime': equivalent to 'h:M:S.l T' {\@example '12:12:30.300 بعد از ظهر'}
 *
 *  Default format is `medium`.
 */
export class JdatePipe {
    /**
     * Checks if `formatName` is in the `FromatNames` enum. If it is, returns related format string. Else returns `formatName` string
     * without any change.
     * @private
     * @param {?} formatName format name or format pattern string
     * @return {?} formatting pattern string
     */
    static convertNameToFormat(formatName) {
        if (!FromatNames[formatName]) {
            return formatName;
        }
        return FromatNames[formatName];
    }
    /**
     * Formatting the date using `format` method of it with proper formatting pattern created from `format`
     * @param {?} value a Jalali Date object or an instance of `Date` object or any class implementing that interface
     * @param {?=} format format name or format pattern string
     * @return {?}
     */
    transform(value, format = 'mediumDate') {
        if (!(value instanceof JDate)) {
            value = new JDate(value);
        }
        // @ts-ignore
        return value.format(JdatePipe.convertNameToFormat(format));
    }
}
JdatePipe.decorators = [
    { type: Pipe, args: [{
                name: 'jdate'
            },] }
];
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiamRhdGUucGlwZS5qcyIsInNvdXJjZVJvb3QiOiJuZzovL25neC1wZXJzaWFuLyIsInNvdXJjZXMiOlsibGliL1BpcGVzL2pkYXRlLnBpcGUudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7OztBQUFBLE9BQU8sRUFBRSxJQUFJLEVBQWlCLE1BQU0sZUFBZSxDQUFDO0FBQ3BELE9BQU8sRUFBQyxLQUFLLEVBQUMsTUFBTSxnQkFBZ0IsQ0FBQzs7O0lBTW5DLFNBQVUsY0FBYztJQUN4QixhQUFjLGNBQWM7SUFDNUIsVUFBVyxtQkFBbUI7SUFDOUIsY0FBZSxtQkFBbUI7SUFDbEMsUUFBUyxxQkFBcUI7SUFDOUIsWUFBYSxxQkFBcUI7SUFDbEMsYUFBYyxPQUFPO0lBQ3JCLGNBQWUsU0FBUztJQUN4QixZQUFhLFdBQVc7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQXFDMUIsTUFBTSxPQUFPLFNBQVM7Ozs7Ozs7O0lBUVosTUFBTSxDQUFDLG1CQUFtQixDQUFDLFVBQWtCO1FBQ25ELElBQUksQ0FBQyxXQUFXLENBQUMsVUFBVSxDQUFDLEVBQUU7WUFDNUIsT0FBTyxVQUFVLENBQUE7U0FDbEI7UUFDRCxPQUFPLFdBQVcsQ0FBQyxVQUFVLENBQUMsQ0FBQztJQUNqQyxDQUFDOzs7Ozs7O0lBT0QsU0FBUyxDQUFDLEtBQVcsRUFBRSxTQUFpQixZQUFZO1FBQ2xELElBQUksQ0FBQyxDQUFDLEtBQUssWUFBWSxLQUFLLENBQUMsRUFBRTtZQUM3QixLQUFLLEdBQUcsSUFBSSxLQUFLLENBQUMsS0FBSyxDQUFDLENBQUM7U0FDMUI7UUFDRCxhQUFhO1FBQ2IsT0FBTyxLQUFLLENBQUMsTUFBTSxDQUFDLFNBQVMsQ0FBQyxtQkFBbUIsQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDO0lBQzdELENBQUM7OztZQTdCRixJQUFJLFNBQUM7Z0JBQ0osSUFBSSxFQUFFLE9BQU87YUFDZCIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IFBpcGUsIFBpcGVUcmFuc2Zvcm0gfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7SkRhdGV9IGZyb20gJy4uL0pEYXRlL2pkYXRlJztcblxuLyoqXG4gKiBQcmUtZGVmaW5lZCBmb3JtYXRzIGRhdGUgZm9ybWF0cyB0aG9zZSBjYW4gdXNlIGZvciBmb3JtYXR0aW5nIEpEYXRlIG9iamVjdHMgd2l0aCBqZGF0ZSBwaXBlLlxuICovXG5lbnVtIEZyb21hdE5hbWVzIHtcbiAgJ3Nob3J0JyA9ICd5eS9tL2QgaDpNIHQnLFxuICAnc2hvcnREYXRlJyA9ICd5eS9tL2QgaDpNIHQnLFxuICAnbWVkaXVtJyA9ICdkIG1tbSB5eXl52IwgaDpNIHQnLFxuICAnbWVkaXVtRGF0ZScgPSAnZCBtbW0geXl5ediMIGg6TSB0JyxcbiAgJ2xvbmcnID0gJ2QgbW1tIHl5eXnYjCBoOk06UyBUJyxcbiAgJ2xvbmdEYXRlJyA9ICdkIG1tbSB5eXl52IwgaDpNOlMgVCcsXG4gICdzaG9ydFRpbWUnID0gJ2g6TSB0JyxcbiAgJ21lZGl1bVRpbWUnID0gJ2g6TTpTIHQnLFxuICAnbG9uZ1RpbWUnID0gJ2g6TTpTLmwgVCcsXG59XG5cbi8qKlxuICogRm9ybWF0cyBKRGF0ZSBvYmplY3RzIG9yIGNvbnZlcnQgRGF0ZSBvYmplY3RzIChvciBhbnkgaW5zdGFuY2Ugb2YgY2xhc3NlcyB0aG9zZSBpbXBsZW1lbnQgdGhhdCBpbnRlcmZhY2UpIHRvIGEgYEpEYXRlYCBvYmplY3QgYW5kIGZvcm1hdFxuICogdGhhdCBhY2NvcmRpbmcgdG8gdGhlIGdpdmVuIGZvcm1hdC5cbiAqXG4gKiBUaGUgcmVzdWx0IG9mIHRoaXMgcGlwZSBpcyBub3QgcmVldmFsdWF0ZWQgd2hlbiB0aGUgaW5wdXQgaXMgbXV0YXRlZC4gVG8gYXZvaWQgdGhlIG5lZWQgdG8gcmVmb3JtYXQgdGhlIGRhdGUgb24gZXZlcnkgY2hhbmdlLWRldGVjdGlvblxuICogY3ljbGUsIHRyZWF0IHRoZSBkYXRlIGFzIGFuIGltbXV0YWJsZSBvYmplY3QgYW5kIGNoYW5nZSB0aGUgcmVmZXJlbmNlIHdoZW4gdGhlIHBpcGUgbmVlZHMgdG8gcnVuIGFnYWluLlxuICpcbiAqIFlvdSBjYW4gcGFzcyBhIGZvcm1hdCBwYXR0ZXJuIHN0cmluZyBsaWtlIFtKRGF0ZSBmb3JtYXQgbWV0aG9kXXtAbGluayBodHRwczovL2FsaWhvc2VpbnkuZ2l0aHViLmlvL25neC1wZXJzaWFuL2NsYXNzZXMvSkRhdGUuaHRtbCNmb3JtYXR9XG4gKlxuICogQWxzbyB5b3UgY2FuIHVzZSBwcmUtZGVmaW5lZCBmb3JtYXQgbmFtZXMgZGVzY3JpYmVkIGJlbG93OlxuICpcbiAqICAgICAgICAnc2hvcnQnOiBlcXVpdmFsZW50IHRvIHl5L20vZCBoOk0gdCB7QGV4YW1wbGUgJzk3LzIvMjMgMTI6MTIg2Kgu2LgnfVxuICpcbiAqICAgICAgICAnc2hvcnREYXRlJzogc2FtZSBhcyBzaG9ydFxuICpcbiAqICAgICAgICAnbWVkaXVtJzogZXF1aXZhbGVudCB0byAnZCBtbW0geXl5ediMIGg6TSB0JyB7QGV4YW1wbGUgJzIzINin2LHYr9uM2KjZh9i02KogMTM5N9iMIDEyOjEyINioLti4J31cbiAqXG4gKiAgICAgICAgJ21lZGl1bURhdGUnOiBzYW1lIGFzIG1lZGl1bVxuICpcbiAqICAgICAgICAnbG9uZyc6IGVxdWl2YWxlbnQgdG8gJ2QgbW1tIHl5eXnYjCBoOk06UyBUJyB7QGV4YW1wbGUgJzIzINin2LHYr9uM2KjZh9i02KogMTM5N9iMIDEyOjEyOjMwINio2LnYryDYp9iyINi42YfYsSd9XG4gKlxuICogICAgICAgICdsb25nRGF0ZSc6IHNhbWUgYXMgbG9uZ1xuICpcbiAqICAgICAgICAnc2hvcnRUaW1lJzogZXF1aXZhbGVudCB0byAnaDpNIHQnIHtAZXhhbXBsZSAnMTI6MTIg2Kgu2LgnfVxuICpcbiAqICAgICAgICAnbWVkaXVtVGltZSc6IGVxdWl2YWxlbnQgdG8gJ2g6TTpTIHQnIHtAZXhhbXBsZSAnMTI6MTI6MzAg2Kgu2LgnfVxuICpcbiAqICAgICAgICAnbG9uZ1RpbWUnOiBlcXVpdmFsZW50IHRvICdoOk06Uy5sIFQnIHtAZXhhbXBsZSAnMTI6MTI6MzAuMzAwINio2LnYryDYp9iyINi42YfYsSd9XG4gKlxuICogIERlZmF1bHQgZm9ybWF0IGlzIGBtZWRpdW1gLlxuICovXG5AUGlwZSh7XG4gIG5hbWU6ICdqZGF0ZSdcbn0pXG5leHBvcnQgY2xhc3MgSmRhdGVQaXBlIGltcGxlbWVudHMgUGlwZVRyYW5zZm9ybSB7XG5cbiAgLyoqXG4gICAqIENoZWNrcyBpZiBgZm9ybWF0TmFtZWAgaXMgaW4gdGhlIGBGcm9tYXROYW1lc2AgZW51bS4gSWYgaXQgaXMsIHJldHVybnMgcmVsYXRlZCBmb3JtYXQgc3RyaW5nLiBFbHNlIHJldHVybnMgYGZvcm1hdE5hbWVgIHN0cmluZ1xuICAgKiB3aXRob3V0IGFueSBjaGFuZ2UuXG4gICAqIEBwYXJhbSBmb3JtYXROYW1lIGZvcm1hdCBuYW1lIG9yIGZvcm1hdCBwYXR0ZXJuIHN0cmluZ1xuICAgKiBAcmV0dXJuIGZvcm1hdHRpbmcgcGF0dGVybiBzdHJpbmdcbiAgICovXG4gIHByaXZhdGUgc3RhdGljIGNvbnZlcnROYW1lVG9Gb3JtYXQoZm9ybWF0TmFtZTogc3RyaW5nKTogc3RyaW5nIHtcbiAgICBpZiAoIUZyb21hdE5hbWVzW2Zvcm1hdE5hbWVdKSB7XG4gICAgICByZXR1cm4gZm9ybWF0TmFtZVxuICAgIH1cbiAgICByZXR1cm4gRnJvbWF0TmFtZXNbZm9ybWF0TmFtZV07XG4gIH1cblxuICAvKipcbiAgICogRm9ybWF0dGluZyB0aGUgZGF0ZSB1c2luZyBgZm9ybWF0YCBtZXRob2Qgb2YgaXQgd2l0aCBwcm9wZXIgZm9ybWF0dGluZyBwYXR0ZXJuIGNyZWF0ZWQgZnJvbSBgZm9ybWF0YFxuICAgKiBAcGFyYW0gdmFsdWUgYSBKYWxhbGkgRGF0ZSBvYmplY3Qgb3IgYW4gaW5zdGFuY2Ugb2YgYERhdGVgIG9iamVjdCBvciBhbnkgY2xhc3MgaW1wbGVtZW50aW5nIHRoYXQgaW50ZXJmYWNlXG4gICAqIEBwYXJhbSBmb3JtYXQgZm9ybWF0IG5hbWUgb3IgZm9ybWF0IHBhdHRlcm4gc3RyaW5nXG4gICAqL1xuICB0cmFuc2Zvcm0odmFsdWU6IERhdGUsIGZvcm1hdDogc3RyaW5nID0gJ21lZGl1bURhdGUnKTogc3RyaW5nIHtcbiAgICBpZiAoISh2YWx1ZSBpbnN0YW5jZW9mIEpEYXRlKSkge1xuICAgICAgdmFsdWUgPSBuZXcgSkRhdGUodmFsdWUpO1xuICAgIH1cbiAgICAvLyBAdHMtaWdub3JlXG4gICAgcmV0dXJuIHZhbHVlLmZvcm1hdChKZGF0ZVBpcGUuY29udmVydE5hbWVUb0Zvcm1hdChmb3JtYXQpKTtcbiAgfVxuXG59XG4iXX0=