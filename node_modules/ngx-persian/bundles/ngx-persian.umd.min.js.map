{"version":3,"sources":["../../../node_modules/tslib/tslib.es6.js","ng://ngx-persian/lib/Services/InvalidServiceInput.error.ts","ng://ngx-persian/lib/Services/persian-number.service.ts","ng://ngx-persian/lib/Services/persian-letter.service.ts","ng://ngx-persian/lib/Validators/persian-validators.ts","ng://ngx-persian/lib/Validators/persian-directives.ts","ng://ngx-persian/lib/Pipes/faNum.pipe.ts","ng://ngx-persian/lib/Pipes/enNum.pipe.ts","ng://ngx-persian/lib/Pipes/IRCurrency.pipe.ts","ng://ngx-persian/lib/Pipes/nationalCode.pipe.ts","ng://ngx-persian/lib/JDate/ArithmeticUtils.ts","ng://ngx-persian/lib/JDate/InvalidJalaliDate.error.ts","ng://ngx-persian/lib/JDate/jalali-date-validator.service.ts","ng://ngx-persian/lib/JDate/jalali-date-calculator.service.ts","ng://ngx-persian/lib/JDate/jdate.ts","ng://ngx-persian/lib/Pipes/jdate.pipe.ts","ng://ngx-persian/lib/ngx-persian.module.ts","ng://ngx-persian/lib/Services/InvalidMobilePhoneNumber.error.ts","ng://ngx-persian/lib/Services/InvalidMobileOperator.error.ts","ng://ngx-persian/lib/Services/mobile-phone-number.service.ts","ng://ngx-persian/lib/Services/InvalidNationalCode.error.ts","ng://ngx-persian/lib/Services/national-code.service.ts"],"names":["extendStatics","d","b","Object","setPrototypeOf","__proto__","Array","p","hasOwnProperty","__extends","__","this","constructor","prototype","create","__values","o","m","Symbol","iterator","i","call","next","length","value","done","__read","n","r","e","ar","push","error","__spread","arguments","concat","InvalidServiceInputError","params","_i","_this","_super","apply","Error","captureStackTrace","message","tslib_1.__extends","PersianNumberService","containsPersian","RegExp","persianNumberPattern","test","_getMatchedPatternLength","matchResult","match","isPersian","arabicToPersian","replace","persianNumbersTable","toPersian","undefined","regex","toString","englishNumbersTable","toEnglish","Injectable","args","providedIn","PersianLetterService","_stringValidationRegex","options","result","enDigits","symbols","SYMBOLS_PATTERN","whitespaces","WHITESPACES_PATTERN","persianDigits","PERSIAN_LETTERS_PATTERN","persianRegex","trim","persianNumbersValidator","persianNumberService","control","persianNumberValidation","persianLettersValidator","persianLetterService","persianLetterValidation","PersianNumbersDirective","validate","Directive","selector","providers","provide","NG_VALIDATORS","useExisting","PersianLetterDirective","Input","FaNumPipe","transform","String","Pipe","name","EnNumPipe","rial","toman","t","IRCurrencyPipe","type","digitInfo","Number","toLowerCase","isNaN","IRCurrencies","DecimalPipe","NationalCodePipe","substring","div","num1","num2","x","Math","ceil","floor","mod","InvalidJalaliDateError","JalaliDateValidatorService","jMonthLength","jYear","jMonth","isJYearLeap","numOfJLeapYears","targetJYear","jump","breaks","breaksLength","jp","leapJ","isValidJYear","jm","_minAcceptableYear","_maxAcceptableYear","isValidJMonth","startFromZero","minMonthNumber","maxMonthNumber","isValidJDay","jDay","isValidJDate","JalaliDateCalculatorService","validator","numberOfPassedGDays","gDate","gMonth","getMonth","gYear","getFullYear","gMonthDiv","getDate","numberOfPassedJDays","Date","jalaliYearToGeorgianYear","firstDayOfJYearInMarch","createGDateFromDays","numOfDays","j","gDay","numOfGLeapYears","targetGYear","georgianYearToJalaliYear","convertToJalali","georgianYear","jalaliYear","numOfDayInJYear","year","month","day","convertToGeorgian","JDate","hours","minutes","seconds","milliseconds","_calculator","_createFromDate","parse","_gDate","_jYear","_jMonth","_jDay","setHours","_check_date_validity","zeroPadding","desiredLength","dateString","calculator","dateArray","split","parseInt","FA_MONTHS","indexOf","EN_MONTHS","timeArray","hour","min","sec","getTime","_renewGDate","defineProperty","conversionResult","toPrimitive","hint","getGeorgianDate","getDay","getHours","getHours12hourClock","getMilliseconds","getMinutes","getSeconds","getTimezoneOffset","getUTCDate","getUTCDay","getUTCFullYear","getUTCHours","getUTCMilliseconds","getUTCMinutes","getUTCMonth","getUTCSeconds","setDate","date","setFullYear","ms","setMinutes","setSeconds","setMilliseconds","setMonth","setTime","time","setUTCDate","setUTCFullYear","setUTCHours","setUTCMilliseconds","setUTCMinutes","setUTCMonth","setUTCSeconds","getNameOfTheDay","DAYS_OF_WEEK","getNameOfTheMonth","toDateString","getTimeMarker","shortVersion","SHORT_BEFORE_NOON","COMPLETE_BEFORE_NOON","SHORT_AFTER_NOON","COMPLETE_AFTER_NOON","_format_date","pattern","EN_DAYS_OF_WEEK","_format_time","format","toISOString","toJSON","key","toLocaleDateString","locales","toLocaleTimeString","toTimeString","toUTCString","valueOf","addMonth","incValue","short","shortDate","medium","mediumDate","long","longDate","shortTime","mediumTime","longTime","JdatePipe","convertNameToFormat","formatName","FromatNames","NgxPersianModule","NgModule","declarations","imports","exports","InvalidMobilePhoneNumberError","InvalidMobileOperatorError","irancell","mci","talia","rightel","spadan","tkc","shatel","aptel","azartel","samantel","lotustel","anarestan","MobileCodes","MobilePhoneNumberService","isPhoneNumberPatternValid","phoneNumber","normalizePhoneNumber","getPhoneNumberOperator","nameInEnglish","_c","tslib_1.__values","keys","_d","operator","_e","_f","code","operatorsNames","isValidPhoneNumber","InvalidNationalCodeError","nationalCode","NationalCodeService","_is_repetitive","input","firstChar","charAt","normalize","nationalCodeLength","repeat","isValid","multiplicationResult","reminder","desiredControlNum"],"mappings":"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","sourcesContent":["/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation. All rights reserved.\r\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use\r\nthis file except in compliance with the License. You may obtain a copy of the\r\nLicense at http://www.apache.org/licenses/LICENSE-2.0\r\n\r\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\r\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\r\nMERCHANTABLITY OR NON-INFRINGEMENT.\r\n\r\nSee the Apache Version 2.0 License for specific language governing permissions\r\nand limitations under the License.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = function(d, b) {\r\n    extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n    return extendStatics(d, b);\r\n};\r\n\r\nexport function __extends(d, b) {\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nexport var __assign = function() {\r\n    __assign = Object.assign || function __assign(t) {\r\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n            s = arguments[i];\r\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n        }\r\n        return t;\r\n    }\r\n    return __assign.apply(this, arguments);\r\n}\r\n\r\nexport function __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\r\n            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))\r\n                t[p[i]] = s[p[i]];\r\n        }\r\n    return t;\r\n}\r\n\r\nexport function __decorate(decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n}\r\n\r\nexport function __param(paramIndex, decorator) {\r\n    return function (target, key) { decorator(target, key, paramIndex); }\r\n}\r\n\r\nexport function __metadata(metadataKey, metadataValue) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n}\r\n\r\nexport function __awaiter(thisArg, _arguments, P, generator) {\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\nexport function __generator(thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [op[0] & 2, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n}\r\n\r\nexport function __exportStar(m, exports) {\r\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\r\n}\r\n\r\nexport function __values(o) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator], i = 0;\r\n    if (m) return m.call(o);\r\n    return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n}\r\n\r\nexport function __read(o, n) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n}\r\n\r\nexport function __spread() {\r\n    for (var ar = [], i = 0; i < arguments.length; i++)\r\n        ar = ar.concat(__read(arguments[i]));\r\n    return ar;\r\n}\r\n\r\nexport function __spreadArrays() {\r\n    for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;\r\n    for (var r = Array(s), k = 0, i = 0; i < il; i++)\r\n        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)\r\n            r[k] = a[j];\r\n    return r;\r\n};\r\n\r\nexport function __await(v) {\r\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n}\r\n\r\nexport function __asyncGenerator(thisArg, _arguments, generator) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }\r\n    function fulfill(value) { resume(\"next\", value); }\r\n    function reject(value) { resume(\"throw\", value); }\r\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n}\r\n\r\nexport function __asyncDelegator(o) {\r\n    var i, p;\r\n    return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n    function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === \"return\" } : f ? f(v) : v; } : f; }\r\n}\r\n\r\nexport function __asyncValues(o) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var m = o[Symbol.asyncIterator], i;\r\n    return m ? m.call(o) : (o = typeof __values === \"function\" ? __values(o) : o[Symbol.iterator](), i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i);\r\n    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }\r\n    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }\r\n}\r\n\r\nexport function __makeTemplateObject(cooked, raw) {\r\n    if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\r\n    return cooked;\r\n};\r\n\r\nexport function __importStar(mod) {\r\n    if (mod && mod.__esModule) return mod;\r\n    var result = {};\r\n    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\r\n    result.default = mod;\r\n    return result;\r\n}\r\n\r\nexport function __importDefault(mod) {\r\n    return (mod && mod.__esModule) ? mod : { default: mod };\r\n}\r\n","/**\n * This error will throw when input value of the service method is not a valid value.\n */\nexport class InvalidServiceInputError extends Error {\n  constructor(...params) {\n    super(...params);\n\n    // Maintains proper stack trace for where our error was thrown (only available on V8)\n    // @ts-ignore\n    if (Error.captureStackTrace) {\n      // @ts-ignore\n      Error.captureStackTrace(this, InvalidServiceInputError);\n    }\n\n    this.message = 'Invalid value has been passed to the service.';\n  }\n}\n","import { Injectable } from '@angular/core';\nimport {PersianService} from './persian-service';\nimport {InvalidServiceInputError} from './InvalidServiceInput.error';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class PersianNumberService implements PersianService {\n  static persianNumberPattern = '\\u06F0-\\u06F9';\n  private static persianNumbersTable = ['\\u06F0', '\\u06F1', '\\u06F2', '\\u06F3', '\\u06F4', '\\u06F5', '\\u06F6', '\\u06F7', '\\u06F8', '\\u06F9'];\n  private static englishNumbersTable = ['0', '1', '2', '3', '4', '5', '6', '7', '8', '9'];\n\n  /**\n   * Checks if input value contains any persian number or not.\n   * @param value\n   * @return true if input value contains any persian number. false otherwise.\n   */\n  containsPersian(value: string): boolean {\n    if (!value) { return false; }\n    // language=JSRegexp\n    const persianRegex = new RegExp(`[${PersianNumberService.persianNumberPattern}]`);\n    return persianRegex.test(value);\n  }\n\n  /**\n   * splits input value by persian letters and then returns length of matched array.\n   * @param value\n   * @return 0 if input value has no persian letter, numbers of persian letters in the input value otherwise.\n   */\n  private static _getMatchedPatternLength(value: string): number {\n    // language=JSRegexp\n    const matchResult = value.match(new RegExp(`[${PersianNumberService.persianNumberPattern}]`, 'g'));\n    return matchResult ? matchResult.length : 0;\n  }\n\n  /**\n   * Checks if input value contains only persian letters.\n   * @param value\n   */\n  isPersian(value: string): boolean {\n    if (!value) {return false; }\n    return value.length === PersianNumberService._getMatchedPatternLength(value);\n  }\n\n  /**\n   * Converts arabic numbers to the persian ones.\n   * @param value\n   */\n  arabicToPersian(value: string): string {\n    return value.replace(/Ù¤/g, PersianNumberService.persianNumbersTable[4])\n                .replace(/Ù¥/g, PersianNumberService.persianNumbersTable[5])\n                .replace(/Ù¦/g, PersianNumberService.persianNumbersTable[6]);\n  }\n\n  /**\n   * Converts all arabic and english numbers to the persian numbers.\n   * @param value\n   */\n  toPersian(value: string | number): string {\n    if (value === undefined || value === null) {throw new InvalidServiceInputError(); }\n    value = value.toString();\n    value = this.arabicToPersian(value);\n    let regex: RegExp;\n    for (let i = 0; i < PersianNumberService.persianNumbersTable.length; i++) {\n      // language=JSRegexp\n      regex = new RegExp(`[${PersianNumberService.englishNumbersTable[i]}]`, 'g');\n      value = value.replace(regex, PersianNumberService.persianNumbersTable[i]);\n    }\n    return value;\n  }\n\n  /**\n   * Convert persian numbers in input value to the english numbers.\n   * @param value\n   */\n  toEnglish(value: string): string {\n    if (value === undefined || value === null) { throw new InvalidServiceInputError(); }\n    let regex: RegExp;\n    for (let i = 0; i < PersianNumberService.englishNumbersTable.length; i++) {\n      // language=JSRegexp\n      regex = new RegExp(`[${PersianNumberService.persianNumbersTable[i]}]`, 'g');\n      value = value.replace(regex, PersianNumberService.englishNumbersTable[i]);\n    }\n    return value;\n  }\n}\n","import { Injectable } from '@angular/core';\nimport {PersianService} from './persian-service';\nimport {PersianNumberService} from './persian-number.service';\n\n/**\n * isPersian options parameter object should implement this interface. Fields descriptions are in the isPersian method document.\n */\nexport interface PLOptions {\n  persianDigits?: boolean;\n  enDigits?: boolean;\n  symbols?: boolean;\n  whitespaces?: boolean;\n}\n\n@Injectable({\n  providedIn: 'root'\n})\n/**\n * This service brings validation of persian texts to the program and let you convert some not-persian letters with persian ones.\n *\n */\nexport class PersianLetterService implements PersianService {\n\n  static PERSIAN_LETTERS_PATTERN = '\\u06A9\\u06AF\\u06C0\\u06CC\\u060C\\u062A\\u062B\\u062C\\u062D\\u062E\\u062F\\u063A\\u064A\\u064B\\u064C' +\n                                       '\\u064D\\u064E\\u064F\\u067E\\u0670\\u0686\\u0698\\u200C\\u0621-\\u0629\\u0630-\\u0639\\u0641-\\u0654';\n  private static SYMBOLS_PATTERN = 'Ø$-/:-?Ø{-~!\"^_`\\\\[\\\\]';\n  static WHITESPACES_PATTERN = '\\\\s';\n\n  /**\n   * According to the options values, returns a RegExp object. The regex pattern of it contains regex of finding each of\n   * elements those specified in the options object plus persian letters.\n   * @return a RegExp object that can use in searching a string for special characters (persian letters and others specified in the options)\n   * @param options\n   */\n  private static _stringValidationRegex(options: PLOptions): RegExp {\n    let result = '';\n    if (options.enDigits) { result += '0-9'; }\n    if (options.symbols) { result += PersianLetterService.SYMBOLS_PATTERN; }\n    if (options.whitespaces) { result += PersianLetterService.WHITESPACES_PATTERN; }\n    if (options.persianDigits) { result += PersianNumberService.persianNumberPattern; }\n    // language=JSRegexp\n    return new RegExp(`[${result + PersianLetterService.PERSIAN_LETTERS_PATTERN}]`, 'g');\n  }\n\n  /**\n   * This method gets regex of persian letters and other chars specified in the options and then splits the input value by that regex.\n   *\n   * If match result is null - there is no match - returns 0. otherwise returns length of the match array that shows number of matched\n   * occurred in the input value.\n   * @param value\n   * @param options\n   * @return a number greater equal to 0 representing number of matches occurred in the input value.\n   */\n  private static _getMatchedPatternLength(value: string, options: PLOptions): number {\n    const matchResult = value.match(PersianLetterService._stringValidationRegex(options));\n    return matchResult ? matchResult.length : 0;\n  }\n\n  /**\n   * If input value contains any persian letter or is an empty string, returns true. otherwise returns false.\n   * @param value\n   */\n  containsPersian(value: string): boolean {\n    if (value === undefined || value === null) { return false; }\n    // language=JSRegexp\n    const persianRegex = new RegExp(`[${PersianLetterService.PERSIAN_LETTERS_PATTERN}]`);\n    return value.trim() ? persianRegex.test(value) : true;\n  }\n\n  /**\n   * Checks if input value is a persian text or not. If input value contains any letter that is not persian, the output will be false.\n   * Result of validation on existence  of other characters controls by options parameter.\n   * @param value\n   * @param options controlling validation result on existence  of other characters controls by options parameter. Fields:\n   *\n   *        persianDigits: if sets to true, validation result will be true if input value contains persian digits plus persian letters.\n   *\n   *\n   *        enDigits: if sets to true, validation result will be true if input value contains english digits plus persian letters\n   *\n   *\n   *        symbols: if sets to true, validation result will be true if input value contains specific symbols plus persian letters.\n   *                 symbols list: ?$-/:Ø!~\"'^_-[]{}()%&*><;\n   *\n   *\n   *        whitespaces: if sets to true, validation result will be true if input value contains white spaces plus persian letters\n   *\n   *\n   * You can combine any number of options field together.\n   */\n  isPersian(value: string, options: PLOptions = {\n                                                  persianDigits: false,\n                                                  enDigits: false,\n                                                  symbols: true,\n                                                  whitespaces: true}): boolean {\n    if (value === undefined || value === null) { return false; }\n    return value.length === PersianLetterService._getMatchedPatternLength(value, options);\n  }\n\n  /**\n   * Converts arabic letters: Ù and Ù to persian corresponding letters.\n   * @param value\n   */\n  toPersian(value: string): string {\n    return value.replace(/Ù/g, 'Û').replace(/Ù/g, 'Ú©');\n  }\n\n}\n","import {AbstractControl, ValidationErrors, ValidatorFn} from '@angular/forms';\nimport {PersianNumberService} from '../Services/persian-number.service';\nimport {PLOptions, PersianLetterService} from '../Services/persian-letter.service';\n\n/**\n * Reactive form validator that checks form control value contains only persian numbers.\n * @param persianNumberService\n */\nexport function persianNumbersValidator(persianNumberService: PersianNumberService = new PersianNumberService()): ValidatorFn {\n  return (control: AbstractControl): ValidationErrors | null => {\n    return persianNumberService.isPersian(control.value) ? null : {'persianNumberValidation': control.value};\n  };\n}\n\n/**\n * Reactive form validator that checks form control value contains only persian letters and allowed characters in the options parameter.\n * @param options see documents of isPersian method of the PersianLetterService for more info about options.\n * @param persianLetterService\n */\nexport function persianLettersValidator(options: PLOptions = {\n                                                            persianDigits: false,\n                                                            whitespaces: false,\n                                                            symbols: false,\n                                                            enDigits: false},\n                                        persianLetterService: PersianLetterService = new PersianLetterService()): ValidatorFn {\n  return (control: AbstractControl): ValidationErrors | null => {\n    return persianLetterService.isPersian(control.value, options) ? null : {'persianLetterValidation': control.value};\n  };\n}\n","import {Directive, Input} from '@angular/core';\nimport {AbstractControl, NG_VALIDATORS, Validator} from '@angular/forms';\nimport {persianLettersValidator, persianNumbersValidator} from './persian-validators';\nimport {PLOptions} from '../Services/persian-letter.service';\n\n\n/**\n * You can add PersianNumbersDirective property to your input tag for using persianNumbersValidator function on its value.\n *\n * [For more information also see persianNumbersValidator]{@link persianNumbersValidator}\n */\n@Directive({\n  selector: 'PersianNumbersDirective',\n  providers: [{provide: NG_VALIDATORS, useExisting: PersianNumbersDirective}]\n})\nexport class PersianNumbersDirective implements Validator {\n\n  /**\n   * Only a wrapper for persianNumbersValidator validator function.\n   * @param control\n   * @return null for success or ValidationError for invalid inputs\n   */\n  validate(control: AbstractControl): {[key: string]: any} | null {\n    return persianNumbersValidator()(control);\n  }\n}\n\n/**\n * You can add PersianLetterDirective property to your input tag for using persianNumbersValidator function on its value\n * For setting options value, you can simply set PersianLetterDirective property equal to the PLOptions object.\n * [For more information also see persianLettersValidator]{@link persianLettersValidator}\n */\n@Directive({\n  selector: 'persianLettersValidator',\n  providers: [{provide: NG_VALIDATORS, useExisting: PersianLetterDirective}]\n})\nexport class PersianLetterDirective implements Validator {\n\n  @Input('PersianLetterDirective') options: PLOptions;\n\n  /**\n   * Only a wrapper for persianLettersValidator validator function.\n   * @param control\n   * @return null for success or ValidationError for invalid inputs\n   */\n  validate(control: AbstractControl): {[key: string]: any} | null {\n    return persianLettersValidator(this.options)(control);\n  }\n}\n","import { Pipe, PipeTransform} from '@angular/core';\nimport {PersianNumberService} from '../Services/persian-number.service';\n\n/**\n * Replaces all arabic and english numbers with persian numbers.\n * @example {{englishTextDigit | faNum}}\n */\n@Pipe({name: 'faNum'})\nexport class FaNumPipe implements PipeTransform {\n\n  constructor(private persianNumberService: PersianNumberService) {}\n\n  /**\n   *\n   * @param value a number or string (probably empty).\n   * @return a string that all english and arabic numbers in the input has been replaced with persian digits.\n   */\n  transform(value: string | number): string {\n    value = String(value);\n    return this.persianNumberService.toPersian(value);\n  }\n}\n\n","import {Pipe, PipeTransform} from '@angular/core';\nimport {PersianNumberService} from '../Services/persian-number.service';\n\n/**\n * Replaces all persian numbers in the text to the english numbers.\n * @example {{persianTextDigit | enNum}}\n */\n@Pipe({name: 'enNum'})\nexport class EnNumPipe  implements PipeTransform {\n\n  constructor(private persianNumberService: PersianNumberService) {}\n\n  /**\n   * @return input value replaced all persian digits with english digits.\n   * @param value a string containing one or more non-english digits. Could be an empty string.\n   */\n  transform(value: string): string {\n    value = String(value);\n    return this.persianNumberService.toEnglish(value);\n  }\n}\n","import { Pipe, PipeTransform} from '@angular/core';\nimport {DecimalPipe} from '@angular/common';\n\nexport enum IRCurrencies {\n  rial = 'Ø±ÛØ§Ù',\n  r = 'Ø±ÛØ§Ù',\n  toman = 'ØªÙÙØ§Ù',\n  t = 'ØªÙÙØ§Ù'\n}\n\n/**\n * Formats input as a currency value.\n * default type is rial. You can choose on of the following currency types:\n *\n *      r or rial for Ø±ÛØ§Ù\n *\n *      to or toman for ØªÙÙØ§Ù\n *\n *  This pipe extends DecimalPipe, so as second parameter, you can enter your desired formatting string. Default formatter is: 1.0-0\n */\n@Pipe({name: 'irc'})\nexport class IRCurrencyPipe extends DecimalPipe implements PipeTransform {\n\n  /**\n   * @param value a number of a string only contains digits\n   * @param type currency type\n   * @param digitInfo decimal pipe formatter\n   * @example 1925100 -> 1,925,100 Ø±ÛØ§Ù\n   */\n  transform(value: string | number, type: string = 'rial', digitInfo: string = '1.0-0') {\n    value = Number(value);\n    type = type.toLowerCase();\n    if (isNaN(value)) { throw new Error(`${value} is not a acceptable number`); }\n    return super.transform(value, digitInfo) + ' ' + IRCurrencies[type];\n  }\n}\n","import { Pipe, PipeTransform} from '@angular/core';\n\n/**\n * Formats a 10-digit number or string to national code format.\n */\n@Pipe({name: 'nationalCode'})\nexport class NationalCodePipe implements PipeTransform {\n\n  /**\n   * @param value a 10-digit number or a string only contains 10 digits.\n   * @example 001-236547-5\n   * @return a formatted text from 10-digit input or an empty string if length of the input is not 10.\n   */\n  transform(value: string | number): string {\n    value = String(value);\n    if (value.length !== 10) { return ''; }\n    return `${value.substring(0, 3)}-${value.substring(3, 9)}-${value[9]}`;\n  }\n}\n","/**\n * This function removes fraction part of the number if exists. So, for example, it will turn -145,455 to -145 and\n * 145,455 to 145.\n */\nexport function round(x: number): number {\n  if (x < 0) {\n    return Math.ceil(x);\n  } else {\n    return Math.floor(x);\n  }\n}\n\n/**\n * This function returns integer part of division result of num1 and num2 numbers.\n *\n * For example: div (10, 3) is equal to 3.\n */\nexport function div(num1: number, num2: number): number {\n  return round(num1 / num2);\n}\n\n/**\n * This function return arithmetic mod result of two inputs as a integer.\n */\nexport function mod(num1: number, num2: number): number {\n  return num1 - div(num1, num2) * num2;\n}\n","/**\n * This Error will throw When inputted date is not a valid date according to the Jalali Calendar.\n */\nexport class InvalidJalaliDateError extends Error {\n  constructor(...params) {\n    super(...params);\n\n    // Maintains proper stack trace for where our error was thrown (only available on V8)\n    // @ts-ignore\n    if (Error.captureStackTrace) {\n      // @ts-ignore\n      Error.captureStackTrace(this, InvalidJalaliDateError);\n    }\n\n    this.message = 'Invalid jalali date.';\n  }\n}\n","import { Injectable } from '@angular/core';\nimport {div, mod} from './ArithmeticUtils';\nimport {InvalidJalaliDateError} from './InvalidJalaliDate.error';\n\n\n/**\n * Methods of this Service doing validation stuff on a Jalali date. You can use this Service using DI in all around of your app for\n * validating Jalali dates without needing to convert them to the Georgian Date.\n */\n@Injectable({\n  providedIn: 'root'\n})\nexport class JalaliDateValidatorService {\n\n  private static _minAcceptableYear = -61;\n  private static _maxAcceptableYear = 3177;\n\n  constructor() { }\n\n  /**\n   * Returns number of days in a given month counting from 1.\n   * @param jYear full jalali year like 1397\n   * @param jMonth number of month from 0 for Farvardin to 11 for Esfand.\n   */\n  jMonthLength(jYear: number, jMonth: number): number {\n    if (jMonth < 6) { return 31; }\n    if (jMonth < 11 || this.isJYearLeap(jYear)) { return 30; }\n    return 29;\n  }\n\n\n  /**\n   * Calculates the number of the leap years in jalali Calendar.\n   * @param targetJYear should be full year like: 1397 and should be between -61 to 3177.\n   *\n   * [Implementation in source code]{@link https://github.com/sijad/ts-jalaali/blob/296a7c2fa1816a5bbb0b11bbe3eb03ebc17059f6/src/jalaali.ts#L71}\n   */\n  numOfJLeapYears(targetJYear: number): number {\n    // Jalali years starting the 33-year rule.\n    const breaks = [\n      -61, 9, 38, 199, 426, 686, 756, 818, 1111, 1181, 1210,\n      1635, 2060, 2097, 2192, 2262, 2324, 2394, 2456, 3178,\n    ];\n\n    const breaksLength = breaks.length;\n    let jp = breaks[0];\n    let jump: number;\n    let leapJ = -14;\n\n    if (!this.isValidJYear(targetJYear)) {\n      throw new InvalidJalaliDateError();\n    }\n\n    // Find the limiting years for the Jalali year jy.\n    for (let i = 1; i < breaksLength; i += 1) {\n      const jm = breaks[i];\n      jump = jm - jp;\n      if (targetJYear < jm) {\n        break;\n      }\n      leapJ = leapJ + div(jump, 33) * 8 + div(mod(jump, 33), 4);\n      jp = jm;\n    }\n    const n = targetJYear - jp;\n\n    // Find the number of leap years from AD 621 to the beginning\n    // of the current Jalali year in the Persian Calendar.\n    leapJ = leapJ + div(n, 33) * 8 + div(mod(n, 33) + 3, 4);\n\n    if (mod(jump, 33) === 4 && jump - n === 4) {\n      leapJ += 1;\n    }\n    return leapJ;\n  }\n\n  /**\n   * If JYear is a leap year in jalali Calendar, return true. We using the fact that if a year is leap, number of leap years until that year\n   * and the year after it is not equal.\n   * @param jYear full jalali year like: 1397\n   */\n  isJYearLeap(jYear: number): boolean {\n    return this.numOfJLeapYears(jYear) !== this.numOfJLeapYears(jYear + 1);\n  }\n\n  /**\n   * Checks if jalali year is in acceptable range or not.\n   *\n   * [Implementation in source code]{@link https://github.com/sijad/ts-jalaali/blob/296a7c2fa1816a5bbb0b11bbe3eb03ebc17059f6/src/jalaali.ts#L27}\n   * @param jYear full jalali year like 1397\n   */\n  isValidJYear(jYear: number): boolean {\n    return jYear >= JalaliDateValidatorService._minAcceptableYear && jYear <= JalaliDateValidatorService._maxAcceptableYear;\n  }\n\n  /**\n   * Checks if jalali month is in valid range or not. In default, jMonth should start from zero.\n   * If you want to start month number from one instead of zero, you should make startFromZero parameter to false.\n   */\n  isValidJMonth(jMonth: number, startFromZero: boolean = true): boolean {\n    let minMonthNumber = 0;\n    let maxMonthNumber = 11;\n    if (!startFromZero) {\n      minMonthNumber++;\n      maxMonthNumber++;\n    }\n    return jMonth >= minMonthNumber && jMonth <= maxMonthNumber;\n  }\n\n  /**\n   * Checks if day number is in valid range according to the given year and month.\n   * @param jYear full jalali year like 1397\n   * @param jMonth month number starting from zero\n   * @param jDay day number starting from one\n   */\n  isValidJDay(jYear: number, jMonth: number, jDay: number): boolean {\n    return jDay <= this.jMonthLength(jYear, jMonth) && jDay > 0;\n  }\n\n  /**\n   * If Jalali date is not a valid Jalali date, return false. otherwise returns true.\n   * @param jYear full year number like: 1397\n   * @param jMonth starts from zero\n   * @param jDay starts from one\n   */\n  isValidJDate(jYear: number, jMonth: number, jDay: number): boolean {\n    return this.isValidJYear(jYear) && this.isValidJMonth(jMonth) && this.isValidJDay(jYear, jMonth, jDay);\n  }\n}\n","import {Injectable} from '@angular/core';\nimport {div, mod} from './ArithmeticUtils';\nimport {InvalidJalaliDateError} from './InvalidJalaliDate.error';\nimport {SimpleDateInterface} from './SimpleDate.interface';\nimport {JalaliDateValidatorService} from './jalali-date-validator.service';\n\n/**\n * This class converts Jalali date to Georgian and vase versa. You can use all of the methods as static methods.\n *\n */\n@Injectable({\n  providedIn: 'root'\n})\nexport class JalaliDateCalculatorService {\n\n  constructor(public validator: JalaliDateValidatorService) {}\n\n  /**\n   * Calculates the Julian Day number from Gregorian or Julian calendar dates.\n   *\n   * Only some code cleaning applied to the source code.\n   *\n   * The procedure was tested to be good since 1 March, -100100 (of both calendars) up to a few million years into the future.\n   *\n   * @param gDate an instance of javascript date representing a Georgian date.\n   *\n   * [Implementation in source code]{@link https://github.com/sijad/ts-jalaali/blob/296a7c2fa1816a5bbb0b11bbe3eb03ebc17059f6/src/jalaali.ts#L195}\n\n   */\n  numberOfPassedGDays(gDate: Date): number {\n    const gMonth = gDate.getMonth() - 7;\n    const gYear = gDate.getFullYear() + 100100;\n    const gMonthDiv = div(gMonth, 6);\n    const result = div((gYear + gMonthDiv) * 1461, 4) + div(153 * mod(gMonth + 17, 12) + 2, 5) + gDate.getDate() - 34840408;\n    return result - div(div(gYear + gMonthDiv, 100) * 3, 4) + 752;\n  }\n\n  /**\n   * Returns number of passed days from source day in jalali calendar to the given jalali date.\n   * @param jYear full jalali year like 1397\n   * @param jMonth starts from zero\n   * @param jDay day number starts from one\n   */\n  numberOfPassedJDays(jYear: number, jMonth: number, jDay: number): number {\n    return this.numberOfPassedGDays(new Date(this.jalaliYearToGeorgianYear(jYear), 2, this.firstDayOfJYearInMarch(jYear))) +\n      jMonth * 31 - div(jMonth + 1, 7) * (jMonth - 6) + jDay - 1;\n  }\n\n  /**\n   * Creates a javascript Date object from number of passed days in Georgian calendar representing Georgian date.\n   *\n   * [Implementation in source code]{@link https://github.com/sijad/ts-jalaali/blob/296a7c2fa1816a5bbb0b11bbe3eb03ebc17059f6/src/jalaali.ts#L213}\n   */\n  createGDateFromDays(numOfDays: number): Date {\n    const j = (4 * numOfDays + 139361631) + div(div(4 * numOfDays + 183187720, 146097) * 3, 4) * 4 - 3908;\n    const i = div(mod(j, 1461), 4) * 5 + 308;\n    const gDay = div(mod(i, 153), 5) + 1;\n    const gMonth = mod(div(i, 153), 12);\n    const gYear = div(j, 1461) - 100100 + div(7 - gMonth, 6);\n    return new Date(gYear, gMonth, gDay);\n  }\n\n  /**\n   * This function returns number of passed leap years from AD 621 until targetGYear.\n   * @param targetGYear is full year number like 2018\n   *\n   * [Implementation in source code]{@link https://github.com/sijad/ts-jalaali/blob/296a7c2fa1816a5bbb0b11bbe3eb03ebc17059f6/src/jalaali.ts#L110}\n   */\n  numOfGLeapYears(targetGYear: number): number {\n    return div(targetGYear, 4) - div((div(targetGYear, 100) + 1) * 3, 4) - 150;\n  }\n\n  /**\n   * first day of the Farvardin month in Jalali calendar is in March month. This method returns the day number of new jalali year in March.\n   * The day number starts from 1 not zero and is equal to the real numbers in the calendar.\n   * @param jYear full jalali year like 1397\n   */\n  firstDayOfJYearInMarch(jYear): number {\n    const gYear = jYear + 621;\n    return this.validator.numOfJLeapYears(jYear) - this.numOfGLeapYears(gYear) + 20;\n  }\n\n  /**\n   * Converts jalali year number to the georgian year. Output year is the georgian year that jalali year starts within it, not the year\n   * that starts in the winter of jalali year.\n   * @param jYear full jalali year like 1397\n   */\n  jalaliYearToGeorgianYear(jYear: number): number {\n    return jYear + 621;\n  }\n\n  /**\n   * Converts georgian year to the jalali year. Output year is the jalali year that start within the Georgian year.\n   * @param gYear full georgian year like 2018\n   */\n  georgianYearToJalaliYear(gYear: number): number {\n    return gYear - 621;\n  }\n\n  /**\n   * this method converts Georgian date to the jalali date. Output is an object implementing SimpleDateInterface.\n   *\n   * ATTENTION: month number starts from 0, but day number starts from 1. Just like native javascript Date object.\n   * @param gDate Georgian date as a javascript Date object.\n   *\n   * [Implementation in source code]{@link https://github.com/sijad/ts-jalaali/blob/296a7c2fa1816a5bbb0b11bbe3eb03ebc17059f6/src/jalaali.ts#L149}\n   */\n  convertToJalali(gDate: Date): SimpleDateInterface {\n    const georgianYear = gDate.getFullYear();\n    let jalaliYear = this.georgianYearToJalaliYear(georgianYear);\n    const passedDays = this.numberOfPassedGDays(gDate);\n    const numOfPassedDaysTo1Farvardin = this.numberOfPassedGDays(new Date(georgianYear, 2, this.firstDayOfJYearInMarch(jalaliYear)));\n\n    let jalaliDay: number;\n    let jalaliMonth: number;\n\n    // Find number of days that passed since 1 Farvardin.\n    let numOfDayInJYear = passedDays - numOfPassedDaysTo1Farvardin;\n    if (numOfDayInJYear >= 0) {\n      if (numOfDayInJYear <= 185) {\n        // The first 6 months.\n        jalaliMonth = div(numOfDayInJYear, 31);\n        jalaliDay = mod(numOfDayInJYear, 31) + 1;\n        return  {year: jalaliYear, month: jalaliMonth, day: jalaliDay};\n      } else {\n        // The remaining months.\n        numOfDayInJYear -= 186;\n      }\n    } else {\n      // Previous Jalali year.\n      jalaliYear -= 1;\n      numOfDayInJYear += 179;\n      if (this.validator.isJYearLeap(jalaliYear)) {\n        numOfDayInJYear += 1;\n      }\n    }\n    jalaliMonth = 6 + div(numOfDayInJYear, 30);\n    jalaliDay = mod(numOfDayInJYear, 30) + 1;\n    return {year: jalaliYear, month: jalaliMonth, day: jalaliDay};\n  }\n\n  /**\n   * Converts a valid jalali date to a javascript Date object representing a equivalent Georgian date.\n   * @param jYear a full Jalali year like 1397\n   * @param jMonth starts from zero\n   * @param jDay starts from 1\n   * @throws InvalidJalaliDateError when inputted date is not a valid Jalali date.\n   */\n  convertToGeorgian(jYear: number, jMonth: number, jDay: number): Date {\n    if (!this.validator.isValidJDate(jYear, jMonth, jDay)) { throw new InvalidJalaliDateError(); }\n    return this.createGDateFromDays(this.numberOfPassedJDays(jYear, jMonth, jDay));\n  }\n\n}\n","import {JalaliDateCalculatorService} from './jalali-date-calculator.service';\nimport {InvalidJalaliDateError} from './InvalidJalaliDate.error';\nimport {JalaliDateValidatorService} from './jalali-date-validator.service';\n\n/**\n * This class represents a complete Date object for Jalali dates. It accepts jalali Dates, converts Georgian dates to jalali and implements\n * all the behaviours of default Date object of JavaScript for Jalali Date, plus some additional methods for developers convenience.\n *\n * ATTENTION:\n *\n * UTC methods are not implemented for Jalali date. They working directly on gDate object (Corresponding date in Georgian) and changing\n * properties of this. Then new JDate object will create from the modified Georgian Date. So they may Cause unpredictable behaviour.\n * Please don't use UTC methods with \"todo\" tag on them unless you are sure about the behaviour.\n * Recreating objects are safer than working with UTC methods.\n */\nexport class JDate implements Date{\n\n  private static EN_MONTHS = ['Farvardin', 'Ordibehesht', 'Khordad', 'Tir', 'Mordad', 'Shahrivar', 'Mehr', 'Aban', 'Azar', 'Dey', 'Behman', 'Esfand'];\n  private static FA_MONTHS = ['ÙØ±ÙØ±Ø¯ÛÙ', 'Ø§Ø±Ø¯ÛØ¨ÙØ´Øª', 'Ø®Ø±Ø¯Ø§Ø¯', 'ØªÛØ±', 'ÙØ±Ø¯Ø§Ø¯', 'Ø´ÙØ±ÛÙØ±', 'ÙÙØ±', 'Ø¢Ø¨Ø§Ù', 'Ø¢Ø°Ø±', 'Ø¯Û', 'Ø¨ÙÙÙ', 'Ø§Ø³ÙÙØ¯'];\n  private static DAYS_OF_WEEK = ['Ø¬ÙØ¹Ù', 'Ø´ÙØ¨Ù', 'ÛÚ©Ø´ÙØ¨Ù', 'Ø¯ÙØ´ÙØ¨Ù', 'Ø³ÙâØ´ÙØ¨Ù', 'ÚÙØ§Ø±Ø´ÙØ¨Ù', 'Ù¾ÙØ¬âØ´ÙØ¨Ù'];\n  private static EN_DAYS_OF_WEEK = ['Jom\\'e', 'Shanbe', 'Yekshanbe', 'Doshanbe', 'Seshanbe', 'Cheharshanbe', 'Panjshanbe'];\n  private static COMPLETE_BEFORE_NOON = 'ÙØ¨Ù Ø§Ø² Ø¸ÙØ±';\n  private static COMPLETE_AFTER_NOON = 'Ø¨Ø¹Ø¯ Ø§Ø² Ø¸ÙØ±';\n  private static SHORT_BEFORE_NOON = 'Ù.Ø¸';\n  private static SHORT_AFTER_NOON = 'Ø¨.Ø¸';\n\n  private _gDate: Date;\n  private _jYear: number;\n  private _jMonth: number;\n  private _jDay: number;\n  private _calculator: JalaliDateCalculatorService = new JalaliDateCalculatorService(new JalaliDateValidatorService());\n\n  /**\n   * If input value length is shorter than desiredLength, adds zeros at the beginning of it until meets desired length.\n   * @param value a number or string that we want have a specific length\n   * @param desiredLength length of output string. If be shorter than input length, input will return.\n   */\n  public static zeroPadding(value: number | string, desiredLength: number): string {\n    value = value.toString();\n    while (value.length < desiredLength) {\n      value = '0' + value;\n    }\n    return value;\n  }\n\n  /**\n   * Extracts Georgian Date object from a Jalali date string.\n   * @param dateString a Jalali date string following this pattern:\n   *\n   *        \"yyyy mmm dd HH:MM:SS\"\n   *        or this pattern:\n   *\n   *        \"yyyy mmmm dd HH:MM:SS\".\n   * @example 11 Ø¯Û 1348 00:00:00\n   * @example 11 Dey 1348 00:00:00\n   * @return a Georgian Date object.\n   */\n  public static parse(dateString: string): number {\n    const calculator = new JalaliDateCalculatorService(new JalaliDateValidatorService());\n    const dateArray = dateString.split(' ');\n    if (dateArray.length < 3) { throw new InvalidJalaliDateError(); }\n    const day = parseInt(dateArray[0]);\n    let month = JDate.FA_MONTHS.indexOf(dateArray[1]);\n    if (month === -1) { month = JDate.EN_MONTHS.indexOf(dateArray[1]); }\n    if (month === -1) { throw new InvalidJalaliDateError(); }\n    const year = parseInt(dateArray[2]);\n    const timeArray = dateArray.length > 3 ? dateArray[3].split(':') : ['0', '0', '0'];\n    const hour = parseInt(timeArray[0]);\n    const min = parseInt(timeArray[1]);\n    const sec = parseInt(timeArray[2]);\n    const gDate = calculator.convertToGeorgian(year, month, day);\n    gDate.setHours(hour, min, sec);\n    return gDate.getTime();\n  }\n\n\n  /**\n   * For creating a JDate object, you have 5 different options.\n   *\n   * 1- If you want to have current date and time, you can simply call new JDate() without any parameter.\n   *\n   * 2- If you want to create JDate object from a jalali date string as described in the `pars` method document, you can pass that string as\n   *    first parameter and leave others empty.\n   *\n   * 3 - If you want to create JDate object from number of passed milliseconds from UNIX epoch (for example creating a Jalali date object\n   *     from result of getTime method of another Date object), you can pass the number as first parameter and leave others alone.\n   *\n   * 4 - If you want to create JDate object from a Georgian Date object, you can simply pass that Date object as first parameter and leave\n   *     others empty.\n   *\n   * 5- If you want to create JDate object from date and time values, you can simply fill corresponding parameters of each date and time\n   * value to the constructor. You don't have to fill all of the parameters. only those you need. other parameters will fill with zero.\n   * Examples of all of those scenarios:\n   *\n   * @example new JDate()\n   * @example new JDate('11 Ø¯Û 1348 00:00:00')\n   * @example new JDate(-12600000)\n   * @example new JDate(new Date(2018, 0, 1))\n   * @example new JDate(1397, 0, 25)\n   * @example new JDate(1397, 11, 25, 12, 32, 45, 123)\n   * @param jYear\n   * @param jMonth Month number starting from 0 and should be LESSER than 12.\n   * @param jDay\n   * @param hours\n   * @param minutes\n   * @param seconds\n   * @param milliseconds\n   * @throws InvalidJalaliDateError\n   */\n  constructor(jYear?: number | string | Date, jMonth?: number, jDay?: number, hours: number = 0, minutes: number = 0,\n              seconds: number = 0, milliseconds: number = 0) {\n    if (!jYear) {\n      this._createFromDate(new Date());\n    } else if (typeof jYear === 'string' && jMonth === undefined) {\n      this._createFromDate(new Date(JDate.parse(jYear)));\n    } else if (typeof jYear === 'number' && jMonth === undefined) {\n      this._createFromDate(new Date(jYear));\n    } else if (jYear instanceof Date && jMonth === undefined) {\n      this._createFromDate(jYear);\n    }\n    else {\n      // @ts-ignore\n      this._gDate = this._calculator.convertToGeorgian(jYear, jMonth, jDay);\n      // @ts-ignore\n      this._jYear = jYear;\n      this._jMonth = jMonth;\n      this._jDay = jDay;\n      this._gDate.setHours(hours, minutes, seconds, milliseconds);\n    }\n    this._check_date_validity();\n  }\n\n  /**\n   * This method recalculates the gDate value with private attributes those storing Jalali date parts.\n   */\n  private _renewGDate(): void {\n    this._gDate = this._calculator.convertToGeorgian(this._jYear, this._jMonth, this._jDay);\n  }\n\n  /**\n   * Sets Jalali year value to the input parameter and recalculates gDate attribute.\n   * @param value full Jalali year like 1397\n   */\n  private set jYear(value: number) {\n    this._jYear = value;\n    this._check_date_validity();\n    this._renewGDate();\n  }\n\n  /**\n   * Sets Jalali month value to the input parameter and recalculates gDate attribute.\n   * @param value month number starting from zero\n   */\n  private set jMonth(value: number) {\n    this._jMonth = value;\n    this._check_date_validity();\n    this._renewGDate();\n  }\n\n  /**\n   * Sets Jalali day value to the input parameter and recalculates gDate attribute.\n   * @param value day number starting from 1.\n   */\n  private set jDay(value: number) {\n    this._jDay = value;\n    this._check_date_validity();\n    this._renewGDate();\n  }\n\n  /**\n   * throws InvalidJalaliDateError when date values of this object won't represent a valid Jalali date.\n   * Otherwise nothing happens.\n   * @throws InvalidJalaliDateError\n   */\n  private _check_date_validity(): void{\n    if (!this._calculator.validator.isValidJDate(this._jYear, this._jMonth, this._jDay)) { throw new InvalidJalaliDateError(); }\n  }\n\n  /**\n   * Calculates Jalali year from Georgian Date object and sets the attributes of the object to proper values.\n   * @param gDate\n   */\n  private _createFromDate(gDate: Date) {\n    const conversionResult = this._calculator.convertToJalali(gDate);\n    this._jYear = conversionResult.year;\n    this._jMonth = conversionResult.month;\n    this._jDay = conversionResult.day;\n    this._gDate = gDate;\n  }\n\n  [Symbol.toPrimitive](hint: \"default\"): string;\n\n  [Symbol.toPrimitive](hint: \"string\"): string;\n\n  [Symbol.toPrimitive](hint: \"number\"): number;\n\n  [Symbol.toPrimitive](hint: string): string | number;\n\n  [Symbol.toPrimitive](hint: \"default\" | \"string\" | \"number\" | string): string | number {\n    return undefined;\n  }\n\n  /**\n   * @return a regular javascript Date object representing Georgian date corresponding to the Jalili date of the JDate object.\n   */\n  getGeorgianDate(): Date {\n    return this._gDate;\n  }\n\n  /**\n   * @return the day of the month for the specified date according to local time.\n   */\n  getDate(): number {\n    return this._jDay;\n  }\n\n  /**\n   *  @return the day of the week for the specified date according to local time, where 0 represents Friday and 6 is Thursday.\n   */\n  getDay(): number {\n    return (this._gDate.getDay() + 2) % 7;\n  }\n\n  /**\n   * @return the year (4 digits for years greater than 999) of the specified date according to local time\n   * @example 1397\n   * @example 100\n   * */\n  getFullYear(): number {\n    return this._jYear;\n  }\n\n  /**\n   * @return the hour for the specified date, according to local time.\n   * @example 10\n   */\n  getHours(): number {\n    return this._gDate.getHours();\n  }\n\n  /**\n   * Converts default 24-hour clock hour value to the 12-hour clock version.\n   * @return a number between 1 to 12\n   */\n  getHours12hourClock(): number {\n    const result = this.getHours() % 12;\n    return result ? result : 12;\n  }\n\n  /**\n   * @return the milliseconds in the specified date according to local time.\n   */\n  getMilliseconds(): number {\n    return this._gDate.getMilliseconds();\n  }\n\n  /**\n   * @Return the minutes in the specified date according to local time.\n   */\n  getMinutes(): number {\n    return this._gDate.getMinutes();\n  }\n\n  /**\n   * @return the month in the specified date according to local time, as a zero-based value\n   * where zero indicates the first month of the year.\n   */\n  getMonth(): number {\n    return this._jMonth;\n  }\n\n  /**\n   * @return the seconds in the specified date according to local time.\n   */\n  getSeconds(): number {\n    return this._gDate.getSeconds();\n  }\n\n  /**\n   * JavaScript uses milliseconds as the unit of measurement, whereas Unix Time is in seconds.\n   *\n   * getTime() always uses UTC for time representation. For example, a client browser in one timezone, getTime() will be the same as a\n   * client browser in any other timezone.\n   *\n   *You can use this method to help assign a date and time to another Date object. This method is functionally equivalent to the valueOf() method.\n   * @return the number of milliseconds since the Unix Epoch.\n   */\n  getTime(): number {\n    return this._gDate.getTime();\n  }\n\n  /**\n   * Attention: Not implemented\n   * @return the time zone difference, in minutes, from current locale (host system settings) to UTC\n   * @todo add implementation\n   */\n  getTimezoneOffset(): number {\n    return this._gDate.getTimezoneOffset();\n  }\n\n  /**\n   * Output is not jalali day.\n   * @return getUTCDate of the corresponding Georgian date.\n   * @todo add implementation\n   */\n  getUTCDate(): number {\n    return this._gDate.getUTCDate();\n  }\n\n  /**\n   * Output is not jalali day.\n   * @return getUTCDay of the corresponding Georgian date.\n   * @todo add implementation\n   */\n  getUTCDay(): number {\n    return this._gDate.getUTCDay();\n  }\n\n  /**\n   * Output is not a Jalali Year.\n   * @return getUTCFullYear of the corresponding Georgian date.\n   * @todo add implementation\n   */\n  getUTCFullYear(): number {\n    return this._gDate.getUTCFullYear();\n  }\n\n  /**\n   * @return getUTCHours of the corresponding Georgian date.\n   * @todo add implementation\n   */\n  getUTCHours(): number {\n    return this._gDate.getUTCHours();\n  }\n\n  /**\n   * @return getUTCMilliseconds of the corresponding Georgian date.\n   * @todo add implementation\n   */\n  getUTCMilliseconds(): number {\n    return this._gDate.getUTCMilliseconds();\n  }\n\n  /**\n   * @return getUTCMinutes of the corresponding Georgian date.\n   * @todo add implementation\n   */\n  getUTCMinutes(): number {\n    return this._gDate.getUTCMinutes();\n  }\n\n  /**\n   * Output is not a Jalali Year.\n   * @return getUTCMonth of the corresponding Georgian date.\n   * @todo add implementation\n   */\n  getUTCMonth(): number {\n    return this._gDate.getUTCMonth();\n  }\n\n  /**\n   * @return getUTCSeconds of the corresponding Georgian date.\n   * @todo add implementation\n   */\n  getUTCSeconds(): number {\n    return this._gDate.getUTCSeconds();\n  }\n\n  /**\n   * sets the day of the JDate object relative to the beginning of the currently set month.\n   * @param date day number starts from 1.\n   * @return The number of milliseconds between 1 January 1970 00:00:00 UTC and the given date (the Date object is also changed in place).\n   */\n  setDate(date: number): number {\n    this.jDay = date;\n    return this.getTime();\n  }\n\n  /**\n   * sets the full year for a specified date according to local time. Returns new timestamp.\n   * @param year full Jalali year like 1397\n   * @param month number of month starting from 0\n   * @param date number of day starting from 1\n   */\n  setFullYear(year: number, month?: number, date?: number): number {\n    this.jYear = year;\n    if (month) { this.jMonth = month; }\n    if (date) {this.jDay = date; }\n    return this.getTime();\n  }\n\n  /**\n   * Sets the hours for a specified date according to local time, and returns the number of milliseconds since\n   * January 1, 1970 00:00:00 UTC until the time represented by the updated JDate instance.\n   * @param hours An integer between 0 and 23, representing the hour\n   * @param min An integer between 0 and 59, representing the minutes.\n   * @param sec An integer between 0 and 59, representing the seconds.\n   * @param ms A number between 0 and 999, representing the milliseconds.\n   * @return The number of milliseconds between January 1, 1970 00:00:00 UTC and the updated date.\n   */\n  setHours(hours: number, min?: number, sec?: number, ms?: number): number {\n    this._gDate.setHours(hours);\n    if (min !== undefined) { this.setMinutes(min); }\n    if (sec !== undefined) { this.setSeconds(sec); }\n    if (ms !== undefined) { this.setMilliseconds(ms); }\n    return this.getTime();\n  }\n\n  /**\n   * Sets the milliseconds for a specified date according to local time.\n   * @param ms A number between 0 and 999, representing the milliseconds.\n   * @return The number of milliseconds between 1 January 1970 00:00:00 UTC and the updated date.\n   */\n  setMilliseconds(ms: number): number {\n    this._gDate.setMilliseconds(ms);\n    return this.getTime();\n  }\n\n  /**\n   * Sets the minutes for a specified date according to local time.\n   * @param min An integer between 0 and 59, representing the minutes.\n   * @param sec An integer between 0 and 59, representing the seconds.\n   * @param ms A number between 0 and 999, representing the milliseconds.\n   * @return The number of milliseconds between 1 January 1970 00:00:00 UTC and the updated date.\n   */\n  setMinutes(min: number, sec?: number, ms?: number): number {\n    this._gDate.setMinutes(min);\n    if(sec !== undefined) { this.setSeconds(sec); }\n    if (ms !== undefined) { this.setMilliseconds(ms); }\n    return this.getTime();\n  }\n\n  /**\n   * Sets the month for a specified date according to the currently set year.\n   * @param month An integer between 0 and 11, representing the months Farvardin through Esfand.\n   * @param date An integer from 1 to 31, representing the day of the month.\n   * @return The number of milliseconds between 1 January 1970 00:00:00 UTC and the updated date.\n   */\n  setMonth(month: number, date?: number): number {\n    this.jMonth = month;\n    if (date !== undefined) { this.jDay = date; }\n    return this.getTime();\n  }\n\n  /**\n   * Sets the seconds for a specified date according to local time.\n   * @param sec An integer between 0 and 59, representing the seconds.\n   * @param ms A number between 0 and 999, representing the milliseconds.\n   * @return The number of milliseconds between 1 January 1970 00:00:00 UTC and the updated date.\n   */\n  setSeconds(sec: number, ms?: number): number {\n    this._gDate.setSeconds(sec);\n    if (ms !== undefined) { this.setMilliseconds(ms); }\n    return this.getTime();\n  }\n\n  /**\n   * Sets the JDate object to the time represented by a number of milliseconds since January 1, 1970, 00:00:00 UTC.\n   * @param time sets the Date object to the time represented by a number of milliseconds since January 1, 1970, 00:00:00 UTC.\n   * @return The number of milliseconds between 1 January 1970 00:00:00 UTC and the updated date.\n   */\n  setTime(time: number): number {\n    this._createFromDate(new Date(time));\n    return time;\n  }\n\n  /**\n   * sets the day of the month for a specified date according to universal time.\n   * Then recreate the JDate object from new Georgian object.\n   * @param  date An integer from 1 to 31, representing the day of the month.\n   * @return The number of milliseconds between 1 January 1970 00:00:00 UTC and the updated date.\n   * @todo add implementation\n   */\n  setUTCDate(date: number): number {\n    this._gDate.setUTCDate(date);\n    this._createFromDate(this._gDate);\n    return this.getTime();\n  }\n\n  /**\n   * Sets the full year for a specified date according to universal time.\n   * Then recreate the JDate object from new Georgian object.\n   * @param year  An integer specifying the numeric value of the year, for example, 1995.\n   * @param month  Optional. An integer between 0 and 11 representing the months January through December.\n   * @param date An integer between 1 and 31 representing the day of the month. If you specify the dayValue parameter, you must also\n   * specify the monthValue.\n   * @todo add implementation\n   */\n  setUTCFullYear(year: number, month?: number, date?: number): number {\n    this._gDate.setUTCFullYear(year, month, date);\n    this._createFromDate(this._gDate);\n    return this.getTime();\n  }\n\n  /**\n   * Sets the hour for a specified date according to universal time, and returns the number of milliseconds since\n   * January 1, 1970 00:00:00 UTC until the time represented by the updated Date instance.\n   * Then recreate the JDate object from new Georgian object.\n   * @param hours  An integer between 0 and 23, representing the hour.\n   * @param min Optional. An integer between 0 and 59, representing the minutes.\n   * @param sec Optional. An integer between 0 and 59, representing the seconds. If you specify the secondsValue parameter,\n   *        you must also specify the minutesValue.\n   * @param ms Optional. A number between 0 and 999, representing the milliseconds. If you specify the msValue parameter,\n   *        you must also specify the minutesValue and secondsValue.\n   * @return The number of milliseconds between January 1, 1970 00:00:00 UTC and the updated date.\n   * @todo add implementation\n   */\n  setUTCHours(hours: number, min?: number, sec?: number, ms?: number): number {\n    this._gDate.setUTCHours(hours, min, sec, ms);\n    this._createFromDate(this._gDate);\n    return this.getTime();\n  }\n\n  /**\n   * Sets the milliseconds for a specified date according to universal time.\n   *\n   * Then recreate the JDate object from new Georgian object.\n   * @param ms A number between 0 and 999, representing the milliseconds.\n   * @return The number of milliseconds between 1 January 1970 00:00:00 UTC and the updated date.\n   * @todo add implementation\n   */\n  setUTCMilliseconds(ms: number): number {\n    this._gDate.setUTCMilliseconds(ms);\n    this._createFromDate(this._gDate);\n    return this.getTime();\n  }\n\n  /**\n   * Sets the minutes for a specified date according to universal time.\n   *\n   * Then recreate the JDate object from new Georgian object.\n   * @param min An integer between 0 and 59, representing the minutes.\n   * @param sec Optional. An integer between 0 and 59, representing the seconds. If you specify the secondsValue parameter,\n   *        you must also specify the minutesValue.\n   * @param ms Optional. A number between 0 and 999, representing the milliseconds. If you specify the msValue parameter,\n   *        you must also specify the minutesValue and secondsValue.\n   * @return The number of milliseconds between 1 January 1970 00:00:00 UTC and the updated date.\n   * @todo add implementation\n   */\n  setUTCMinutes(min: number, sec?: number, ms?: number): number {\n    this._gDate.setUTCMinutes(min, sec, ms);\n    this._createFromDate(this._gDate);\n    return this.getTime();\n  }\n\n  /**\n   * Sets the month for a specified date according to universal time.\n   *\n   * Then recreate the JDate object from new Georgian object.\n   * @param month An integer between 0 and 11, representing the months January through December.\n   * @param date Optional. An integer from 1 to 31, representing the day of the month.\n   * @return The number of milliseconds between 1 January 1970 00:00:00 UTC and the updated date.\n   * @todo add implementation\n   */\n  setUTCMonth(month: number, date?: number): number {\n    this._gDate.setUTCMonth(month, date);\n    this._createFromDate(this._gDate);\n    return this.getTime();\n  }\n\n  /**\n   * Sets the seconds for a specified date according to universal time.\n   *\n   * Then recreate the JDate object from new Georgian object.\n   * @param sec An integer between 0 and 59, representing the seconds.\n   * @param ms Optional. A number between 0 and 999, representing the milliseconds.\n   * @todo add implementation\n   */\n  setUTCSeconds(sec: number, ms?: number): number {\n    this._gDate.setUTCSeconds(sec, ms);\n    this._createFromDate(this._gDate);\n    return this.getTime();\n  }\n\n  /**\n   * @return name of the day of the week in persian.\n   * @example Ø¯ÙØ´ÙØ¨Ù\n   */\n  getNameOfTheDay(): string {\n    return JDate.DAYS_OF_WEEK[this.getDay()];\n  }\n\n  /**\n   * @return name of the month in persian.\n   * @example ÙÙØ±\n   */\n  getNameOfTheMonth(): string {\n    return JDate.FA_MONTHS[this.getMonth()];\n  }\n\n  /**\n   * returns the date portion of a Date object in human readable form in Persian.\n   * @return a string following this pattern: \"nameOfTheDay nameOfTheMonth dayNumber fullYear\".\n   * @example Ù¾ÙØ¬âØ´ÙØ¨Ù Ø§Ø³ÙÙØ¯ 30 1375\n   */\n  toDateString(): string {\n    return `${this.getNameOfTheDay()} ${this.getNameOfTheMonth()} ${this.getDate()} ${this.getFullYear()}`;\n  }\n\n  /**\n   * Returns time marker of object time. all hour numbers lesser than 12 are before noon and all greater than 12 are after noon.\n   * @param shortVersion controls output. if be true, output will be in short format like: Ø¨.Ø¸ if be false, output will be in complete format like: Ø¨Ø¹Ø¯ Ø§Ø² Ø¸ÙØ±\n   * @return time marker for showing if time is before noon or after it\n   */\n  getTimeMarker(shortVersion: boolean = false): string {\n    if (this.getHours() < 12) { return shortVersion ? JDate.SHORT_BEFORE_NOON : JDate.COMPLETE_BEFORE_NOON; }\n    return shortVersion ? JDate.SHORT_AFTER_NOON : JDate.COMPLETE_AFTER_NOON;\n  }\n\n  /**\n   * Replace patterns of date formatting with corresponding strings from JDate object values.\n   * In bi-character pattern parts, missed digits will fill with zero.\n   * @param pattern a pattern string with replaceable parts:\n   *\n   *        yyyy -> Year number in 4-digit representation. ex: 1397\n   *\n   *        yy -> Year number in 2-digit representation. ex: 97\n   *\n   *        mmmm -> Name of the month in English representation. ex: Esfand\n   *\n   *        mmm -> Name of the month in Persian representation. ex: Ø§Ø³ÙÙØ¯\n   *\n   *        mm -> 2-digit number of the month starting from 1\n   *\n   *        m -> non zero-padding number of the month starting from 1\n   *\n   *        dddd -> Name of the day in the week in English representation. ex: Shanbe\n   *\n   *        ddd -> Name of the day in the week id Persian representation. ex: Ø´ÙØ¨Ù\n   *\n   *        dd -> 2-digit number of the day in the month starting from 1\n   *\n   *        d -> non zero-padding number of the day in the month starting from 1\n   *\n   * @return A formatted string that all Date pattern parts has been replaced. Other characters of the pattern will left unchanged.\n   */\n  private _format_date(pattern: string): string {\n    return pattern.replace(/yyyy/g, JDate.zeroPadding(this.getFullYear(), 4))\n      .replace(/\\byy\\b/g, (this.getFullYear() % 100).toString())\n      .replace(/\\bmmmm\\b/g, JDate.EN_MONTHS[this.getMonth()])\n      .replace(/\\bmmm\\b/g, JDate.FA_MONTHS[this.getMonth()])\n      .replace(/\\bmm\\b/g, JDate.zeroPadding(this.getMonth() + 1, 2))\n      .replace(/\\bm\\b/g, (this.getMonth() + 1).toString())\n      .replace(/\\bdddd\\b/g, JDate.EN_DAYS_OF_WEEK[this.getDay()])\n      .replace(/\\bddd\\b/g, JDate.DAYS_OF_WEEK[this.getDay()])\n      .replace(/\\bdd\\b/g, JDate.zeroPadding(this.getDate(), 2))\n      .replace(/\\bd\\b/g, this.getDate().toString())\n  }\n\n  /**\n   * Replace patterns of time formatting with corresponding strings from JDate object values.\n   *\n   * In bi-character pattern parts, missed digits will fill with zero.\n   * @param pattern a pattern string with replaceable parts:\n   *\n   *        HH -> 2-digit form of hour number in 24-hour clock format.\n   *\n   *        H -> non zero-padding form of hour number in 24-hour clock format.\n   *\n   *        hh -> 2-digit form of hour number in 12-hour clock format.\n   *\n   *        h -> non zero-padding form of hour number in 12-hour clock format.\n   *\n   *        H -> non zero-padding form of hour number in 12-hour clock format.\n   *\n   *        MM -> 2-digit form of minutes number.\n   *\n   *        M -> non zero-padding form of minutes number\n   *\n   *        SS -> 2-digit form of seconds number.\n   *\n   *        S -> non zero-padding form of seconds number.\n   *\n   *        l -> number of milliseconds\n   *\n   *        T -> Time marker in full format like: ÙØ¨Ù Ø§Ø² Ø¸ÙØ±\n   *\n   *        t -> Time marker in short format like: Ù.Ø¸\n   */\n  private _format_time(pattern: string): string {\n    return pattern.replace(/\\bHH\\b/g, JDate.zeroPadding(this.getHours(), 2))\n      .replace(/\\bH\\b/g, this.getHours().toString())\n      .replace(/\\bhh\\b/g, JDate.zeroPadding(this.getHours12hourClock(), 2))\n      .replace(/\\bh\\b/g, this.getHours12hourClock().toString())\n      .replace(/\\bMM\\b/g, JDate.zeroPadding(this.getMinutes(), 2))\n      .replace(/\\bM\\b/g, this.getMinutes().toString())\n      .replace(/\\bSS\\b/g, JDate.zeroPadding(this.getSeconds(), 2))\n      .replace(/\\bS\\b/g, this.getSeconds().toString())\n      .replace(/\\bl\\b/g, this.getMilliseconds().toString())\n      .replace(/\\bT\\b/g, this.getTimeMarker(false))\n      .replace(/\\bt\\b/g, this.getTimeMarker(true));\n  }\n\n  /**\n   * This method format date and time stored in the JDate object according to the entered pattern.\n   *\n   * Only masks will replace and all other characters will be unchanged after formatting.\n   *\n   * You can use masks several times in a pattern but be careful because if some of masks written immediately, they create new masks with\n   * different meaning. It's better to always have some splitter characters between different masks.\n   * @param pattern a string containing zero or more formatting mask.\n   *\n   * Masks:\n   *\n   *        yyyy -> Year number in 4-digit representation. Leading zero for years lesser than 1000 ex: 1397\n   *\n   *        yy -> Year number in 2-digit representation without Leading zeros. ex: 97\n   *\n   *        mmmm -> Name of the month in English representation. ex: Esfand\n   *\n   *        mmm -> Name of the month in Persian representation. ex: Ø§Ø³ÙÙØ¯\n   *\n   *        mm -> 2-digit number of the month starting from 1. Leading zero for single-digit months.\n   *\n   *        m -> number of the month starting from 1 without Leading zeros.\n   *\n   *        dddd -> Name of the day in the week in English representation. ex: Shanbe\n   *\n   *        ddd -> Name of the day in the week id Persian representation. ex: Ø´ÙØ¨Ù\n   *\n   *        dd -> 2-digit number of the day in the month starting from 1. Leading zero for single-digit days.\n   *\n   *        d -> number of the day in the month starting from 1 without Leading zeros.\n   *\n   *        HH -> 2-digit form of hour number in 24-hour clock format. Leading zero for single-digit hours.\n   *\n   *        H -> non zero-padding form of hour number in 24-hour clock format without Leading zeros.\n   *\n   *        hh -> 2-digit form of hour number in 12-hour clock format. Leading zero for single-digit hours.\n   *\n   *        H -> non zero-padding form of hour number in 12-hour clock format without Leading zeros.\n   *\n   *        MM -> 2-digit form of minutes number. Leading zero for single-digit minutes.\n   *\n   *        M -> non zero-padding form of minutes number without Leading zeros.\n   *\n   *        SS -> 2-digit form of seconds number. Leading zero for single-digit seconds.\n   *\n   *        S -> non zero-padding form of seconds number without Leading zeros.\n   *\n   *        l -> number of milliseconds without Leading zeros.\n   *\n   *        T -> Time marker in full format like: ÙØ¨Ù Ø§Ø² Ø¸ÙØ±\n   *\n   *        t -> Time marker in short format like: Ù.Ø¸\n   *@return formatted dateTime string.\n   */\n  format(pattern: string): string {\n    return this._format_time(this._format_date(pattern));\n  }\n\n  /**\n   * @return a string in simplified extended ISO format (ISO 8601), which is always 24 or 27 characters long (yyyy-mm-ddTHH:MM:SS.lZ).\n   *        Be careful because that T in the middle of the pattern is not a format Mask and is a simple character.\n   */\n  toISOString(): string {\n    return this.format('yyyy-mm-dd') + 'T' + this.format('HH:MM:SS.l') + 'Z';\n  }\n\n  /**\n   * @return a string representation of the Date object.\n   * [see toString method]{@link toString}\n   * @param key\n   */\n  toJSON(key?: any): string {\n    return this.toString();\n  }\n\n  /**\n   * returns formatted date with following pattern: 'ddd mmm d yyyy HH:MM:SS'\n   */\n  toString(): string {\n    return this.format('ddd mmm d yyyy HH:MM:SS')\n  }\n\n  /**\n   * [For more information see javascript Date object documentation about this method]{@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/toLocaleDateString}\n   *\n   * The new locales and options arguments let applications specify the language whose formatting conventions\n   * should be used and allow to customize the behavior of the function. In older implementations,\n   * which ignore the locales and options arguments, the locale used and the form of the string returned are\n   * entirely implementation dependent.\n   *\n   * @return a string with a language sensitive representation of the date portion of this date.\n   */\n  toLocaleDateString(): string;\n  toLocaleDateString(locales?: string | string[], options?: Intl.DateTimeFormatOptions): string;\n  toLocaleDateString(locales?: string | string[], options?: Intl.DateTimeFormatOptions): string {\n    return this._gDate.toLocaleDateString(locales, options);\n  }\n\n  /**\n   * @return toLocaleTimeString of Georgian Date .\n   * [For more information see javascript Date object documentation about this method]{@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/toLocaleTimeString}\n   */\n  toLocaleTimeString(): string;\n  toLocaleTimeString(locales?: string | string[], options?: Intl.DateTimeFormatOptions): string;\n  toLocaleTimeString(locales?: string | string[], options?: Intl.DateTimeFormatOptions): string {\n    return this._gDate.toLocaleTimeString(locales, options);\n  }\n\n  /**\n   * @return toTimeString of Georgian date\n   *\n   * [For more information see javascript Date object documentation about this method]{@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/toTimeString}\n   */\n  toTimeString(): string {\n    return this._gDate.toTimeString();\n  }\n\n  /**\n   * @return toUTCString of Georgian date.\n   *\n   * [For more information see javascript Date object documentation about this method]{@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/toUTCString}\n   * @todo add implementation\n   */\n  toUTCString(): string {\n    return this._gDate.toUTCString();\n  }\n\n  /**\n   * Similar to the getTime method.\n   *\n   * [For more information also see getTime method]{@link getTime}\n   */\n  valueOf(): number {\n    return this.getTime();\n  }\n\n  addMonth(incValue: number): void {\n    // let newMonth: number = (this.getMonth() + incValue) % 11;\n    // let passedYears: number = this.getFullYear() + newMonth / 11;\n    // let newYear: number = newMonth === 0 ? ;\n    // this.setFullYear(newYear);\n    // this.setMonth(newMonth % 11);\n  }\n}\n\n","import { Pipe, PipeTransform } from '@angular/core';\nimport {JDate} from '../JDate/jdate';\n\n/**\n * Pre-defined formats date formats those can use for formatting JDate objects with jdate pipe.\n */\nenum FromatNames {\n  'short' = 'yy/m/d h:M t',\n  'shortDate' = 'yy/m/d h:M t',\n  'medium' = 'd mmm yyyyØ h:M t',\n  'mediumDate' = 'd mmm yyyyØ h:M t',\n  'long' = 'd mmm yyyyØ h:M:S T',\n  'longDate' = 'd mmm yyyyØ h:M:S T',\n  'shortTime' = 'h:M t',\n  'mediumTime' = 'h:M:S t',\n  'longTime' = 'h:M:S.l T',\n}\n\n/**\n * Formats JDate objects or convert Date objects (or any instance of classes those implement that interface) to a `JDate` object and format\n * that according to the given format.\n *\n * The result of this pipe is not reevaluated when the input is mutated. To avoid the need to reformat the date on every change-detection\n * cycle, treat the date as an immutable object and change the reference when the pipe needs to run again.\n *\n * You can pass a format pattern string like [JDate format method]{@link https://alihoseiny.github.io/ngx-persian/classes/JDate.html#format}\n *\n * Also you can use pre-defined format names described below:\n *\n *        'short': equivalent to yy/m/d h:M t {@example '97/2/23 12:12 Ø¨.Ø¸'}\n *\n *        'shortDate': same as short\n *\n *        'medium': equivalent to 'd mmm yyyyØ h:M t' {@example '23 Ø§Ø±Ø¯ÛØ¨ÙØ´Øª 1397Ø 12:12 Ø¨.Ø¸'}\n *\n *        'mediumDate': same as medium\n *\n *        'long': equivalent to 'd mmm yyyyØ h:M:S T' {@example '23 Ø§Ø±Ø¯ÛØ¨ÙØ´Øª 1397Ø 12:12:30 Ø¨Ø¹Ø¯ Ø§Ø² Ø¸ÙØ±'}\n *\n *        'longDate': same as long\n *\n *        'shortTime': equivalent to 'h:M t' {@example '12:12 Ø¨.Ø¸'}\n *\n *        'mediumTime': equivalent to 'h:M:S t' {@example '12:12:30 Ø¨.Ø¸'}\n *\n *        'longTime': equivalent to 'h:M:S.l T' {@example '12:12:30.300 Ø¨Ø¹Ø¯ Ø§Ø² Ø¸ÙØ±'}\n *\n *  Default format is `medium`.\n */\n@Pipe({\n  name: 'jdate'\n})\nexport class JdatePipe implements PipeTransform {\n\n  /**\n   * Checks if `formatName` is in the `FromatNames` enum. If it is, returns related format string. Else returns `formatName` string\n   * without any change.\n   * @param formatName format name or format pattern string\n   * @return formatting pattern string\n   */\n  private static convertNameToFormat(formatName: string): string {\n    if (!FromatNames[formatName]) {\n      return formatName\n    }\n    return FromatNames[formatName];\n  }\n\n  /**\n   * Formatting the date using `format` method of it with proper formatting pattern created from `format`\n   * @param value a Jalali Date object or an instance of `Date` object or any class implementing that interface\n   * @param format format name or format pattern string\n   */\n  transform(value: Date, format: string = 'mediumDate'): string {\n    if (!(value instanceof JDate)) {\n      value = new JDate(value);\n    }\n    // @ts-ignore\n    return value.format(JdatePipe.convertNameToFormat(format));\n  }\n\n}\n","import { NgModule } from '@angular/core';\nimport {PersianLetterDirective, PersianNumbersDirective} from './Validators/persian-directives';\nimport {FaNumPipe} from './Pipes/faNum.pipe';\nimport {EnNumPipe} from './Pipes/enNum.pipe';\nimport {IRCurrencyPipe} from './Pipes/IRCurrency.pipe';\nimport {NationalCodePipe} from './Pipes/nationalCode.pipe';\nimport {JdatePipe} from './Pipes/jdate.pipe';\n@NgModule({\n  declarations: [PersianLetterDirective, PersianNumbersDirective, FaNumPipe, EnNumPipe, IRCurrencyPipe, NationalCodePipe, JdatePipe],\n  imports: [],\n  exports: [PersianLetterDirective, PersianNumbersDirective, FaNumPipe, EnNumPipe, IRCurrencyPipe, NationalCodePipe, JdatePipe]\n})\nexport class NgxPersianModule { }\n","/**\n * When mobile phone number is not valid this error will throw.\n */\nexport class InvalidMobilePhoneNumberError extends Error {\n  constructor(...params) {\n    super(...params);\n\n    // Maintains proper stack trace for where our error was thrown (only available on V8)\n    // @ts-ignore\n    if (Error.captureStackTrace) {\n      // @ts-ignore\n      Error.captureStackTrace(this, InvalidMobilePhoneNumberError);\n    }\n\n    this.message = 'This phone number is not valid.';\n  }\n}\n","/**\n * This error will throw when there is no valid mobile operator for inputted mobile phone number.\n */\nexport class InvalidMobileOperatorError extends Error {\n  constructor(...params) {\n    super(...params);\n\n    // Maintains proper stack trace for where our error was thrown (only available on V8)\n    // @ts-ignore\n    if (Error.captureStackTrace) {\n      // @ts-ignore\n      Error.captureStackTrace(this, InvalidMobileOperatorError);\n    }\n\n    this.message = 'Operator of this number is not recognizable.';\n  }\n}\n","import { Injectable } from '@angular/core';\nimport {InvalidMobilePhoneNumberError} from './InvalidMobilePhoneNumber.error';\nimport {InvalidMobileOperatorError} from './InvalidMobileOperator.error';\n\n/**\n * English name of mobile operators are enum keys and persian name of them are values.\n * All characters of all of the keys are in lowercase\n */\nexport enum operatorsNames {\n  irancell = 'Ø§ÛØ±Ø§ÙØ³Ù',\n  mci = 'ÙÙØ±Ø§Ù Ø§ÙÙ',\n  talia = 'ØªØ§ÙÛØ§',\n  rightel = 'Ø±Ø§ÛØªÙ',\n  spadan = 'Ø§Ø³Ù¾Ø§Ø¯Ø§Ù',\n  tkc = 'Ø´Ø¨Ú©Ù ÙØ³ØªÙÙ ØªÙÙÙ ÙÙØ±Ø§Ù Ú©ÛØ´',\n  shatel = 'Ø´Ø§ØªÙ',\n  aptel = 'Ø¢Ù¾ØªÙ',\n  azartel = 'Ø¢Ø°Ø±ØªÙ',\n  samantel = 'Ø³Ø§ÙØ§ÙØªÙ',\n  lotustel = 'ÙÙØªÙØ³âØªÙ',\n  anarestan = 'Ø§ÙØ§Ø±Ø³ØªØ§Ù'\n}\n\n/**\n * A constant object. Keys are Mobile operator names and values are arrays those keep mobile codes.\n */\nexport const MobileCodes = {\n  irancell: ['0901', '0902', '0903', '0904', '0905', '0930', '0933', '0935', '0936', '0937', '0938', '0939', '0941'],\n  mci: ['0910', '0911', '0912', '0913', '0914', '0915', '0916', '0917', '0918', '0919', '0990', '0991', '0992'],\n  talia: ['0932'],\n  rightel: ['0920', '0921', '0922'],\n  spadan: ['0931'],\n  tkc: ['0934'],\n  shatel: ['099810', '099811', '099812'],\n  aptel: ['099910', '099911', '099913'],\n  azartel: ['099914'],\n  samantel: ['099996', '099997', '099998', '099999'],\n  lotustel: ['09990'],\n  anarestan: ['09944']\n};\n\n/**\n * This service using for validating phone numbers sold by Iranian Mobile operators.\n *\n * You can get operator name and validation result of a phone number by methods of this service.\n */\n@Injectable({\n  providedIn: 'root'\n})\nexport class MobilePhoneNumberService {\n\n  /**\n   * This method only checks if phoneNumber follows valid pattern. means starting by +98 or 0, then a 9 digit and then 9 digits.\n   * This method will not check validity of the phoneNumber code and can accept invalid strings those only locking like phone numbers and\n   * in reality are not a valid phone number.\n   * @link isValidPhoneNumber\n   * @param phoneNumber Digits in this string should be english digits.\n   */\n  isPhoneNumberPatternValid(phoneNumber: string): boolean {\n    const generalRegex = new RegExp(/^((\\+98|0)9\\d{9})$/);\n    return generalRegex.test(phoneNumber);\n  }\n\n  /**\n   * Removes +98 from the phoneNumber and replaces it with a 0 character.\n   * @param phoneNumber Digits in this string should be english digits.\n   */\n  normalizePhoneNumber(phoneNumber: string): string {\n    return phoneNumber.replace('+98', '0');\n  }\n\n  /**\n   * Checks all codes of all operators in MobileCodes object. IF finds a matched code, returns persian or english name of that operator from\n   * operatorsNames enum.\n   * @return operator name in english or persian according to the nameInEnglish parameter\n   * @throws InvalidMobileOperatorError if pattern is correct but operator code is not valid.\n   * @throws InvalidMobilePhoneNumberError If pattern is not correct\n   * @param phoneNumber Digits in this string should be english digits.\n   * @param nameInEnglish if true, operator name will return in English. if false operator name will return in persian\n   * @link MobileCodes\n   * @link operatorsNames\n   */\n  getPhoneNumberOperator(phoneNumber: string, nameInEnglish: boolean = false): string {\n    if (!this.isPhoneNumberPatternValid(phoneNumber)) { throw new InvalidMobilePhoneNumberError(); }\n    phoneNumber = this.normalizePhoneNumber(phoneNumber);\n    for (const operator of Object.keys(MobileCodes)) {\n      for (const code of MobileCodes[operator]) {\n        if (phoneNumber.indexOf(code) === 0) {\n          return nameInEnglish ? operator : operatorsNames[operator];\n        }\n      }\n    }\n    throw new InvalidMobileOperatorError();\n  }\n\n  /**\n   * @return If phoneNumber follows correct pattern and has valid operator, return true. Otherwise returns false.\n   * @param phoneNumber Digits in this string should be english digits.\n   * @link getPhoneNumberOperator\n   */\n  isValidPhoneNumber(phoneNumber: string): boolean {\n    try {\n      this.getPhoneNumberOperator(phoneNumber);\n      return true;\n    } catch (e) {\n      return false;\n    }\n  }\n}\n","/**\n * When mobile phone number is not valid this error will throw.\n */\nexport class InvalidNationalCodeError extends Error {\n  nationalCode: string;\n  constructor(nationalCode: string = '', ...params) {\n\n    super(...params);\n\n    this.nationalCode = nationalCode;\n\n    // Maintains proper stack trace for where our error was thrown (only available on V8)\n    // @ts-ignore\n    if (Error.captureStackTrace) {\n      // @ts-ignore\n      Error.captureStackTrace(this, InvalidNationalCodeError);\n    }\n\n    this.message = `The national code value (${this.nationalCode}) is not a valid national code.`;\n  }\n}\n","import { Injectable } from '@angular/core';\nimport {InvalidNationalCodeError} from './InvalidNationalCode.error';\n\n/**\n * For validating Iranian National code (number), you can use this service in your components or every other places using DI or not.\n */\n@Injectable({\n  providedIn: 'root'\n})\nexport class NationalCodeService {\n\n  /**\n   *\n   * [We are using for loop instead of match or split because it has better performance according to this link]{@link https://stackoverflow.com/a/46312614/5400597}\n   * @return true if all characters of the `input` are equal and input length is greater than 1. Otherwise returns false.\n   * @param input\n   */\n  private _is_repetitive(input: string): boolean {\n    if (input.length < 2) { return false; }\n    const firstChar = input.charAt(0);\n    for (let i = 1; i < input.length; i++) {\n      if (input.charAt(i) !== firstChar) { return false; }\n    }\n    return true;\n  }\n\n  /**\n   * This method adds zero character at the beginning of the input until the length of the result reach to 10.\n   *\n   * This method removes spaces from right and left sides of the input.\n   *\n   * ATTENTION: This method doesn't any validation about correctness of the input if it has correct length (between 8 and 10).\n   * @param nationalCode a number with at most 10 digits or a string with at most 10 character.\n   * @return a string with length equal to 10.\n   * @throws InvalidNationalCodeError when length of the input value is greater than 10.\n   */\n  normalize(nationalCode: number | string): string {\n    if (! nationalCode) { throw new InvalidNationalCodeError(); }\n    nationalCode = nationalCode.toString();\n    nationalCode = nationalCode.trim();\n    const nationalCodeLength = nationalCode.length;\n    if (nationalCodeLength > 10 || nationalCodeLength < 8) { throw new InvalidNationalCodeError(nationalCode); }\n    return '0'.repeat(10 - nationalCodeLength) + nationalCode;\n  }\n\n  /**\n   * This method first normalizes the input using `normalize` method and implicitly checks input length, So you DO NOT NEED to\n   * normalize input before, but this will not make any bad effect.\n   *\n   * [Then checking validation of the input using algorithm described in this link]{@link http://www.aliarash.com/article/codemeli/codemeli.htm}\n   * @param nationalCode\n   */\n  isValid(nationalCode: number | string): boolean {\n    if (!nationalCode) { return false; }\n    nationalCode = nationalCode.toString();\n    if (this._is_repetitive(nationalCode)) { return false; }\n    try {\n      nationalCode = this.normalize(nationalCode); // Normalizing the input and checking input length validation implicitly.\n    } catch (e) {\n      return false; // Input length is not in the valid range.\n    }\n    let multiplicationResult = 0;\n    for (let i = 0; i < 9; i++) {\n      multiplicationResult += parseInt(nationalCode.charAt(i), 10)  * (10 - i);\n    }\n    const reminder = multiplicationResult % 11;\n    const controlNum = parseInt(nationalCode.charAt(9));\n    let desiredControlNum =  reminder;\n    if (reminder > 1) {\n      desiredControlNum = 11 - reminder;\n    }\n    return desiredControlNum === controlNum;\n  }\n}\n"]}