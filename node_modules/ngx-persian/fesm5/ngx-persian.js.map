{"version":3,"file":"ngx-persian.js","sources":["ng://ngx-persian/lib/Services/InvalidServiceInput.error.ts","ng://ngx-persian/lib/Services/persian-number.service.ts","ng://ngx-persian/lib/Services/persian-letter.service.ts","ng://ngx-persian/lib/Validators/persian-validators.ts","ng://ngx-persian/lib/Validators/persian-directives.ts","ng://ngx-persian/lib/Pipes/faNum.pipe.ts","ng://ngx-persian/lib/Pipes/enNum.pipe.ts","ng://ngx-persian/lib/Pipes/IRCurrency.pipe.ts","ng://ngx-persian/lib/Pipes/nationalCode.pipe.ts","ng://ngx-persian/lib/JDate/ArithmeticUtils.ts","ng://ngx-persian/lib/JDate/InvalidJalaliDate.error.ts","ng://ngx-persian/lib/JDate/jalali-date-validator.service.ts","ng://ngx-persian/lib/JDate/jalali-date-calculator.service.ts","ng://ngx-persian/lib/JDate/jdate.ts","ng://ngx-persian/lib/Pipes/jdate.pipe.ts","ng://ngx-persian/lib/ngx-persian.module.ts","ng://ngx-persian/lib/Services/InvalidMobilePhoneNumber.error.ts","ng://ngx-persian/lib/Services/InvalidMobileOperator.error.ts","ng://ngx-persian/lib/Services/mobile-phone-number.service.ts","ng://ngx-persian/lib/Services/InvalidNationalCode.error.ts","ng://ngx-persian/lib/Services/national-code.service.ts"],"sourcesContent":["/**\n * This error will throw when input value of the service method is not a valid value.\n */\nexport class InvalidServiceInputError extends Error {\n  constructor(...params) {\n    super(...params);\n\n    // Maintains proper stack trace for where our error was thrown (only available on V8)\n    // @ts-ignore\n    if (Error.captureStackTrace) {\n      // @ts-ignore\n      Error.captureStackTrace(this, InvalidServiceInputError);\n    }\n\n    this.message = 'Invalid value has been passed to the service.';\n  }\n}\n","import { Injectable } from '@angular/core';\nimport {PersianService} from './persian-service';\nimport {InvalidServiceInputError} from './InvalidServiceInput.error';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class PersianNumberService implements PersianService {\n  static persianNumberPattern = '\\u06F0-\\u06F9';\n  private static persianNumbersTable = ['\\u06F0', '\\u06F1', '\\u06F2', '\\u06F3', '\\u06F4', '\\u06F5', '\\u06F6', '\\u06F7', '\\u06F8', '\\u06F9'];\n  private static englishNumbersTable = ['0', '1', '2', '3', '4', '5', '6', '7', '8', '9'];\n\n  /**\n   * Checks if input value contains any persian number or not.\n   * @param value\n   * @return true if input value contains any persian number. false otherwise.\n   */\n  containsPersian(value: string): boolean {\n    if (!value) { return false; }\n    // language=JSRegexp\n    const persianRegex = new RegExp(`[${PersianNumberService.persianNumberPattern}]`);\n    return persianRegex.test(value);\n  }\n\n  /**\n   * splits input value by persian letters and then returns length of matched array.\n   * @param value\n   * @return 0 if input value has no persian letter, numbers of persian letters in the input value otherwise.\n   */\n  private static _getMatchedPatternLength(value: string): number {\n    // language=JSRegexp\n    const matchResult = value.match(new RegExp(`[${PersianNumberService.persianNumberPattern}]`, 'g'));\n    return matchResult ? matchResult.length : 0;\n  }\n\n  /**\n   * Checks if input value contains only persian letters.\n   * @param value\n   */\n  isPersian(value: string): boolean {\n    if (!value) {return false; }\n    return value.length === PersianNumberService._getMatchedPatternLength(value);\n  }\n\n  /**\n   * Converts arabic numbers to the persian ones.\n   * @param value\n   */\n  arabicToPersian(value: string): string {\n    return value.replace(/Ù¤/g, PersianNumberService.persianNumbersTable[4])\n                .replace(/Ù¥/g, PersianNumberService.persianNumbersTable[5])\n                .replace(/Ù¦/g, PersianNumberService.persianNumbersTable[6]);\n  }\n\n  /**\n   * Converts all arabic and english numbers to the persian numbers.\n   * @param value\n   */\n  toPersian(value: string | number): string {\n    if (value === undefined || value === null) {throw new InvalidServiceInputError(); }\n    value = value.toString();\n    value = this.arabicToPersian(value);\n    let regex: RegExp;\n    for (let i = 0; i < PersianNumberService.persianNumbersTable.length; i++) {\n      // language=JSRegexp\n      regex = new RegExp(`[${PersianNumberService.englishNumbersTable[i]}]`, 'g');\n      value = value.replace(regex, PersianNumberService.persianNumbersTable[i]);\n    }\n    return value;\n  }\n\n  /**\n   * Convert persian numbers in input value to the english numbers.\n   * @param value\n   */\n  toEnglish(value: string): string {\n    if (value === undefined || value === null) { throw new InvalidServiceInputError(); }\n    let regex: RegExp;\n    for (let i = 0; i < PersianNumberService.englishNumbersTable.length; i++) {\n      // language=JSRegexp\n      regex = new RegExp(`[${PersianNumberService.persianNumbersTable[i]}]`, 'g');\n      value = value.replace(regex, PersianNumberService.englishNumbersTable[i]);\n    }\n    return value;\n  }\n}\n","import { Injectable } from '@angular/core';\nimport {PersianService} from './persian-service';\nimport {PersianNumberService} from './persian-number.service';\n\n/**\n * isPersian options parameter object should implement this interface. Fields descriptions are in the isPersian method document.\n */\nexport interface PLOptions {\n  persianDigits?: boolean;\n  enDigits?: boolean;\n  symbols?: boolean;\n  whitespaces?: boolean;\n}\n\n@Injectable({\n  providedIn: 'root'\n})\n/**\n * This service brings validation of persian texts to the program and let you convert some not-persian letters with persian ones.\n *\n */\nexport class PersianLetterService implements PersianService {\n\n  static PERSIAN_LETTERS_PATTERN = '\\u06A9\\u06AF\\u06C0\\u06CC\\u060C\\u062A\\u062B\\u062C\\u062D\\u062E\\u062F\\u063A\\u064A\\u064B\\u064C' +\n                                       '\\u064D\\u064E\\u064F\\u067E\\u0670\\u0686\\u0698\\u200C\\u0621-\\u0629\\u0630-\\u0639\\u0641-\\u0654';\n  private static SYMBOLS_PATTERN = 'Ø$-/:-?Ø{-~!\"^_`\\\\[\\\\]';\n  static WHITESPACES_PATTERN = '\\\\s';\n\n  /**\n   * According to the options values, returns a RegExp object. The regex pattern of it contains regex of finding each of\n   * elements those specified in the options object plus persian letters.\n   * @return a RegExp object that can use in searching a string for special characters (persian letters and others specified in the options)\n   * @param options\n   */\n  private static _stringValidationRegex(options: PLOptions): RegExp {\n    let result = '';\n    if (options.enDigits) { result += '0-9'; }\n    if (options.symbols) { result += PersianLetterService.SYMBOLS_PATTERN; }\n    if (options.whitespaces) { result += PersianLetterService.WHITESPACES_PATTERN; }\n    if (options.persianDigits) { result += PersianNumberService.persianNumberPattern; }\n    // language=JSRegexp\n    return new RegExp(`[${result + PersianLetterService.PERSIAN_LETTERS_PATTERN}]`, 'g');\n  }\n\n  /**\n   * This method gets regex of persian letters and other chars specified in the options and then splits the input value by that regex.\n   *\n   * If match result is null - there is no match - returns 0. otherwise returns length of the match array that shows number of matched\n   * occurred in the input value.\n   * @param value\n   * @param options\n   * @return a number greater equal to 0 representing number of matches occurred in the input value.\n   */\n  private static _getMatchedPatternLength(value: string, options: PLOptions): number {\n    const matchResult = value.match(PersianLetterService._stringValidationRegex(options));\n    return matchResult ? matchResult.length : 0;\n  }\n\n  /**\n   * If input value contains any persian letter or is an empty string, returns true. otherwise returns false.\n   * @param value\n   */\n  containsPersian(value: string): boolean {\n    if (value === undefined || value === null) { return false; }\n    // language=JSRegexp\n    const persianRegex = new RegExp(`[${PersianLetterService.PERSIAN_LETTERS_PATTERN}]`);\n    return value.trim() ? persianRegex.test(value) : true;\n  }\n\n  /**\n   * Checks if input value is a persian text or not. If input value contains any letter that is not persian, the output will be false.\n   * Result of validation on existence  of other characters controls by options parameter.\n   * @param value\n   * @param options controlling validation result on existence  of other characters controls by options parameter. Fields:\n   *\n   *        persianDigits: if sets to true, validation result will be true if input value contains persian digits plus persian letters.\n   *\n   *\n   *        enDigits: if sets to true, validation result will be true if input value contains english digits plus persian letters\n   *\n   *\n   *        symbols: if sets to true, validation result will be true if input value contains specific symbols plus persian letters.\n   *                 symbols list: ?$-/:Ø!~\"'^_-[]{}()%&*><;\n   *\n   *\n   *        whitespaces: if sets to true, validation result will be true if input value contains white spaces plus persian letters\n   *\n   *\n   * You can combine any number of options field together.\n   */\n  isPersian(value: string, options: PLOptions = {\n                                                  persianDigits: false,\n                                                  enDigits: false,\n                                                  symbols: true,\n                                                  whitespaces: true}): boolean {\n    if (value === undefined || value === null) { return false; }\n    return value.length === PersianLetterService._getMatchedPatternLength(value, options);\n  }\n\n  /**\n   * Converts arabic letters: Ù and Ù to persian corresponding letters.\n   * @param value\n   */\n  toPersian(value: string): string {\n    return value.replace(/Ù/g, 'Û').replace(/Ù/g, 'Ú©');\n  }\n\n}\n","import {AbstractControl, ValidationErrors, ValidatorFn} from '@angular/forms';\nimport {PersianNumberService} from '../Services/persian-number.service';\nimport {PLOptions, PersianLetterService} from '../Services/persian-letter.service';\n\n/**\n * Reactive form validator that checks form control value contains only persian numbers.\n * @param persianNumberService\n */\nexport function persianNumbersValidator(persianNumberService: PersianNumberService = new PersianNumberService()): ValidatorFn {\n  return (control: AbstractControl): ValidationErrors | null => {\n    return persianNumberService.isPersian(control.value) ? null : {'persianNumberValidation': control.value};\n  };\n}\n\n/**\n * Reactive form validator that checks form control value contains only persian letters and allowed characters in the options parameter.\n * @param options see documents of isPersian method of the PersianLetterService for more info about options.\n * @param persianLetterService\n */\nexport function persianLettersValidator(options: PLOptions = {\n                                                            persianDigits: false,\n                                                            whitespaces: false,\n                                                            symbols: false,\n                                                            enDigits: false},\n                                        persianLetterService: PersianLetterService = new PersianLetterService()): ValidatorFn {\n  return (control: AbstractControl): ValidationErrors | null => {\n    return persianLetterService.isPersian(control.value, options) ? null : {'persianLetterValidation': control.value};\n  };\n}\n","import {Directive, Input} from '@angular/core';\nimport {AbstractControl, NG_VALIDATORS, Validator} from '@angular/forms';\nimport {persianLettersValidator, persianNumbersValidator} from './persian-validators';\nimport {PLOptions} from '../Services/persian-letter.service';\n\n\n/**\n * You can add PersianNumbersDirective property to your input tag for using persianNumbersValidator function on its value.\n *\n * [For more information also see persianNumbersValidator]{@link persianNumbersValidator}\n */\n@Directive({\n  selector: 'PersianNumbersDirective',\n  providers: [{provide: NG_VALIDATORS, useExisting: PersianNumbersDirective}]\n})\nexport class PersianNumbersDirective implements Validator {\n\n  /**\n   * Only a wrapper for persianNumbersValidator validator function.\n   * @param control\n   * @return null for success or ValidationError for invalid inputs\n   */\n  validate(control: AbstractControl): {[key: string]: any} | null {\n    return persianNumbersValidator()(control);\n  }\n}\n\n/**\n * You can add PersianLetterDirective property to your input tag for using persianNumbersValidator function on its value\n * For setting options value, you can simply set PersianLetterDirective property equal to the PLOptions object.\n * [For more information also see persianLettersValidator]{@link persianLettersValidator}\n */\n@Directive({\n  selector: 'persianLettersValidator',\n  providers: [{provide: NG_VALIDATORS, useExisting: PersianLetterDirective}]\n})\nexport class PersianLetterDirective implements Validator {\n\n  @Input('PersianLetterDirective') options: PLOptions;\n\n  /**\n   * Only a wrapper for persianLettersValidator validator function.\n   * @param control\n   * @return null for success or ValidationError for invalid inputs\n   */\n  validate(control: AbstractControl): {[key: string]: any} | null {\n    return persianLettersValidator(this.options)(control);\n  }\n}\n","import { Pipe, PipeTransform} from '@angular/core';\nimport {PersianNumberService} from '../Services/persian-number.service';\n\n/**\n * Replaces all arabic and english numbers with persian numbers.\n * @example {{englishTextDigit | faNum}}\n */\n@Pipe({name: 'faNum'})\nexport class FaNumPipe implements PipeTransform {\n\n  constructor(private persianNumberService: PersianNumberService) {}\n\n  /**\n   *\n   * @param value a number or string (probably empty).\n   * @return a string that all english and arabic numbers in the input has been replaced with persian digits.\n   */\n  transform(value: string | number): string {\n    value = String(value);\n    return this.persianNumberService.toPersian(value);\n  }\n}\n\n","import {Pipe, PipeTransform} from '@angular/core';\nimport {PersianNumberService} from '../Services/persian-number.service';\n\n/**\n * Replaces all persian numbers in the text to the english numbers.\n * @example {{persianTextDigit | enNum}}\n */\n@Pipe({name: 'enNum'})\nexport class EnNumPipe  implements PipeTransform {\n\n  constructor(private persianNumberService: PersianNumberService) {}\n\n  /**\n   * @return input value replaced all persian digits with english digits.\n   * @param value a string containing one or more non-english digits. Could be an empty string.\n   */\n  transform(value: string): string {\n    value = String(value);\n    return this.persianNumberService.toEnglish(value);\n  }\n}\n","import { Pipe, PipeTransform} from '@angular/core';\nimport {DecimalPipe} from '@angular/common';\n\nexport enum IRCurrencies {\n  rial = 'Ø±ÛØ§Ù',\n  r = 'Ø±ÛØ§Ù',\n  toman = 'ØªÙÙØ§Ù',\n  t = 'ØªÙÙØ§Ù'\n}\n\n/**\n * Formats input as a currency value.\n * default type is rial. You can choose on of the following currency types:\n *\n *      r or rial for Ø±ÛØ§Ù\n *\n *      to or toman for ØªÙÙØ§Ù\n *\n *  This pipe extends DecimalPipe, so as second parameter, you can enter your desired formatting string. Default formatter is: 1.0-0\n */\n@Pipe({name: 'irc'})\nexport class IRCurrencyPipe extends DecimalPipe implements PipeTransform {\n\n  /**\n   * @param value a number of a string only contains digits\n   * @param type currency type\n   * @param digitInfo decimal pipe formatter\n   * @example 1925100 -> 1,925,100 Ø±ÛØ§Ù\n   */\n  transform(value: string | number, type: string = 'rial', digitInfo: string = '1.0-0') {\n    value = Number(value);\n    type = type.toLowerCase();\n    if (isNaN(value)) { throw new Error(`${value} is not a acceptable number`); }\n    return super.transform(value, digitInfo) + ' ' + IRCurrencies[type];\n  }\n}\n","import { Pipe, PipeTransform} from '@angular/core';\n\n/**\n * Formats a 10-digit number or string to national code format.\n */\n@Pipe({name: 'nationalCode'})\nexport class NationalCodePipe implements PipeTransform {\n\n  /**\n   * @param value a 10-digit number or a string only contains 10 digits.\n   * @example 001-236547-5\n   * @return a formatted text from 10-digit input or an empty string if length of the input is not 10.\n   */\n  transform(value: string | number): string {\n    value = String(value);\n    if (value.length !== 10) { return ''; }\n    return `${value.substring(0, 3)}-${value.substring(3, 9)}-${value[9]}`;\n  }\n}\n","/**\n * This function removes fraction part of the number if exists. So, for example, it will turn -145,455 to -145 and\n * 145,455 to 145.\n */\nexport function round(x: number): number {\n  if (x < 0) {\n    return Math.ceil(x);\n  } else {\n    return Math.floor(x);\n  }\n}\n\n/**\n * This function returns integer part of division result of num1 and num2 numbers.\n *\n * For example: div (10, 3) is equal to 3.\n */\nexport function div(num1: number, num2: number): number {\n  return round(num1 / num2);\n}\n\n/**\n * This function return arithmetic mod result of two inputs as a integer.\n */\nexport function mod(num1: number, num2: number): number {\n  return num1 - div(num1, num2) * num2;\n}\n","/**\n * This Error will throw When inputted date is not a valid date according to the Jalali Calendar.\n */\nexport class InvalidJalaliDateError extends Error {\n  constructor(...params) {\n    super(...params);\n\n    // Maintains proper stack trace for where our error was thrown (only available on V8)\n    // @ts-ignore\n    if (Error.captureStackTrace) {\n      // @ts-ignore\n      Error.captureStackTrace(this, InvalidJalaliDateError);\n    }\n\n    this.message = 'Invalid jalali date.';\n  }\n}\n","import { Injectable } from '@angular/core';\nimport {div, mod} from './ArithmeticUtils';\nimport {InvalidJalaliDateError} from './InvalidJalaliDate.error';\n\n\n/**\n * Methods of this Service doing validation stuff on a Jalali date. You can use this Service using DI in all around of your app for\n * validating Jalali dates without needing to convert them to the Georgian Date.\n */\n@Injectable({\n  providedIn: 'root'\n})\nexport class JalaliDateValidatorService {\n\n  private static _minAcceptableYear = -61;\n  private static _maxAcceptableYear = 3177;\n\n  constructor() { }\n\n  /**\n   * Returns number of days in a given month counting from 1.\n   * @param jYear full jalali year like 1397\n   * @param jMonth number of month from 0 for Farvardin to 11 for Esfand.\n   */\n  jMonthLength(jYear: number, jMonth: number): number {\n    if (jMonth < 6) { return 31; }\n    if (jMonth < 11 || this.isJYearLeap(jYear)) { return 30; }\n    return 29;\n  }\n\n\n  /**\n   * Calculates the number of the leap years in jalali Calendar.\n   * @param targetJYear should be full year like: 1397 and should be between -61 to 3177.\n   *\n   * [Implementation in source code]{@link https://github.com/sijad/ts-jalaali/blob/296a7c2fa1816a5bbb0b11bbe3eb03ebc17059f6/src/jalaali.ts#L71}\n   */\n  numOfJLeapYears(targetJYear: number): number {\n    // Jalali years starting the 33-year rule.\n    const breaks = [\n      -61, 9, 38, 199, 426, 686, 756, 818, 1111, 1181, 1210,\n      1635, 2060, 2097, 2192, 2262, 2324, 2394, 2456, 3178,\n    ];\n\n    const breaksLength = breaks.length;\n    let jp = breaks[0];\n    let jump: number;\n    let leapJ = -14;\n\n    if (!this.isValidJYear(targetJYear)) {\n      throw new InvalidJalaliDateError();\n    }\n\n    // Find the limiting years for the Jalali year jy.\n    for (let i = 1; i < breaksLength; i += 1) {\n      const jm = breaks[i];\n      jump = jm - jp;\n      if (targetJYear < jm) {\n        break;\n      }\n      leapJ = leapJ + div(jump, 33) * 8 + div(mod(jump, 33), 4);\n      jp = jm;\n    }\n    const n = targetJYear - jp;\n\n    // Find the number of leap years from AD 621 to the beginning\n    // of the current Jalali year in the Persian Calendar.\n    leapJ = leapJ + div(n, 33) * 8 + div(mod(n, 33) + 3, 4);\n\n    if (mod(jump, 33) === 4 && jump - n === 4) {\n      leapJ += 1;\n    }\n    return leapJ;\n  }\n\n  /**\n   * If JYear is a leap year in jalali Calendar, return true. We using the fact that if a year is leap, number of leap years until that year\n   * and the year after it is not equal.\n   * @param jYear full jalali year like: 1397\n   */\n  isJYearLeap(jYear: number): boolean {\n    return this.numOfJLeapYears(jYear) !== this.numOfJLeapYears(jYear + 1);\n  }\n\n  /**\n   * Checks if jalali year is in acceptable range or not.\n   *\n   * [Implementation in source code]{@link https://github.com/sijad/ts-jalaali/blob/296a7c2fa1816a5bbb0b11bbe3eb03ebc17059f6/src/jalaali.ts#L27}\n   * @param jYear full jalali year like 1397\n   */\n  isValidJYear(jYear: number): boolean {\n    return jYear >= JalaliDateValidatorService._minAcceptableYear && jYear <= JalaliDateValidatorService._maxAcceptableYear;\n  }\n\n  /**\n   * Checks if jalali month is in valid range or not. In default, jMonth should start from zero.\n   * If you want to start month number from one instead of zero, you should make startFromZero parameter to false.\n   */\n  isValidJMonth(jMonth: number, startFromZero: boolean = true): boolean {\n    let minMonthNumber = 0;\n    let maxMonthNumber = 11;\n    if (!startFromZero) {\n      minMonthNumber++;\n      maxMonthNumber++;\n    }\n    return jMonth >= minMonthNumber && jMonth <= maxMonthNumber;\n  }\n\n  /**\n   * Checks if day number is in valid range according to the given year and month.\n   * @param jYear full jalali year like 1397\n   * @param jMonth month number starting from zero\n   * @param jDay day number starting from one\n   */\n  isValidJDay(jYear: number, jMonth: number, jDay: number): boolean {\n    return jDay <= this.jMonthLength(jYear, jMonth) && jDay > 0;\n  }\n\n  /**\n   * If Jalali date is not a valid Jalali date, return false. otherwise returns true.\n   * @param jYear full year number like: 1397\n   * @param jMonth starts from zero\n   * @param jDay starts from one\n   */\n  isValidJDate(jYear: number, jMonth: number, jDay: number): boolean {\n    return this.isValidJYear(jYear) && this.isValidJMonth(jMonth) && this.isValidJDay(jYear, jMonth, jDay);\n  }\n}\n","import {Injectable} from '@angular/core';\nimport {div, mod} from './ArithmeticUtils';\nimport {InvalidJalaliDateError} from './InvalidJalaliDate.error';\nimport {SimpleDateInterface} from './SimpleDate.interface';\nimport {JalaliDateValidatorService} from './jalali-date-validator.service';\n\n/**\n * This class converts Jalali date to Georgian and vase versa. You can use all of the methods as static methods.\n *\n */\n@Injectable({\n  providedIn: 'root'\n})\nexport class JalaliDateCalculatorService {\n\n  constructor(public validator: JalaliDateValidatorService) {}\n\n  /**\n   * Calculates the Julian Day number from Gregorian or Julian calendar dates.\n   *\n   * Only some code cleaning applied to the source code.\n   *\n   * The procedure was tested to be good since 1 March, -100100 (of both calendars) up to a few million years into the future.\n   *\n   * @param gDate an instance of javascript date representing a Georgian date.\n   *\n   * [Implementation in source code]{@link https://github.com/sijad/ts-jalaali/blob/296a7c2fa1816a5bbb0b11bbe3eb03ebc17059f6/src/jalaali.ts#L195}\n\n   */\n  numberOfPassedGDays(gDate: Date): number {\n    const gMonth = gDate.getMonth() - 7;\n    const gYear = gDate.getFullYear() + 100100;\n    const gMonthDiv = div(gMonth, 6);\n    const result = div((gYear + gMonthDiv) * 1461, 4) + div(153 * mod(gMonth + 17, 12) + 2, 5) + gDate.getDate() - 34840408;\n    return result - div(div(gYear + gMonthDiv, 100) * 3, 4) + 752;\n  }\n\n  /**\n   * Returns number of passed days from source day in jalali calendar to the given jalali date.\n   * @param jYear full jalali year like 1397\n   * @param jMonth starts from zero\n   * @param jDay day number starts from one\n   */\n  numberOfPassedJDays(jYear: number, jMonth: number, jDay: number): number {\n    return this.numberOfPassedGDays(new Date(this.jalaliYearToGeorgianYear(jYear), 2, this.firstDayOfJYearInMarch(jYear))) +\n      jMonth * 31 - div(jMonth + 1, 7) * (jMonth - 6) + jDay - 1;\n  }\n\n  /**\n   * Creates a javascript Date object from number of passed days in Georgian calendar representing Georgian date.\n   *\n   * [Implementation in source code]{@link https://github.com/sijad/ts-jalaali/blob/296a7c2fa1816a5bbb0b11bbe3eb03ebc17059f6/src/jalaali.ts#L213}\n   */\n  createGDateFromDays(numOfDays: number): Date {\n    const j = (4 * numOfDays + 139361631) + div(div(4 * numOfDays + 183187720, 146097) * 3, 4) * 4 - 3908;\n    const i = div(mod(j, 1461), 4) * 5 + 308;\n    const gDay = div(mod(i, 153), 5) + 1;\n    const gMonth = mod(div(i, 153), 12);\n    const gYear = div(j, 1461) - 100100 + div(7 - gMonth, 6);\n    return new Date(gYear, gMonth, gDay);\n  }\n\n  /**\n   * This function returns number of passed leap years from AD 621 until targetGYear.\n   * @param targetGYear is full year number like 2018\n   *\n   * [Implementation in source code]{@link https://github.com/sijad/ts-jalaali/blob/296a7c2fa1816a5bbb0b11bbe3eb03ebc17059f6/src/jalaali.ts#L110}\n   */\n  numOfGLeapYears(targetGYear: number): number {\n    return div(targetGYear, 4) - div((div(targetGYear, 100) + 1) * 3, 4) - 150;\n  }\n\n  /**\n   * first day of the Farvardin month in Jalali calendar is in March month. This method returns the day number of new jalali year in March.\n   * The day number starts from 1 not zero and is equal to the real numbers in the calendar.\n   * @param jYear full jalali year like 1397\n   */\n  firstDayOfJYearInMarch(jYear): number {\n    const gYear = jYear + 621;\n    return this.validator.numOfJLeapYears(jYear) - this.numOfGLeapYears(gYear) + 20;\n  }\n\n  /**\n   * Converts jalali year number to the georgian year. Output year is the georgian year that jalali year starts within it, not the year\n   * that starts in the winter of jalali year.\n   * @param jYear full jalali year like 1397\n   */\n  jalaliYearToGeorgianYear(jYear: number): number {\n    return jYear + 621;\n  }\n\n  /**\n   * Converts georgian year to the jalali year. Output year is the jalali year that start within the Georgian year.\n   * @param gYear full georgian year like 2018\n   */\n  georgianYearToJalaliYear(gYear: number): number {\n    return gYear - 621;\n  }\n\n  /**\n   * this method converts Georgian date to the jalali date. Output is an object implementing SimpleDateInterface.\n   *\n   * ATTENTION: month number starts from 0, but day number starts from 1. Just like native javascript Date object.\n   * @param gDate Georgian date as a javascript Date object.\n   *\n   * [Implementation in source code]{@link https://github.com/sijad/ts-jalaali/blob/296a7c2fa1816a5bbb0b11bbe3eb03ebc17059f6/src/jalaali.ts#L149}\n   */\n  convertToJalali(gDate: Date): SimpleDateInterface {\n    const georgianYear = gDate.getFullYear();\n    let jalaliYear = this.georgianYearToJalaliYear(georgianYear);\n    const passedDays = this.numberOfPassedGDays(gDate);\n    const numOfPassedDaysTo1Farvardin = this.numberOfPassedGDays(new Date(georgianYear, 2, this.firstDayOfJYearInMarch(jalaliYear)));\n\n    let jalaliDay: number;\n    let jalaliMonth: number;\n\n    // Find number of days that passed since 1 Farvardin.\n    let numOfDayInJYear = passedDays - numOfPassedDaysTo1Farvardin;\n    if (numOfDayInJYear >= 0) {\n      if (numOfDayInJYear <= 185) {\n        // The first 6 months.\n        jalaliMonth = div(numOfDayInJYear, 31);\n        jalaliDay = mod(numOfDayInJYear, 31) + 1;\n        return  {year: jalaliYear, month: jalaliMonth, day: jalaliDay};\n      } else {\n        // The remaining months.\n        numOfDayInJYear -= 186;\n      }\n    } else {\n      // Previous Jalali year.\n      jalaliYear -= 1;\n      numOfDayInJYear += 179;\n      if (this.validator.isJYearLeap(jalaliYear)) {\n        numOfDayInJYear += 1;\n      }\n    }\n    jalaliMonth = 6 + div(numOfDayInJYear, 30);\n    jalaliDay = mod(numOfDayInJYear, 30) + 1;\n    return {year: jalaliYear, month: jalaliMonth, day: jalaliDay};\n  }\n\n  /**\n   * Converts a valid jalali date to a javascript Date object representing a equivalent Georgian date.\n   * @param jYear a full Jalali year like 1397\n   * @param jMonth starts from zero\n   * @param jDay starts from 1\n   * @throws InvalidJalaliDateError when inputted date is not a valid Jalali date.\n   */\n  convertToGeorgian(jYear: number, jMonth: number, jDay: number): Date {\n    if (!this.validator.isValidJDate(jYear, jMonth, jDay)) { throw new InvalidJalaliDateError(); }\n    return this.createGDateFromDays(this.numberOfPassedJDays(jYear, jMonth, jDay));\n  }\n\n}\n","import {JalaliDateCalculatorService} from './jalali-date-calculator.service';\nimport {InvalidJalaliDateError} from './InvalidJalaliDate.error';\nimport {JalaliDateValidatorService} from './jalali-date-validator.service';\n\n/**\n * This class represents a complete Date object for Jalali dates. It accepts jalali Dates, converts Georgian dates to jalali and implements\n * all the behaviours of default Date object of JavaScript for Jalali Date, plus some additional methods for developers convenience.\n *\n * ATTENTION:\n *\n * UTC methods are not implemented for Jalali date. They working directly on gDate object (Corresponding date in Georgian) and changing\n * properties of this. Then new JDate object will create from the modified Georgian Date. So they may Cause unpredictable behaviour.\n * Please don't use UTC methods with \"todo\" tag on them unless you are sure about the behaviour.\n * Recreating objects are safer than working with UTC methods.\n */\nexport class JDate implements Date{\n\n  private static EN_MONTHS = ['Farvardin', 'Ordibehesht', 'Khordad', 'Tir', 'Mordad', 'Shahrivar', 'Mehr', 'Aban', 'Azar', 'Dey', 'Behman', 'Esfand'];\n  private static FA_MONTHS = ['ÙØ±ÙØ±Ø¯ÛÙ', 'Ø§Ø±Ø¯ÛØ¨ÙØ´Øª', 'Ø®Ø±Ø¯Ø§Ø¯', 'ØªÛØ±', 'ÙØ±Ø¯Ø§Ø¯', 'Ø´ÙØ±ÛÙØ±', 'ÙÙØ±', 'Ø¢Ø¨Ø§Ù', 'Ø¢Ø°Ø±', 'Ø¯Û', 'Ø¨ÙÙÙ', 'Ø§Ø³ÙÙØ¯'];\n  private static DAYS_OF_WEEK = ['Ø¬ÙØ¹Ù', 'Ø´ÙØ¨Ù', 'ÛÚ©Ø´ÙØ¨Ù', 'Ø¯ÙØ´ÙØ¨Ù', 'Ø³ÙâØ´ÙØ¨Ù', 'ÚÙØ§Ø±Ø´ÙØ¨Ù', 'Ù¾ÙØ¬âØ´ÙØ¨Ù'];\n  private static EN_DAYS_OF_WEEK = ['Jom\\'e', 'Shanbe', 'Yekshanbe', 'Doshanbe', 'Seshanbe', 'Cheharshanbe', 'Panjshanbe'];\n  private static COMPLETE_BEFORE_NOON = 'ÙØ¨Ù Ø§Ø² Ø¸ÙØ±';\n  private static COMPLETE_AFTER_NOON = 'Ø¨Ø¹Ø¯ Ø§Ø² Ø¸ÙØ±';\n  private static SHORT_BEFORE_NOON = 'Ù.Ø¸';\n  private static SHORT_AFTER_NOON = 'Ø¨.Ø¸';\n\n  private _gDate: Date;\n  private _jYear: number;\n  private _jMonth: number;\n  private _jDay: number;\n  private _calculator: JalaliDateCalculatorService = new JalaliDateCalculatorService(new JalaliDateValidatorService());\n\n  /**\n   * If input value length is shorter than desiredLength, adds zeros at the beginning of it until meets desired length.\n   * @param value a number or string that we want have a specific length\n   * @param desiredLength length of output string. If be shorter than input length, input will return.\n   */\n  public static zeroPadding(value: number | string, desiredLength: number): string {\n    value = value.toString();\n    while (value.length < desiredLength) {\n      value = '0' + value;\n    }\n    return value;\n  }\n\n  /**\n   * Extracts Georgian Date object from a Jalali date string.\n   * @param dateString a Jalali date string following this pattern:\n   *\n   *        \"yyyy mmm dd HH:MM:SS\"\n   *        or this pattern:\n   *\n   *        \"yyyy mmmm dd HH:MM:SS\".\n   * @example 11 Ø¯Û 1348 00:00:00\n   * @example 11 Dey 1348 00:00:00\n   * @return a Georgian Date object.\n   */\n  public static parse(dateString: string): number {\n    const calculator = new JalaliDateCalculatorService(new JalaliDateValidatorService());\n    const dateArray = dateString.split(' ');\n    if (dateArray.length < 3) { throw new InvalidJalaliDateError(); }\n    const day = parseInt(dateArray[0]);\n    let month = JDate.FA_MONTHS.indexOf(dateArray[1]);\n    if (month === -1) { month = JDate.EN_MONTHS.indexOf(dateArray[1]); }\n    if (month === -1) { throw new InvalidJalaliDateError(); }\n    const year = parseInt(dateArray[2]);\n    const timeArray = dateArray.length > 3 ? dateArray[3].split(':') : ['0', '0', '0'];\n    const hour = parseInt(timeArray[0]);\n    const min = parseInt(timeArray[1]);\n    const sec = parseInt(timeArray[2]);\n    const gDate = calculator.convertToGeorgian(year, month, day);\n    gDate.setHours(hour, min, sec);\n    return gDate.getTime();\n  }\n\n\n  /**\n   * For creating a JDate object, you have 5 different options.\n   *\n   * 1- If you want to have current date and time, you can simply call new JDate() without any parameter.\n   *\n   * 2- If you want to create JDate object from a jalali date string as described in the `pars` method document, you can pass that string as\n   *    first parameter and leave others empty.\n   *\n   * 3 - If you want to create JDate object from number of passed milliseconds from UNIX epoch (for example creating a Jalali date object\n   *     from result of getTime method of another Date object), you can pass the number as first parameter and leave others alone.\n   *\n   * 4 - If you want to create JDate object from a Georgian Date object, you can simply pass that Date object as first parameter and leave\n   *     others empty.\n   *\n   * 5- If you want to create JDate object from date and time values, you can simply fill corresponding parameters of each date and time\n   * value to the constructor. You don't have to fill all of the parameters. only those you need. other parameters will fill with zero.\n   * Examples of all of those scenarios:\n   *\n   * @example new JDate()\n   * @example new JDate('11 Ø¯Û 1348 00:00:00')\n   * @example new JDate(-12600000)\n   * @example new JDate(new Date(2018, 0, 1))\n   * @example new JDate(1397, 0, 25)\n   * @example new JDate(1397, 11, 25, 12, 32, 45, 123)\n   * @param jYear\n   * @param jMonth Month number starting from 0 and should be LESSER than 12.\n   * @param jDay\n   * @param hours\n   * @param minutes\n   * @param seconds\n   * @param milliseconds\n   * @throws InvalidJalaliDateError\n   */\n  constructor(jYear?: number | string | Date, jMonth?: number, jDay?: number, hours: number = 0, minutes: number = 0,\n              seconds: number = 0, milliseconds: number = 0) {\n    if (!jYear) {\n      this._createFromDate(new Date());\n    } else if (typeof jYear === 'string' && jMonth === undefined) {\n      this._createFromDate(new Date(JDate.parse(jYear)));\n    } else if (typeof jYear === 'number' && jMonth === undefined) {\n      this._createFromDate(new Date(jYear));\n    } else if (jYear instanceof Date && jMonth === undefined) {\n      this._createFromDate(jYear);\n    }\n    else {\n      // @ts-ignore\n      this._gDate = this._calculator.convertToGeorgian(jYear, jMonth, jDay);\n      // @ts-ignore\n      this._jYear = jYear;\n      this._jMonth = jMonth;\n      this._jDay = jDay;\n      this._gDate.setHours(hours, minutes, seconds, milliseconds);\n    }\n    this._check_date_validity();\n  }\n\n  /**\n   * This method recalculates the gDate value with private attributes those storing Jalali date parts.\n   */\n  private _renewGDate(): void {\n    this._gDate = this._calculator.convertToGeorgian(this._jYear, this._jMonth, this._jDay);\n  }\n\n  /**\n   * Sets Jalali year value to the input parameter and recalculates gDate attribute.\n   * @param value full Jalali year like 1397\n   */\n  private set jYear(value: number) {\n    this._jYear = value;\n    this._check_date_validity();\n    this._renewGDate();\n  }\n\n  /**\n   * Sets Jalali month value to the input parameter and recalculates gDate attribute.\n   * @param value month number starting from zero\n   */\n  private set jMonth(value: number) {\n    this._jMonth = value;\n    this._check_date_validity();\n    this._renewGDate();\n  }\n\n  /**\n   * Sets Jalali day value to the input parameter and recalculates gDate attribute.\n   * @param value day number starting from 1.\n   */\n  private set jDay(value: number) {\n    this._jDay = value;\n    this._check_date_validity();\n    this._renewGDate();\n  }\n\n  /**\n   * throws InvalidJalaliDateError when date values of this object won't represent a valid Jalali date.\n   * Otherwise nothing happens.\n   * @throws InvalidJalaliDateError\n   */\n  private _check_date_validity(): void{\n    if (!this._calculator.validator.isValidJDate(this._jYear, this._jMonth, this._jDay)) { throw new InvalidJalaliDateError(); }\n  }\n\n  /**\n   * Calculates Jalali year from Georgian Date object and sets the attributes of the object to proper values.\n   * @param gDate\n   */\n  private _createFromDate(gDate: Date) {\n    const conversionResult = this._calculator.convertToJalali(gDate);\n    this._jYear = conversionResult.year;\n    this._jMonth = conversionResult.month;\n    this._jDay = conversionResult.day;\n    this._gDate = gDate;\n  }\n\n  [Symbol.toPrimitive](hint: \"default\"): string;\n\n  [Symbol.toPrimitive](hint: \"string\"): string;\n\n  [Symbol.toPrimitive](hint: \"number\"): number;\n\n  [Symbol.toPrimitive](hint: string): string | number;\n\n  [Symbol.toPrimitive](hint: \"default\" | \"string\" | \"number\" | string): string | number {\n    return undefined;\n  }\n\n  /**\n   * @return a regular javascript Date object representing Georgian date corresponding to the Jalili date of the JDate object.\n   */\n  getGeorgianDate(): Date {\n    return this._gDate;\n  }\n\n  /**\n   * @return the day of the month for the specified date according to local time.\n   */\n  getDate(): number {\n    return this._jDay;\n  }\n\n  /**\n   *  @return the day of the week for the specified date according to local time, where 0 represents Friday and 6 is Thursday.\n   */\n  getDay(): number {\n    return (this._gDate.getDay() + 2) % 7;\n  }\n\n  /**\n   * @return the year (4 digits for years greater than 999) of the specified date according to local time\n   * @example 1397\n   * @example 100\n   * */\n  getFullYear(): number {\n    return this._jYear;\n  }\n\n  /**\n   * @return the hour for the specified date, according to local time.\n   * @example 10\n   */\n  getHours(): number {\n    return this._gDate.getHours();\n  }\n\n  /**\n   * Converts default 24-hour clock hour value to the 12-hour clock version.\n   * @return a number between 1 to 12\n   */\n  getHours12hourClock(): number {\n    const result = this.getHours() % 12;\n    return result ? result : 12;\n  }\n\n  /**\n   * @return the milliseconds in the specified date according to local time.\n   */\n  getMilliseconds(): number {\n    return this._gDate.getMilliseconds();\n  }\n\n  /**\n   * @Return the minutes in the specified date according to local time.\n   */\n  getMinutes(): number {\n    return this._gDate.getMinutes();\n  }\n\n  /**\n   * @return the month in the specified date according to local time, as a zero-based value\n   * where zero indicates the first month of the year.\n   */\n  getMonth(): number {\n    return this._jMonth;\n  }\n\n  /**\n   * @return the seconds in the specified date according to local time.\n   */\n  getSeconds(): number {\n    return this._gDate.getSeconds();\n  }\n\n  /**\n   * JavaScript uses milliseconds as the unit of measurement, whereas Unix Time is in seconds.\n   *\n   * getTime() always uses UTC for time representation. For example, a client browser in one timezone, getTime() will be the same as a\n   * client browser in any other timezone.\n   *\n   *You can use this method to help assign a date and time to another Date object. This method is functionally equivalent to the valueOf() method.\n   * @return the number of milliseconds since the Unix Epoch.\n   */\n  getTime(): number {\n    return this._gDate.getTime();\n  }\n\n  /**\n   * Attention: Not implemented\n   * @return the time zone difference, in minutes, from current locale (host system settings) to UTC\n   * @todo add implementation\n   */\n  getTimezoneOffset(): number {\n    return this._gDate.getTimezoneOffset();\n  }\n\n  /**\n   * Output is not jalali day.\n   * @return getUTCDate of the corresponding Georgian date.\n   * @todo add implementation\n   */\n  getUTCDate(): number {\n    return this._gDate.getUTCDate();\n  }\n\n  /**\n   * Output is not jalali day.\n   * @return getUTCDay of the corresponding Georgian date.\n   * @todo add implementation\n   */\n  getUTCDay(): number {\n    return this._gDate.getUTCDay();\n  }\n\n  /**\n   * Output is not a Jalali Year.\n   * @return getUTCFullYear of the corresponding Georgian date.\n   * @todo add implementation\n   */\n  getUTCFullYear(): number {\n    return this._gDate.getUTCFullYear();\n  }\n\n  /**\n   * @return getUTCHours of the corresponding Georgian date.\n   * @todo add implementation\n   */\n  getUTCHours(): number {\n    return this._gDate.getUTCHours();\n  }\n\n  /**\n   * @return getUTCMilliseconds of the corresponding Georgian date.\n   * @todo add implementation\n   */\n  getUTCMilliseconds(): number {\n    return this._gDate.getUTCMilliseconds();\n  }\n\n  /**\n   * @return getUTCMinutes of the corresponding Georgian date.\n   * @todo add implementation\n   */\n  getUTCMinutes(): number {\n    return this._gDate.getUTCMinutes();\n  }\n\n  /**\n   * Output is not a Jalali Year.\n   * @return getUTCMonth of the corresponding Georgian date.\n   * @todo add implementation\n   */\n  getUTCMonth(): number {\n    return this._gDate.getUTCMonth();\n  }\n\n  /**\n   * @return getUTCSeconds of the corresponding Georgian date.\n   * @todo add implementation\n   */\n  getUTCSeconds(): number {\n    return this._gDate.getUTCSeconds();\n  }\n\n  /**\n   * sets the day of the JDate object relative to the beginning of the currently set month.\n   * @param date day number starts from 1.\n   * @return The number of milliseconds between 1 January 1970 00:00:00 UTC and the given date (the Date object is also changed in place).\n   */\n  setDate(date: number): number {\n    this.jDay = date;\n    return this.getTime();\n  }\n\n  /**\n   * sets the full year for a specified date according to local time. Returns new timestamp.\n   * @param year full Jalali year like 1397\n   * @param month number of month starting from 0\n   * @param date number of day starting from 1\n   */\n  setFullYear(year: number, month?: number, date?: number): number {\n    this.jYear = year;\n    if (month) { this.jMonth = month; }\n    if (date) {this.jDay = date; }\n    return this.getTime();\n  }\n\n  /**\n   * Sets the hours for a specified date according to local time, and returns the number of milliseconds since\n   * January 1, 1970 00:00:00 UTC until the time represented by the updated JDate instance.\n   * @param hours An integer between 0 and 23, representing the hour\n   * @param min An integer between 0 and 59, representing the minutes.\n   * @param sec An integer between 0 and 59, representing the seconds.\n   * @param ms A number between 0 and 999, representing the milliseconds.\n   * @return The number of milliseconds between January 1, 1970 00:00:00 UTC and the updated date.\n   */\n  setHours(hours: number, min?: number, sec?: number, ms?: number): number {\n    this._gDate.setHours(hours);\n    if (min !== undefined) { this.setMinutes(min); }\n    if (sec !== undefined) { this.setSeconds(sec); }\n    if (ms !== undefined) { this.setMilliseconds(ms); }\n    return this.getTime();\n  }\n\n  /**\n   * Sets the milliseconds for a specified date according to local time.\n   * @param ms A number between 0 and 999, representing the milliseconds.\n   * @return The number of milliseconds between 1 January 1970 00:00:00 UTC and the updated date.\n   */\n  setMilliseconds(ms: number): number {\n    this._gDate.setMilliseconds(ms);\n    return this.getTime();\n  }\n\n  /**\n   * Sets the minutes for a specified date according to local time.\n   * @param min An integer between 0 and 59, representing the minutes.\n   * @param sec An integer between 0 and 59, representing the seconds.\n   * @param ms A number between 0 and 999, representing the milliseconds.\n   * @return The number of milliseconds between 1 January 1970 00:00:00 UTC and the updated date.\n   */\n  setMinutes(min: number, sec?: number, ms?: number): number {\n    this._gDate.setMinutes(min);\n    if(sec !== undefined) { this.setSeconds(sec); }\n    if (ms !== undefined) { this.setMilliseconds(ms); }\n    return this.getTime();\n  }\n\n  /**\n   * Sets the month for a specified date according to the currently set year.\n   * @param month An integer between 0 and 11, representing the months Farvardin through Esfand.\n   * @param date An integer from 1 to 31, representing the day of the month.\n   * @return The number of milliseconds between 1 January 1970 00:00:00 UTC and the updated date.\n   */\n  setMonth(month: number, date?: number): number {\n    this.jMonth = month;\n    if (date !== undefined) { this.jDay = date; }\n    return this.getTime();\n  }\n\n  /**\n   * Sets the seconds for a specified date according to local time.\n   * @param sec An integer between 0 and 59, representing the seconds.\n   * @param ms A number between 0 and 999, representing the milliseconds.\n   * @return The number of milliseconds between 1 January 1970 00:00:00 UTC and the updated date.\n   */\n  setSeconds(sec: number, ms?: number): number {\n    this._gDate.setSeconds(sec);\n    if (ms !== undefined) { this.setMilliseconds(ms); }\n    return this.getTime();\n  }\n\n  /**\n   * Sets the JDate object to the time represented by a number of milliseconds since January 1, 1970, 00:00:00 UTC.\n   * @param time sets the Date object to the time represented by a number of milliseconds since January 1, 1970, 00:00:00 UTC.\n   * @return The number of milliseconds between 1 January 1970 00:00:00 UTC and the updated date.\n   */\n  setTime(time: number): number {\n    this._createFromDate(new Date(time));\n    return time;\n  }\n\n  /**\n   * sets the day of the month for a specified date according to universal time.\n   * Then recreate the JDate object from new Georgian object.\n   * @param  date An integer from 1 to 31, representing the day of the month.\n   * @return The number of milliseconds between 1 January 1970 00:00:00 UTC and the updated date.\n   * @todo add implementation\n   */\n  setUTCDate(date: number): number {\n    this._gDate.setUTCDate(date);\n    this._createFromDate(this._gDate);\n    return this.getTime();\n  }\n\n  /**\n   * Sets the full year for a specified date according to universal time.\n   * Then recreate the JDate object from new Georgian object.\n   * @param year  An integer specifying the numeric value of the year, for example, 1995.\n   * @param month  Optional. An integer between 0 and 11 representing the months January through December.\n   * @param date An integer between 1 and 31 representing the day of the month. If you specify the dayValue parameter, you must also\n   * specify the monthValue.\n   * @todo add implementation\n   */\n  setUTCFullYear(year: number, month?: number, date?: number): number {\n    this._gDate.setUTCFullYear(year, month, date);\n    this._createFromDate(this._gDate);\n    return this.getTime();\n  }\n\n  /**\n   * Sets the hour for a specified date according to universal time, and returns the number of milliseconds since\n   * January 1, 1970 00:00:00 UTC until the time represented by the updated Date instance.\n   * Then recreate the JDate object from new Georgian object.\n   * @param hours  An integer between 0 and 23, representing the hour.\n   * @param min Optional. An integer between 0 and 59, representing the minutes.\n   * @param sec Optional. An integer between 0 and 59, representing the seconds. If you specify the secondsValue parameter,\n   *        you must also specify the minutesValue.\n   * @param ms Optional. A number between 0 and 999, representing the milliseconds. If you specify the msValue parameter,\n   *        you must also specify the minutesValue and secondsValue.\n   * @return The number of milliseconds between January 1, 1970 00:00:00 UTC and the updated date.\n   * @todo add implementation\n   */\n  setUTCHours(hours: number, min?: number, sec?: number, ms?: number): number {\n    this._gDate.setUTCHours(hours, min, sec, ms);\n    this._createFromDate(this._gDate);\n    return this.getTime();\n  }\n\n  /**\n   * Sets the milliseconds for a specified date according to universal time.\n   *\n   * Then recreate the JDate object from new Georgian object.\n   * @param ms A number between 0 and 999, representing the milliseconds.\n   * @return The number of milliseconds between 1 January 1970 00:00:00 UTC and the updated date.\n   * @todo add implementation\n   */\n  setUTCMilliseconds(ms: number): number {\n    this._gDate.setUTCMilliseconds(ms);\n    this._createFromDate(this._gDate);\n    return this.getTime();\n  }\n\n  /**\n   * Sets the minutes for a specified date according to universal time.\n   *\n   * Then recreate the JDate object from new Georgian object.\n   * @param min An integer between 0 and 59, representing the minutes.\n   * @param sec Optional. An integer between 0 and 59, representing the seconds. If you specify the secondsValue parameter,\n   *        you must also specify the minutesValue.\n   * @param ms Optional. A number between 0 and 999, representing the milliseconds. If you specify the msValue parameter,\n   *        you must also specify the minutesValue and secondsValue.\n   * @return The number of milliseconds between 1 January 1970 00:00:00 UTC and the updated date.\n   * @todo add implementation\n   */\n  setUTCMinutes(min: number, sec?: number, ms?: number): number {\n    this._gDate.setUTCMinutes(min, sec, ms);\n    this._createFromDate(this._gDate);\n    return this.getTime();\n  }\n\n  /**\n   * Sets the month for a specified date according to universal time.\n   *\n   * Then recreate the JDate object from new Georgian object.\n   * @param month An integer between 0 and 11, representing the months January through December.\n   * @param date Optional. An integer from 1 to 31, representing the day of the month.\n   * @return The number of milliseconds between 1 January 1970 00:00:00 UTC and the updated date.\n   * @todo add implementation\n   */\n  setUTCMonth(month: number, date?: number): number {\n    this._gDate.setUTCMonth(month, date);\n    this._createFromDate(this._gDate);\n    return this.getTime();\n  }\n\n  /**\n   * Sets the seconds for a specified date according to universal time.\n   *\n   * Then recreate the JDate object from new Georgian object.\n   * @param sec An integer between 0 and 59, representing the seconds.\n   * @param ms Optional. A number between 0 and 999, representing the milliseconds.\n   * @todo add implementation\n   */\n  setUTCSeconds(sec: number, ms?: number): number {\n    this._gDate.setUTCSeconds(sec, ms);\n    this._createFromDate(this._gDate);\n    return this.getTime();\n  }\n\n  /**\n   * @return name of the day of the week in persian.\n   * @example Ø¯ÙØ´ÙØ¨Ù\n   */\n  getNameOfTheDay(): string {\n    return JDate.DAYS_OF_WEEK[this.getDay()];\n  }\n\n  /**\n   * @return name of the month in persian.\n   * @example ÙÙØ±\n   */\n  getNameOfTheMonth(): string {\n    return JDate.FA_MONTHS[this.getMonth()];\n  }\n\n  /**\n   * returns the date portion of a Date object in human readable form in Persian.\n   * @return a string following this pattern: \"nameOfTheDay nameOfTheMonth dayNumber fullYear\".\n   * @example Ù¾ÙØ¬âØ´ÙØ¨Ù Ø§Ø³ÙÙØ¯ 30 1375\n   */\n  toDateString(): string {\n    return `${this.getNameOfTheDay()} ${this.getNameOfTheMonth()} ${this.getDate()} ${this.getFullYear()}`;\n  }\n\n  /**\n   * Returns time marker of object time. all hour numbers lesser than 12 are before noon and all greater than 12 are after noon.\n   * @param shortVersion controls output. if be true, output will be in short format like: Ø¨.Ø¸ if be false, output will be in complete format like: Ø¨Ø¹Ø¯ Ø§Ø² Ø¸ÙØ±\n   * @return time marker for showing if time is before noon or after it\n   */\n  getTimeMarker(shortVersion: boolean = false): string {\n    if (this.getHours() < 12) { return shortVersion ? JDate.SHORT_BEFORE_NOON : JDate.COMPLETE_BEFORE_NOON; }\n    return shortVersion ? JDate.SHORT_AFTER_NOON : JDate.COMPLETE_AFTER_NOON;\n  }\n\n  /**\n   * Replace patterns of date formatting with corresponding strings from JDate object values.\n   * In bi-character pattern parts, missed digits will fill with zero.\n   * @param pattern a pattern string with replaceable parts:\n   *\n   *        yyyy -> Year number in 4-digit representation. ex: 1397\n   *\n   *        yy -> Year number in 2-digit representation. ex: 97\n   *\n   *        mmmm -> Name of the month in English representation. ex: Esfand\n   *\n   *        mmm -> Name of the month in Persian representation. ex: Ø§Ø³ÙÙØ¯\n   *\n   *        mm -> 2-digit number of the month starting from 1\n   *\n   *        m -> non zero-padding number of the month starting from 1\n   *\n   *        dddd -> Name of the day in the week in English representation. ex: Shanbe\n   *\n   *        ddd -> Name of the day in the week id Persian representation. ex: Ø´ÙØ¨Ù\n   *\n   *        dd -> 2-digit number of the day in the month starting from 1\n   *\n   *        d -> non zero-padding number of the day in the month starting from 1\n   *\n   * @return A formatted string that all Date pattern parts has been replaced. Other characters of the pattern will left unchanged.\n   */\n  private _format_date(pattern: string): string {\n    return pattern.replace(/yyyy/g, JDate.zeroPadding(this.getFullYear(), 4))\n      .replace(/\\byy\\b/g, (this.getFullYear() % 100).toString())\n      .replace(/\\bmmmm\\b/g, JDate.EN_MONTHS[this.getMonth()])\n      .replace(/\\bmmm\\b/g, JDate.FA_MONTHS[this.getMonth()])\n      .replace(/\\bmm\\b/g, JDate.zeroPadding(this.getMonth() + 1, 2))\n      .replace(/\\bm\\b/g, (this.getMonth() + 1).toString())\n      .replace(/\\bdddd\\b/g, JDate.EN_DAYS_OF_WEEK[this.getDay()])\n      .replace(/\\bddd\\b/g, JDate.DAYS_OF_WEEK[this.getDay()])\n      .replace(/\\bdd\\b/g, JDate.zeroPadding(this.getDate(), 2))\n      .replace(/\\bd\\b/g, this.getDate().toString())\n  }\n\n  /**\n   * Replace patterns of time formatting with corresponding strings from JDate object values.\n   *\n   * In bi-character pattern parts, missed digits will fill with zero.\n   * @param pattern a pattern string with replaceable parts:\n   *\n   *        HH -> 2-digit form of hour number in 24-hour clock format.\n   *\n   *        H -> non zero-padding form of hour number in 24-hour clock format.\n   *\n   *        hh -> 2-digit form of hour number in 12-hour clock format.\n   *\n   *        h -> non zero-padding form of hour number in 12-hour clock format.\n   *\n   *        H -> non zero-padding form of hour number in 12-hour clock format.\n   *\n   *        MM -> 2-digit form of minutes number.\n   *\n   *        M -> non zero-padding form of minutes number\n   *\n   *        SS -> 2-digit form of seconds number.\n   *\n   *        S -> non zero-padding form of seconds number.\n   *\n   *        l -> number of milliseconds\n   *\n   *        T -> Time marker in full format like: ÙØ¨Ù Ø§Ø² Ø¸ÙØ±\n   *\n   *        t -> Time marker in short format like: Ù.Ø¸\n   */\n  private _format_time(pattern: string): string {\n    return pattern.replace(/\\bHH\\b/g, JDate.zeroPadding(this.getHours(), 2))\n      .replace(/\\bH\\b/g, this.getHours().toString())\n      .replace(/\\bhh\\b/g, JDate.zeroPadding(this.getHours12hourClock(), 2))\n      .replace(/\\bh\\b/g, this.getHours12hourClock().toString())\n      .replace(/\\bMM\\b/g, JDate.zeroPadding(this.getMinutes(), 2))\n      .replace(/\\bM\\b/g, this.getMinutes().toString())\n      .replace(/\\bSS\\b/g, JDate.zeroPadding(this.getSeconds(), 2))\n      .replace(/\\bS\\b/g, this.getSeconds().toString())\n      .replace(/\\bl\\b/g, this.getMilliseconds().toString())\n      .replace(/\\bT\\b/g, this.getTimeMarker(false))\n      .replace(/\\bt\\b/g, this.getTimeMarker(true));\n  }\n\n  /**\n   * This method format date and time stored in the JDate object according to the entered pattern.\n   *\n   * Only masks will replace and all other characters will be unchanged after formatting.\n   *\n   * You can use masks several times in a pattern but be careful because if some of masks written immediately, they create new masks with\n   * different meaning. It's better to always have some splitter characters between different masks.\n   * @param pattern a string containing zero or more formatting mask.\n   *\n   * Masks:\n   *\n   *        yyyy -> Year number in 4-digit representation. Leading zero for years lesser than 1000 ex: 1397\n   *\n   *        yy -> Year number in 2-digit representation without Leading zeros. ex: 97\n   *\n   *        mmmm -> Name of the month in English representation. ex: Esfand\n   *\n   *        mmm -> Name of the month in Persian representation. ex: Ø§Ø³ÙÙØ¯\n   *\n   *        mm -> 2-digit number of the month starting from 1. Leading zero for single-digit months.\n   *\n   *        m -> number of the month starting from 1 without Leading zeros.\n   *\n   *        dddd -> Name of the day in the week in English representation. ex: Shanbe\n   *\n   *        ddd -> Name of the day in the week id Persian representation. ex: Ø´ÙØ¨Ù\n   *\n   *        dd -> 2-digit number of the day in the month starting from 1. Leading zero for single-digit days.\n   *\n   *        d -> number of the day in the month starting from 1 without Leading zeros.\n   *\n   *        HH -> 2-digit form of hour number in 24-hour clock format. Leading zero for single-digit hours.\n   *\n   *        H -> non zero-padding form of hour number in 24-hour clock format without Leading zeros.\n   *\n   *        hh -> 2-digit form of hour number in 12-hour clock format. Leading zero for single-digit hours.\n   *\n   *        H -> non zero-padding form of hour number in 12-hour clock format without Leading zeros.\n   *\n   *        MM -> 2-digit form of minutes number. Leading zero for single-digit minutes.\n   *\n   *        M -> non zero-padding form of minutes number without Leading zeros.\n   *\n   *        SS -> 2-digit form of seconds number. Leading zero for single-digit seconds.\n   *\n   *        S -> non zero-padding form of seconds number without Leading zeros.\n   *\n   *        l -> number of milliseconds without Leading zeros.\n   *\n   *        T -> Time marker in full format like: ÙØ¨Ù Ø§Ø² Ø¸ÙØ±\n   *\n   *        t -> Time marker in short format like: Ù.Ø¸\n   *@return formatted dateTime string.\n   */\n  format(pattern: string): string {\n    return this._format_time(this._format_date(pattern));\n  }\n\n  /**\n   * @return a string in simplified extended ISO format (ISO 8601), which is always 24 or 27 characters long (yyyy-mm-ddTHH:MM:SS.lZ).\n   *        Be careful because that T in the middle of the pattern is not a format Mask and is a simple character.\n   */\n  toISOString(): string {\n    return this.format('yyyy-mm-dd') + 'T' + this.format('HH:MM:SS.l') + 'Z';\n  }\n\n  /**\n   * @return a string representation of the Date object.\n   * [see toString method]{@link toString}\n   * @param key\n   */\n  toJSON(key?: any): string {\n    return this.toString();\n  }\n\n  /**\n   * returns formatted date with following pattern: 'ddd mmm d yyyy HH:MM:SS'\n   */\n  toString(): string {\n    return this.format('ddd mmm d yyyy HH:MM:SS')\n  }\n\n  /**\n   * [For more information see javascript Date object documentation about this method]{@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/toLocaleDateString}\n   *\n   * The new locales and options arguments let applications specify the language whose formatting conventions\n   * should be used and allow to customize the behavior of the function. In older implementations,\n   * which ignore the locales and options arguments, the locale used and the form of the string returned are\n   * entirely implementation dependent.\n   *\n   * @return a string with a language sensitive representation of the date portion of this date.\n   */\n  toLocaleDateString(): string;\n  toLocaleDateString(locales?: string | string[], options?: Intl.DateTimeFormatOptions): string;\n  toLocaleDateString(locales?: string | string[], options?: Intl.DateTimeFormatOptions): string {\n    return this._gDate.toLocaleDateString(locales, options);\n  }\n\n  /**\n   * @return toLocaleTimeString of Georgian Date .\n   * [For more information see javascript Date object documentation about this method]{@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/toLocaleTimeString}\n   */\n  toLocaleTimeString(): string;\n  toLocaleTimeString(locales?: string | string[], options?: Intl.DateTimeFormatOptions): string;\n  toLocaleTimeString(locales?: string | string[], options?: Intl.DateTimeFormatOptions): string {\n    return this._gDate.toLocaleTimeString(locales, options);\n  }\n\n  /**\n   * @return toTimeString of Georgian date\n   *\n   * [For more information see javascript Date object documentation about this method]{@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/toTimeString}\n   */\n  toTimeString(): string {\n    return this._gDate.toTimeString();\n  }\n\n  /**\n   * @return toUTCString of Georgian date.\n   *\n   * [For more information see javascript Date object documentation about this method]{@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/toUTCString}\n   * @todo add implementation\n   */\n  toUTCString(): string {\n    return this._gDate.toUTCString();\n  }\n\n  /**\n   * Similar to the getTime method.\n   *\n   * [For more information also see getTime method]{@link getTime}\n   */\n  valueOf(): number {\n    return this.getTime();\n  }\n\n  addMonth(incValue: number): void {\n    // let newMonth: number = (this.getMonth() + incValue) % 11;\n    // let passedYears: number = this.getFullYear() + newMonth / 11;\n    // let newYear: number = newMonth === 0 ? ;\n    // this.setFullYear(newYear);\n    // this.setMonth(newMonth % 11);\n  }\n}\n\n","import { Pipe, PipeTransform } from '@angular/core';\nimport {JDate} from '../JDate/jdate';\n\n/**\n * Pre-defined formats date formats those can use for formatting JDate objects with jdate pipe.\n */\nenum FromatNames {\n  'short' = 'yy/m/d h:M t',\n  'shortDate' = 'yy/m/d h:M t',\n  'medium' = 'd mmm yyyyØ h:M t',\n  'mediumDate' = 'd mmm yyyyØ h:M t',\n  'long' = 'd mmm yyyyØ h:M:S T',\n  'longDate' = 'd mmm yyyyØ h:M:S T',\n  'shortTime' = 'h:M t',\n  'mediumTime' = 'h:M:S t',\n  'longTime' = 'h:M:S.l T',\n}\n\n/**\n * Formats JDate objects or convert Date objects (or any instance of classes those implement that interface) to a `JDate` object and format\n * that according to the given format.\n *\n * The result of this pipe is not reevaluated when the input is mutated. To avoid the need to reformat the date on every change-detection\n * cycle, treat the date as an immutable object and change the reference when the pipe needs to run again.\n *\n * You can pass a format pattern string like [JDate format method]{@link https://alihoseiny.github.io/ngx-persian/classes/JDate.html#format}\n *\n * Also you can use pre-defined format names described below:\n *\n *        'short': equivalent to yy/m/d h:M t {@example '97/2/23 12:12 Ø¨.Ø¸'}\n *\n *        'shortDate': same as short\n *\n *        'medium': equivalent to 'd mmm yyyyØ h:M t' {@example '23 Ø§Ø±Ø¯ÛØ¨ÙØ´Øª 1397Ø 12:12 Ø¨.Ø¸'}\n *\n *        'mediumDate': same as medium\n *\n *        'long': equivalent to 'd mmm yyyyØ h:M:S T' {@example '23 Ø§Ø±Ø¯ÛØ¨ÙØ´Øª 1397Ø 12:12:30 Ø¨Ø¹Ø¯ Ø§Ø² Ø¸ÙØ±'}\n *\n *        'longDate': same as long\n *\n *        'shortTime': equivalent to 'h:M t' {@example '12:12 Ø¨.Ø¸'}\n *\n *        'mediumTime': equivalent to 'h:M:S t' {@example '12:12:30 Ø¨.Ø¸'}\n *\n *        'longTime': equivalent to 'h:M:S.l T' {@example '12:12:30.300 Ø¨Ø¹Ø¯ Ø§Ø² Ø¸ÙØ±'}\n *\n *  Default format is `medium`.\n */\n@Pipe({\n  name: 'jdate'\n})\nexport class JdatePipe implements PipeTransform {\n\n  /**\n   * Checks if `formatName` is in the `FromatNames` enum. If it is, returns related format string. Else returns `formatName` string\n   * without any change.\n   * @param formatName format name or format pattern string\n   * @return formatting pattern string\n   */\n  private static convertNameToFormat(formatName: string): string {\n    if (!FromatNames[formatName]) {\n      return formatName\n    }\n    return FromatNames[formatName];\n  }\n\n  /**\n   * Formatting the date using `format` method of it with proper formatting pattern created from `format`\n   * @param value a Jalali Date object or an instance of `Date` object or any class implementing that interface\n   * @param format format name or format pattern string\n   */\n  transform(value: Date, format: string = 'mediumDate'): string {\n    if (!(value instanceof JDate)) {\n      value = new JDate(value);\n    }\n    // @ts-ignore\n    return value.format(JdatePipe.convertNameToFormat(format));\n  }\n\n}\n","import { NgModule } from '@angular/core';\nimport {PersianLetterDirective, PersianNumbersDirective} from './Validators/persian-directives';\nimport {FaNumPipe} from './Pipes/faNum.pipe';\nimport {EnNumPipe} from './Pipes/enNum.pipe';\nimport {IRCurrencyPipe} from './Pipes/IRCurrency.pipe';\nimport {NationalCodePipe} from './Pipes/nationalCode.pipe';\nimport {JdatePipe} from './Pipes/jdate.pipe';\n@NgModule({\n  declarations: [PersianLetterDirective, PersianNumbersDirective, FaNumPipe, EnNumPipe, IRCurrencyPipe, NationalCodePipe, JdatePipe],\n  imports: [],\n  exports: [PersianLetterDirective, PersianNumbersDirective, FaNumPipe, EnNumPipe, IRCurrencyPipe, NationalCodePipe, JdatePipe]\n})\nexport class NgxPersianModule { }\n","/**\n * When mobile phone number is not valid this error will throw.\n */\nexport class InvalidMobilePhoneNumberError extends Error {\n  constructor(...params) {\n    super(...params);\n\n    // Maintains proper stack trace for where our error was thrown (only available on V8)\n    // @ts-ignore\n    if (Error.captureStackTrace) {\n      // @ts-ignore\n      Error.captureStackTrace(this, InvalidMobilePhoneNumberError);\n    }\n\n    this.message = 'This phone number is not valid.';\n  }\n}\n","/**\n * This error will throw when there is no valid mobile operator for inputted mobile phone number.\n */\nexport class InvalidMobileOperatorError extends Error {\n  constructor(...params) {\n    super(...params);\n\n    // Maintains proper stack trace for where our error was thrown (only available on V8)\n    // @ts-ignore\n    if (Error.captureStackTrace) {\n      // @ts-ignore\n      Error.captureStackTrace(this, InvalidMobileOperatorError);\n    }\n\n    this.message = 'Operator of this number is not recognizable.';\n  }\n}\n","import { Injectable } from '@angular/core';\nimport {InvalidMobilePhoneNumberError} from './InvalidMobilePhoneNumber.error';\nimport {InvalidMobileOperatorError} from './InvalidMobileOperator.error';\n\n/**\n * English name of mobile operators are enum keys and persian name of them are values.\n * All characters of all of the keys are in lowercase\n */\nexport enum operatorsNames {\n  irancell = 'Ø§ÛØ±Ø§ÙØ³Ù',\n  mci = 'ÙÙØ±Ø§Ù Ø§ÙÙ',\n  talia = 'ØªØ§ÙÛØ§',\n  rightel = 'Ø±Ø§ÛØªÙ',\n  spadan = 'Ø§Ø³Ù¾Ø§Ø¯Ø§Ù',\n  tkc = 'Ø´Ø¨Ú©Ù ÙØ³ØªÙÙ ØªÙÙÙ ÙÙØ±Ø§Ù Ú©ÛØ´',\n  shatel = 'Ø´Ø§ØªÙ',\n  aptel = 'Ø¢Ù¾ØªÙ',\n  azartel = 'Ø¢Ø°Ø±ØªÙ',\n  samantel = 'Ø³Ø§ÙØ§ÙØªÙ',\n  lotustel = 'ÙÙØªÙØ³âØªÙ',\n  anarestan = 'Ø§ÙØ§Ø±Ø³ØªØ§Ù'\n}\n\n/**\n * A constant object. Keys are Mobile operator names and values are arrays those keep mobile codes.\n */\nexport const MobileCodes = {\n  irancell: ['0901', '0902', '0903', '0904', '0905', '0930', '0933', '0935', '0936', '0937', '0938', '0939', '0941'],\n  mci: ['0910', '0911', '0912', '0913', '0914', '0915', '0916', '0917', '0918', '0919', '0990', '0991', '0992'],\n  talia: ['0932'],\n  rightel: ['0920', '0921', '0922'],\n  spadan: ['0931'],\n  tkc: ['0934'],\n  shatel: ['099810', '099811', '099812'],\n  aptel: ['099910', '099911', '099913'],\n  azartel: ['099914'],\n  samantel: ['099996', '099997', '099998', '099999'],\n  lotustel: ['09990'],\n  anarestan: ['09944']\n};\n\n/**\n * This service using for validating phone numbers sold by Iranian Mobile operators.\n *\n * You can get operator name and validation result of a phone number by methods of this service.\n */\n@Injectable({\n  providedIn: 'root'\n})\nexport class MobilePhoneNumberService {\n\n  /**\n   * This method only checks if phoneNumber follows valid pattern. means starting by +98 or 0, then a 9 digit and then 9 digits.\n   * This method will not check validity of the phoneNumber code and can accept invalid strings those only locking like phone numbers and\n   * in reality are not a valid phone number.\n   * @link isValidPhoneNumber\n   * @param phoneNumber Digits in this string should be english digits.\n   */\n  isPhoneNumberPatternValid(phoneNumber: string): boolean {\n    const generalRegex = new RegExp(/^((\\+98|0)9\\d{9})$/);\n    return generalRegex.test(phoneNumber);\n  }\n\n  /**\n   * Removes +98 from the phoneNumber and replaces it with a 0 character.\n   * @param phoneNumber Digits in this string should be english digits.\n   */\n  normalizePhoneNumber(phoneNumber: string): string {\n    return phoneNumber.replace('+98', '0');\n  }\n\n  /**\n   * Checks all codes of all operators in MobileCodes object. IF finds a matched code, returns persian or english name of that operator from\n   * operatorsNames enum.\n   * @return operator name in english or persian according to the nameInEnglish parameter\n   * @throws InvalidMobileOperatorError if pattern is correct but operator code is not valid.\n   * @throws InvalidMobilePhoneNumberError If pattern is not correct\n   * @param phoneNumber Digits in this string should be english digits.\n   * @param nameInEnglish if true, operator name will return in English. if false operator name will return in persian\n   * @link MobileCodes\n   * @link operatorsNames\n   */\n  getPhoneNumberOperator(phoneNumber: string, nameInEnglish: boolean = false): string {\n    if (!this.isPhoneNumberPatternValid(phoneNumber)) { throw new InvalidMobilePhoneNumberError(); }\n    phoneNumber = this.normalizePhoneNumber(phoneNumber);\n    for (const operator of Object.keys(MobileCodes)) {\n      for (const code of MobileCodes[operator]) {\n        if (phoneNumber.indexOf(code) === 0) {\n          return nameInEnglish ? operator : operatorsNames[operator];\n        }\n      }\n    }\n    throw new InvalidMobileOperatorError();\n  }\n\n  /**\n   * @return If phoneNumber follows correct pattern and has valid operator, return true. Otherwise returns false.\n   * @param phoneNumber Digits in this string should be english digits.\n   * @link getPhoneNumberOperator\n   */\n  isValidPhoneNumber(phoneNumber: string): boolean {\n    try {\n      this.getPhoneNumberOperator(phoneNumber);\n      return true;\n    } catch (e) {\n      return false;\n    }\n  }\n}\n","/**\n * When mobile phone number is not valid this error will throw.\n */\nexport class InvalidNationalCodeError extends Error {\n  nationalCode: string;\n  constructor(nationalCode: string = '', ...params) {\n\n    super(...params);\n\n    this.nationalCode = nationalCode;\n\n    // Maintains proper stack trace for where our error was thrown (only available on V8)\n    // @ts-ignore\n    if (Error.captureStackTrace) {\n      // @ts-ignore\n      Error.captureStackTrace(this, InvalidNationalCodeError);\n    }\n\n    this.message = `The national code value (${this.nationalCode}) is not a valid national code.`;\n  }\n}\n","import { Injectable } from '@angular/core';\nimport {InvalidNationalCodeError} from './InvalidNationalCode.error';\n\n/**\n * For validating Iranian National code (number), you can use this service in your components or every other places using DI or not.\n */\n@Injectable({\n  providedIn: 'root'\n})\nexport class NationalCodeService {\n\n  /**\n   *\n   * [We are using for loop instead of match or split because it has better performance according to this link]{@link https://stackoverflow.com/a/46312614/5400597}\n   * @return true if all characters of the `input` are equal and input length is greater than 1. Otherwise returns false.\n   * @param input\n   */\n  private _is_repetitive(input: string): boolean {\n    if (input.length < 2) { return false; }\n    const firstChar = input.charAt(0);\n    for (let i = 1; i < input.length; i++) {\n      if (input.charAt(i) !== firstChar) { return false; }\n    }\n    return true;\n  }\n\n  /**\n   * This method adds zero character at the beginning of the input until the length of the result reach to 10.\n   *\n   * This method removes spaces from right and left sides of the input.\n   *\n   * ATTENTION: This method doesn't any validation about correctness of the input if it has correct length (between 8 and 10).\n   * @param nationalCode a number with at most 10 digits or a string with at most 10 character.\n   * @return a string with length equal to 10.\n   * @throws InvalidNationalCodeError when length of the input value is greater than 10.\n   */\n  normalize(nationalCode: number | string): string {\n    if (! nationalCode) { throw new InvalidNationalCodeError(); }\n    nationalCode = nationalCode.toString();\n    nationalCode = nationalCode.trim();\n    const nationalCodeLength = nationalCode.length;\n    if (nationalCodeLength > 10 || nationalCodeLength < 8) { throw new InvalidNationalCodeError(nationalCode); }\n    return '0'.repeat(10 - nationalCodeLength) + nationalCode;\n  }\n\n  /**\n   * This method first normalizes the input using `normalize` method and implicitly checks input length, So you DO NOT NEED to\n   * normalize input before, but this will not make any bad effect.\n   *\n   * [Then checking validation of the input using algorithm described in this link]{@link http://www.aliarash.com/article/codemeli/codemeli.htm}\n   * @param nationalCode\n   */\n  isValid(nationalCode: number | string): boolean {\n    if (!nationalCode) { return false; }\n    nationalCode = nationalCode.toString();\n    if (this._is_repetitive(nationalCode)) { return false; }\n    try {\n      nationalCode = this.normalize(nationalCode); // Normalizing the input and checking input length validation implicitly.\n    } catch (e) {\n      return false; // Input length is not in the valid range.\n    }\n    let multiplicationResult = 0;\n    for (let i = 0; i < 9; i++) {\n      multiplicationResult += parseInt(nationalCode.charAt(i), 10)  * (10 - i);\n    }\n    const reminder = multiplicationResult % 11;\n    const controlNum = parseInt(nationalCode.charAt(9));\n    let desiredControlNum =  reminder;\n    if (reminder > 1) {\n      desiredControlNum = 11 - reminder;\n    }\n    return desiredControlNum === controlNum;\n  }\n}\n"],"names":["tslib_1.__extends","tslib_1.__values"],"mappings":"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"}